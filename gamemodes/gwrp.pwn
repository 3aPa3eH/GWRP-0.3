/***
	You can change the mode of the game, but without removing the copyright.
	
	© MacMailler, 2012—2014.
***/

#define FOREACH_NO_BOTS

#include <a_samp>
#include "..\include\kickfix"
#include "..\include\ctime"
#include "..\include\a_custom"
#include "..\include\a_mysql"
#include "..\include\encrypt"
#include "..\include\sscanf2"
#include "..\include\foreach"
#include "..\include\streamer"
#include "..\include\regex"
#include "..\include\sorting"
#include "..\include\skinsort"
#include "..\include\mloader"
#include "..\include\dc_cmd"
#include "..\include\a_cam"
#include "..\include\mxINI"


#define __GamemodeName__		"GWRP"
#define __GamemodeVersion__		"v0.3-R2"
#define __DbPrefix__			""

#define __TableUsers__			"users"
#define __TableHouses__			"houses"
#define __TableBusines__		"busines"
#define __TableStuffs__			"stuffs"
#define __TableSpawns__			"spawns"
#define __TableBanned__			"banned"
#define __TableBlacklist__		"blacklist"
#define __TableBurgers__		"burgers"
#define __TableDonate__			"donate_info"
#define __TableFracInfo__		"frac_info"
#define __TableFracModels__		"frac_models"
#define __TableFracVehicles__	"frac_vehicles"
#define __TableFracSkins__		"frac_skins"
#define __TableGangInfo__		"ganginfo"
#define __TableGasstations__	"gasstations"
#define __TablePickups__		"pickups"
#define __TableVehicles__		"vehicles"
#define __TableFracRanks__		"frac_ranks"
#define __TableAntidmzones__	"antidmzones"


#define MAX_FC					(300)
#define MAX_GAS 				(100)
#define MAX_FRAC				(21)
#define MAX_JOBS				(12)
#define MAX_RANK				(23)
#define MAX_HWEAP				(6)
#define MAX_SPAWNS				(24)
#define MAX_BIZNES				(100)
#define MAX_PORTALS				(60)
#define MAX_AFK_TIME 			(600)
#define MAX_ZONE_SIZE			(60.0)
#define MAX_COMPONENT 			(14)
#define MAX_VEHICLESex			(200)
#define MAX_ANTIDM_ZONES		(10)

#define T_DIST 					(55.0)
#define FIRST_HOUSE				(1)
#define AFK_TEXT_SET 			(2)
#define FC_DEF_NUMBER			"NONE"

#define CHECKPOINT_NONE			(0)
#define CHECKPOINT_HOME 		(12)

#define JAILED_MAN 				(268)
#define JAILED_WOMEN 			(69)

#define COLOR_BOX   			0x00000050
#define COLOR_OOC				0xE0FFFFAA
#define COLOR_USE				0x60A000AA
#define COLOR_GOV				0xEA8DF7AA
#define COLOR_RED				0xAA3333AA
#define COLOR_ADD				0x63FF60AA
#define COLOR_TELA				0x17302FFF
#define COLOR_PINK				0xFF66FFAA
#define COLOR_GREY				0xAFAFAFAA
#define COLOR_LRED				0xF65B00AA
#define COLOR_BLUE				0x1111BBAA
#define COLOR_LIME				0x10F441AA
#define COLOR_NAVY				0x100080AA
#define COLOR_AQUA				0xF0F8FFAA
#define COLOR_GOLD				0xB8860BAA
#define COLOR_NEWS				0xFFA500AA
#define COLOR_SPEC				0xBFC0C200
#define COLOR_CYAN				0xFF8282AA
#define COLOR_ALPHA				0xFFFFFF00
#define COLOR_IVORY				0xFFFF82AA
#define COLOR_OLIVE				0x808000AA
#define COLOR_DBLUE				0x2641FEAA
#define COLOR_BROWN				0xA52A2AAA
#define COLOR_CORAL				0xFF7F50AA
#define COLOR_BLACK				0x000000AA
#define COLOR_WHITE				0xFFFFFFAA
#define COLOR_FADE1				0xE6E6E6E6
#define COLOR_FADE2				0xC8C8C8C8
#define COLOR_FADE3				0xAAAAAAAA
#define COLOR_FADE4				0x8C8C8C8C
#define COLOR_FADE5				0x6E6E6E6E
#define COLOR_GRAD1				0xB4B5B7FF
#define COLOR_GRAD2				0xBFC0C2FF
#define COLOR_GRAD3				0xCBCCCEFF
#define COLOR_GRAD4				0xD8D8D8FF
#define COLOR_GRAD5				0xE3E3E3FF
#define COLOR_GRAD6				0xF0F0F0FF
#define COLOR_GREEN				0x33AA33AA
#define COLOR_INVIS				0xAFAFAF00
#define COLOR_RADIO				0x8D8DFF00
#define COLOR_GROVE				0x00D900C8
#define COLOR_FLBLUE			0x6495EDAA
#define COLOR_BISQUE			0xFFE4C4AA
#define COLOR_SYSTEM			0xEFEFF7AA
#define COLOR_FRENCH			0x29DBFFFF
#define COLOR_CHEATS			0xCDFFFFFF
#define COLOR_YELLOW			0xFFFF00AA
#define COLOR_PURPLE			0xC2A2DAAA
#define COLOR_ORANGE			0xFF9900AA
#define COLOR_INDIGO			0x4B00B0AA
#define COLOR_TOMATO			0xFF6347AA
#define COLOR_MAROON			0x800000AA
#define COLOR_AZTECAS			0x01FCFFC8
#define COLOR_ALLDEPT			0xFF8282AA
#define COLOR_MAGENTA			0xFF00FFFF
#define COLOR_CRIMSON			0xDC143CAA
#define COLOR_BANKOMAT			0x6053F3FF
#define COLOR_LIGHTRED			0xFF6347AA
#define COLOR_LIGHTRED2			0xFF0000FF
#define COLOR_LIGHTBLUE			0x33CCFFAA
#define COLOR_ORANGERED			0xFF4500AA
#define COLOR_LAWNGREEN			0x7CFC00AA
#define COLOR_LIMEGREEN			0x32CD32AA
#define COLOR_BRIGHTRED			0xDC143CAA
#define COLOR_BUS_PRICE			0x00AAFFEE
#define COLOR_TAXI_PRICE		0xFFCC00FF
#define COLOR_CHARTREUSE		0x7FFF00AA
#define COLOR_MEDIUMAQUA		0x83BFBFAA
#define COLOR_LIGHTGREEN		0x9ACD32AA
#define COLOR_GREENYELLOW		0xADFF2FAA
#define COLOR_YELLOWGREEN		0x9ACD32AA
#define COLOR_SPRINGGREEN		0x10FF7FAA
#define COLOR_MIDNIGHTBLUE		0x191970AA
#define COLOR_MEDIUMMAGENTA		0x8B008BAA

#define JOB_NONE 				(0)
#define JOB_DETECTIVE 			(1)
#define JOB_LAWYER 				(2)
#define JOB_WHORE 				(3)
#define JOB_DRUGDEALER			(4)
#define JOB_THEFTAUTO 			(5)
#define JOB_MECHANIC 			(6)
#define JOB_GUNDEALER 			(7)
#define JOB_AUTODEALER 			(8)
#define JOB_BUSMAN 				(9)
#define JOB_TRUCKER 			(10)

#define TEAM_CIV				(0)
#define TEAM_COP				(1)
#define TEAM_FBI				(2)
#define TEAM_ARMY				(3)
#define TEAM_MEDIC				(4)
#define TEAM_LCN				(5)
#define TEAM_YAKUZA				(6)
#define TEAM_GOV				(7)
#define TEAM_HITMANS			(8)
#define TEAM_PRESS				(9)
#define TEAM_TAXI				(10)
#define TEAM_LICENZERS			(11)
#define TEAM_BIKERS				(12)
#define TEAM_RUSSIAN			(13)
#define TEAM_GROVE				(14)
#define TEAM_CORONOS			(15)
#define TEAM_BALLAS				(16)
#define TEAM_RIFA				(17)
#define TEAM_VAGOS				(18)
#define TEAM_STREETDOGS			(19)
#define TEAM_FARMERS			(20)

#define D_NONE 					(10)
#define D_ATM			 		(500)
#define D_JOB			 		(600)
#define D_REF			 		(700)
#define D_WAIT					(800)
#define D_MENU					(900)
#define D_GIFT					(1000)
#define D_GGUN					(1100)
#define D_BARN					(1200)
#define D_EDIT					(1300)
#define D_GOTO					(1400)
#define D_HELP					(1500)
#define D_BANK					(1600)
#define D_AUTH 					(1700)
#define D_REGG 					(1800)
#define D_MASK					(1900)
#define D_FBANK					(2000)
#define D_RADIO					(2100)
#define D_BMENU					(2200)
#define D_HMENU					(2300)
#define D_CRANK					(2400)
#define D_COLORS				(2500)
#define D_REFILL 				(2600)
#define D_EN_BIZ				(2700)
#define D_EX_BIZ				(2800)
#define D_ARMOUR				(3000)
#define D_ONLINE 				(3100)
#define D_HEALME 				(3200)
#define D_TUNING				(3400)
#define D_OFFLINE 				(3500)
#define D_NETSTAT				(3600)
#define D_SETSTAT				(3700)
#define D_RENTCAR				(3900)
#define D_BANLIST				(4000)
#define D_WEATHER				(4100)
#define D_RP_NICK				(4200)
#define D_PDDTEST				(4300)
#define D_PORTABLE				(4400)
#define D_EN_HOUSE 				(4500)
#define D_EX_HOUSE 				(4600)
#define D_GIVE_PASS 			(4700)
#define D_FIGHTSTYLE 			(4800)
#define D_CHANGE_PASS 			(4900)
#define D_FACTORY_JOB			(5000)
#define TP_EDIT					(5100)
#define D_LMENU					(5200)
#define D_ADD_FC				(5300)
#define D_DEL_FC				(5400)
#define D_ADD_MODEL				(5500)
#define D_SHOW_MODEL			(5600)
#define D_EDIT_MODEL			(5700)
#define D_DONATE				(5800)
#define D_FARE					(5900)
#define D_SKILL					(6000)
#define D_SPAWN					(6100)
#define D_SERVICE				(6200)

#define FIND_ICON				(0)
#define ZAHVAT_ICON				(1)

#define REFUEL_TIME				(10000)
#define NUMBER_OF_TRUCKS		(11)

#define DEV_ADMIN				(5)
#define STD_ADMIN				(2)
#define	MOD_ADMIN				(1)
#define MAIN_ADMIN				(4)
#define SENIOR_ADMIN			(3)

#define ADV_TIME				(600)
#define SEC_TIMER				(900)
#define GAINS_TIME				(900)

#define Pl::					PL_
#define Bl::					BL_
#define Fc::					FC_
#define Gm::					GM_
#define Tp::					TP_
#define Td::					TextDraw
#define Gz::					GangZone
#define Db::					mysql_
#define Pt:: 					PlayerTextDraw

#define mnu::					MNU_
#define t3d::					T3D_
#define obj::					OBJ_
#define veh::					VEH_
#define pup::					PUP_
#define area::					AREA_

#define GetPBiz(%0)				Pl::Info[%0][pBizKey]
#define IsPlayerLeader(%0)		Pl::Info[%0][pLeader]

#define exp(%0)					((Pl::Info[%0][pLevel]+1) * levelexp)
#define costlvl(%0)				((Pl::Info[%0][pLevel]+1) * levelcost)
#define percent(%0,%1)			((%0 * %1) / 100)
#define rndNum(%0,%1) 			(%0 + random(%1))
#define GetFracID(%0)			(Pl::Info[%0][pMember]|Pl::Info[%0][pLeader])
#define GetPlayerJob(%0)		(Pl::Info[%0][pJob])
#define fracid<%0> 				GetFracID(%0)
#define rgb<%0>					(%0>>>8)
#define GetJailedSkin(%0) 		((Pl::Info[%0][pSex]==2)?(JAILED_WOMEN):(JAILED_MAN))

#define IsACop(%0) 				(TEAM_COP<=GetFracID(%0)<=TEAM_ARMY)
#define IsALicenzer(%0) 		(GetFracID(%0)==TEAM_LICENZERS)
#define IsPHelper(%0,%1)		(Pl::Info[%0][pHelper]>=%1)
#define IsAHelperDuty(%0) 		(HelperDuty[%0])
#define IsPMuted(%0) 			(Pl::Info[%0][pMuted]==1)

#define IsAMehCar(%0)			(isJobVehicle(JOB_MECHANIC,%0))
#define IsABusCar(%0)			(isJobVehicle(JOB_BUSMAN,%0))
#define IsATruckCar(%0)			(isJobVehicle(JOB_TRUCKER,%0))
#define IsANews(%0)				(isTeamVehicle(TEAM_PRESS,%0))
#define IsATaxiCar(%0)			(isTeamVehicle(TEAM_TAXI,%0))
#define IsAnAmbulance(%0)		(isTeamVehicle(TEAM_MEDIC,%0))
#define IsATruckrifa(%0)		(isTeamVehicle(TEAM_RIFA,%0))
#define IsACopCar(%0)			(TEAM_COP <= Fc::getFracId(%0) <= TEAM_ARMY)
#define IsACompTruck(%0)		(comptruck[0] <= %0 <= comptruck[1])

#define AddObject				CreateDynamicObject
#define Add3DText				CreateDynamic3DTextLabel


#if defined SRV_CLOSED
	#define SRV_NAME			"..::[RP]GrandWorld::.. [RUS] (private)"
	#define SRV_MAP				"San Andreas"
	#define SRV_MODE			"Role Play"
	#define SRV_SITE			"www.rp-grandworld.ru"
	#define SRV_PASS			"Войди_в_меня_полностью"
#else
	#define SRV_NAME			"..::[RP]GrandWorld::.. [RUS] (0.3x)"
	#define SRV_MAP				"San Andreas"
	#define SRV_MODE			"Role Play"
	#define SRV_SITE			"www.rp-grandworld.ru"
	#define SRV_PASS			"Войди_в_меня_полностью"
#endif
#define SRV_GRAVITY				(0.008)

#define INFINITY 				0x7F800000
#define REPLACE_TEXT 			"**ADBlock**"

// MySQL handle 
new Db::handle = -1;
new Db::conf[5][32];

enum pickupInfo {
	pOld,
	pDelay,
	Float:pOldPos[3],
}
new PickupInfo[MAX_PLAYERS][pickupInfo];

enum e_AFKInfo {
	afk_Time[2],
	afk_State,
	Float:afk_Pos,
	Text3D:afk_Text,
};
new AFKInfo[MAX_PLAYERS][e_AFKInfo];

new
	Fc::TOTAL,
	TOTAL_GASS,
	TOTAL_BIZZ,
	TOTAL_HOUSES,
	TOTAL_BURGERS,
	TOTAL_VEHICLES
;

// Menus`s
new
	Menu:IntMenu,
	Menu:BuyMenu,
	Menu:BarMenu,
	Menu:PizaMenu,
	Menu:SkinMenu,
	Menu:getweapon,
	Menu:Ammu1Menu,
	Menu:Ammu2Menu,
	Menu:BurgerMenu,
	Menu:HitmanMenu,
	Menu:ClothesMenu
;

// Global string`s
new
	src			[512],
	query		[2048],
	temp		[128],
	plname		[24],
	dialog		[2048],
	specstr		[128],
	string_ah	[512],
	dialogtext	[3000]
;

new
	RegEx:ADBlock,
	RegEx:ValidRPName,
	RegEx:ValidText
;

// Debug
#define	TOTAL_PLAYER_PAID		(0)
#define	TOTAL_SAVE_BIZNES		(1)
#define	TOTAL_SAVE_HOUSES		(2)
#define	TOTAL_SAVE_ACCOUNT		(3)
#define	TOTAL_QUERY_ERRORS		(4)
#define	TOTAL_RCON_LOGINS		(5)
new DEBUG[ 6 ];

// Pickup`s
new
	boj,
	buy,
	Piza,
	proba,
	weapon1,
	weapon2,
	weapon3,
	weapon4,
	//healash,
	healcnn,
	healfbi,
	testpdd,
	fire_ext,
	Parashut,
	saveTuning,
	givepasport
;

new
	mak			[2],
	barn		[2],
	Bank		[2],
	helpp		[3],
	prolaps		[2],
	hitpickup   [2],
	ammozakona	[4]
;
new pickupd[MAX_PLAYERS][2];

// Area`s
new
	area::ASH,
	area::Shamal,
	area::jailField,
	area::poppyField
;


// TextDraws`s
new
	Text:Time,
	Text:Logo[1]
;

new
	PlayerText:Td::Spec[MAX_PLAYERS],
	PlayerText:Td::Fuel[MAX_PLAYERS],
	PlayerText:Td::Name[MAX_PLAYERS],
	PlayerText:Td::Status[MAX_PLAYERS]
;

// 3D Text`s
new Text3D:ah_text;
//new Text3D:FactoryInfo	[2];
new Text3D:AttachText		[MAX_VEHICLES];

new const VehicleNames[ ][ ] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Pereniel","Sentinel","Dumper","Firetruck","Trashmaster","Stretch","Manana","Infernus",
	"Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi","Washington","Bobcat","Mr Whoopee","BF Injection",
	"Hunter","Premier","Enforcer","Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie",
	"Stallion","Rumpo","RC Bandit","Romero","Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder",
	"Reefer","Tropic","Flatbed","Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler","ZR3 50","Walton","Regina",
	"Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper","Rancher","FBI Rancher","Virgo","Greenwood",
	"Jetmax","Hotring","Sandking","Blista Compact","Police Maverick","Boxville","Benson","Mesa","RC Goblin","Hotring A","Hotring B",
	"Bloodring Banger","Rancher","Super GT","Elegant","Journey","Bike","Mountain Bike","Beagle","Cropdust","Stunt","Tanker","RoadTrain",
	"Nebula","Majestic","Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent","Bullet","Clover",
	"Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility","Nevada","Yosemite","Windsor","Monster A",
	"Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight","Trailer",
	"Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer A","Emperor",
	"Wayfarer","Euros","Hotdog","Club","Trailer B","Trailer C","Andromada","Dodo","RC Cam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T.","Alpha","Phoenix","Glendale","Sadler","L Trailer A","L Trailer B",
	"Stair Trailer","Boxville","Farm Plow","U Trailer"
};

enum rInfo {
	rName[16],
	rUrl [64],
}
new RadioInfo[][rInfo] = {
	{"OFF", 			"-" },
	{"DFM", 			"http://92.50.177.134:8000/dfm.mp3"},
	{"4Life",			"http://play.radio4life.ru:8000/radio"},
	{"Europa +",		"http://webcast.emg.fm:55655/europaplus128.mp3"},
	{"Radio 13",		"http://play.radio13.ru:10000/"},
	{"Zaycev FM", 		"http://radio.zaycev.fm:9002/ZaycevFM(128)"},
	{"ENERGY FM",		"http://217.199.213.168:8000/v1_1"},
	{"Radio Record",	"http://radio01-cn03.akadostream.ru:8000/radiorecord128.mp3"}
};

enum club_enum {
	cArea,
	Float:cX,
	Float:cY,
	Float:cZ,
	Float:cS,
	cVirtual,
}
new ClubInfo[][club_enum] = {
	{-1, 831.6627, -2062.2813, 12.8672, 100.0, 0},
	{-1, 2531.809, -1682.7671, 1027.68, 100.0, 11}
};

new CP						[MAX_PLAYERS];
new MG2						[MAX_PLAYERS];
new Fixr					[MAX_PLAYERS char];
new pddo					[MAX_PLAYERS];
new Fell					[MAX_PLAYERS];
new Wait					[MAX_PLAYERS char];
new Music					[MAX_PLAYERS];
new CarID					[MAX_PLAYERS];
new Mobile					[MAX_PLAYERS];
new Condom					[MAX_PLAYERS];
new HireCar					[MAX_PLAYERS];
new gLastCar				[MAX_PLAYERS];
new CellTime				[MAX_PLAYERS];
new CarCalls				[MAX_PLAYERS];
new SexOffer				[MAX_PLAYERS];
new SexPrice				[MAX_PLAYERS];
new DrugGram				[MAX_PLAYERS];
new FindTime				[MAX_PLAYERS];
new CarOffer				[MAX_PLAYERS];
new CarPrice				[MAX_PLAYERS];
new TempSkin				[MAX_PLAYERS];
new useknock				[MAX_PLAYERS];
new UsedFind				[MAX_PLAYERS];
new LiveOffer				[MAX_PLAYERS];
new STDPlayer				[MAX_PLAYERS];
new JailPrice				[MAX_PLAYERS];
new RepairCar				[MAX_PLAYERS];
new DrugOffer				[MAX_PLAYERS];
new DrugPrice				[MAX_PLAYERS];
new AnimClear				[MAX_PLAYERS];
new ChosenSkin				[MAX_PLAYERS];
new GettingJob				[MAX_PLAYERS];
new CallLawyer				[MAX_PLAYERS];
new WantLawyer				[MAX_PLAYERS];
new ReduceTime				[MAX_PLAYERS];
new VoprosTime				[MAX_PLAYERS];
new acceptgruz				[MAX_PLAYERS char];
new WantedTime				[MAX_PLAYERS];
new TicketOffer				[MAX_PLAYERS];
new TicketMoney				[MAX_PLAYERS];
new RepairOffer				[MAX_PLAYERS];
new RepairPrice				[MAX_PLAYERS];
new RefillOffer				[MAX_PLAYERS];
new RefillPrice				[MAX_PLAYERS];
new checkpointb				[MAX_PLAYERS];
new checkpoints				[MAX_PLAYERS];
new DrugIntoxic				[MAX_PLAYERS];
new JobWaitTime				[MAX_PLAYERS];
new BusCallTime				[MAX_PLAYERS];
new BusAccepted				[MAX_PLAYERS];
new MatsHolding				[MAX_PLAYERS];
new TalkingLive				[MAX_PLAYERS];
new TaxiCallTime			[MAX_PLAYERS];
new TaxiAccepted			[MAX_PLAYERS];
new TransportTime			[MAX_PLAYERS];
new TransportCost			[MAX_PLAYERS];
new TransportDuty			[MAX_PLAYERS];
new MedicCallTime			[MAX_PLAYERS][2];
new ApprovedLawyer			[MAX_PLAYERS];
new PlayerTazeTime			[MAX_PLAYERS];
new TransportValue			[MAX_PLAYERS];
new TransportMoney			[MAX_PLAYERS];
new SelectCharPlace			[MAX_PLAYERS];
new TransportDriver			[MAX_PLAYERS];
new MechanicCallTime		[MAX_PLAYERS][2];
new PlayerCheckpoints		[MAX_PLAYERS][6];


new Pl::Drunk				[MAX_PLAYERS];
new Pl::CarInt				[MAX_PLAYERS];
new Pl::Stoned				[MAX_PLAYERS];
new Pl::NetStats			[MAX_PLAYERS];
new Pl::DrunkTime			[MAX_PLAYERS];
new Pl::CuffedTime			[MAX_PLAYERS];
new Pl::Paintballing		[MAX_PLAYERS];
new Pl::PaintballKills		[MAX_PLAYERS];
new Pl::CheckpointStatus	[MAX_PLAYERS];


new bool:Gag				[MAX_PLAYERS];
new bool:gOoc				[MAX_PLAYERS];
new bool:gFam				[MAX_PLAYERS];
new bool:gNews				[MAX_PLAYERS];
new bool:gDice				[MAX_PLAYERS];
new bool:OnAir				[MAX_PLAYERS];
new bool:TogTP				[MAX_PLAYERS];
new bool:OnDuty				[MAX_PLAYERS];
new bool:BigEar				[MAX_PLAYERS];
new bool:HidePM				[MAX_PLAYERS];
new bool:EditMode			[MAX_PLAYERS];
new bool:MedicBill			[MAX_PLAYERS];
new bool:SwitchKey			[MAX_PLAYERS];
new bool:AdminDuty			[MAX_PLAYERS];
new bool:WatchingTV			[MAX_PLAYERS];
new 	 WrongLogin			[MAX_PLAYERS];
new bool:PlayerTied			[MAX_PLAYERS];
new bool:HelperDuty			[MAX_PLAYERS];
new bool:SpawnChange		[MAX_PLAYERS];
new bool:SuspectKill		[MAX_PLAYERS];
new bool:PhoneOnline		[MAX_PLAYERS];
new bool:MoneyMessage		[MAX_PLAYERS];
new bool:TakingLesson		[MAX_PLAYERS];
new bool:PlayerCuffed		[MAX_PLAYERS];
new bool:PlayerUseTazed		[MAX_PLAYERS];

new bool:gCarLock			[MAX_VEHICLES char] = {false, ...};
new bool:VehicleBoot		[MAX_VEHICLES char] = {false, ...};
new bool:VehicleLight		[MAX_VEHICLES char] = {false, ...};
new bool:VehicleBonnet		[MAX_VEHICLES char] = {false, ...};

new iterator Queue<MAX_PLAYERS>;
new iterator CreatedCars<MAX_VEHICLES>;
new iterator ToglogPlayers<MAX_PLAYERS>;
new iterator AdminPlayers<MAX_PLAYERS>;
new iterator HelperPlayers<MAX_PLAYERS>;
new iterator WantedPlayers<MAX_PLAYERS>;
new iterator LeaderPlayers<MAX_PLAYERS>;
new iterator enginedVehicles<MAX_VEHICLES>;
new iterator PaintballPlayers<MAX_PLAYERS>;

new iterator MedicCalls<MAX_PLAYERS>;
new iterator MechanicCalls<MAX_PLAYERS>;
new iterator JobPlayers[MAX_JOBS]<MAX_PLAYERS>;
new iterator JobVehicles[MAX_JOBS]<MAX_VEHICLES>;
new iterator TeamPlayers[MAX_FRAC]<MAX_PLAYERS>;
new iterator TeamVehicles[MAX_FRAC]<MAX_VEHICLES>;
//new iterator TeamVehicles[MAX_FRAC]<MAX_VEHICLES>;
new iterator inStreamPlayers[MAX_PLAYERS]<MAX_PLAYERS>;
new iterator inStreamVehicles[MAX_PLAYERS]<MAX_VEHICLES>;
new iterator vehiclePassengers[MAX_VEHICLES]<MAX_PLAYERS>;

new Benzin[MAX_VEHICLES char];
new GangBiznes[MAX_FRAC char];
new NameChange[MAX_PLAYERS char];
new bool:GMTest[MAX_PLAYERS char];
new bool:usePlusC[MAX_PLAYERS char];
new bool:isEngined[MAX_VEHICLES char];
new bool:useBannyHop[MAX_PLAYERS char];
new bool:InAntiDmZone[MAX_PLAYERS char];
new bool:PlayerLogged[MAX_PLAYERS char];
new timeleft[MAX_PLAYERS];
new slotused[MAX_PLAYERS char];


new bdlog = 0;
new noooc = 1;
new OnAirMax;
new addtimer = 60000;
new levelcost = 25000;
new deathcost = 50;
new callcost = 10; //20 seconds
new timeshift = 0;
new levelexp = 4;
new cchargetime = 60;
new shifthour;
new ghour;
new Medics;
new Mechanics;
new TaxiDrivers, TaxiCall = INVALID_PLAYER_ID;
new BusDrivers, BusCall = INVALID_PLAYER_ID;
new StartingPaintballRound;
new PaintballRound;
new PaintballWinner = INVALID_PLAYER_ID;
new PaintballWinnerKills;
new bool:adds = true;

// Timer`s
static serverUpdate;

new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 1000, 1124, 1245, 1349, 1475, 1574, 1636, 1762, 1895, 1946, 2000 };
new SELLCAR2[] = { 2099, 2135, 2255, 2378, 2457, 2563, 2614, 2721, 2878, 2988, 3000 };
new SELLCAR3[] = { 3058, 3175, 3212, 3377, 3454, 3555, 3678, 3751, 3865, 3964, 4000 };
new SELLCAR4[] = { 4077, 4123, 4275, 4378, 4422, 4565, 4613, 4752, 4897, 4911, 5000 };

new wrongWeapon[] = { 16, 17, 18, 19, 20, 21, 26, 27, 34, 35, 36, 37, 38, 39, 40, 47 };

new Float:CargoInfo[][3] = {
	{0.0,0.0,0.0},
	{-59.0808,0.1278,3.1172},
	{-1017.7874,-681.4913,32.0078},
	{823.9176,854.6870,11.8571},
	{578.8217,1221.5995,11.7113},
	{266.3958,1407.6863,10.4828},
	{-1890.8984,-1731.3362,21.7500},
	{2783.4919,-2475.8999,13.6347}
};

new ATMp[2];
new Float:ATMs[][4] = {
	{2235.427,-1150.405,25.515,181.245},
	{1367.233,-1283.083,13.000,260.000},
	{1833.169,-1846.869,13.221,-90.622},
	{1928.606,-1768.946,13.189,-271.868},
	{1003.041,-930.357,41.971,11.327},
	{501.860,-1364.001,15.775,113.278},
	{-79.431,-1172.427,1.774,-113.278},
	{-2033.096,-52.185,35.011,90.622},
	{-1980.677,145.389,27.330,-90.622},
	{-1693.100,414.963,6.822,45.311},
	{-2281.511,-80.277,34.981,181.245},
	{157.817,-1947.213,3.416,124.606}
};

enum gasInfo
{
	ID,
	Float:pX,
	Float:pY,
	Float:pZ,
}
new GasStations[30][gasInfo];

new Float:BarCoord[][4] = {
	{4.0,495.7801,-76.0305,998.7578},
	{4.0,499.9654,-20.2515,1000.6797},
	{4.0,1215.9480,-13.3519,1000.9219},
	{10.0,-2658.9749,1407.4136,906.2734},
	{7.0,1207.2,-28.4,1000.9},
	{7.0,968.6,-47.1,1001.1},
	{7.0,-224.7,1404.9,27.7},
	{7.0,2536.1,-1321.2,1031.4},
	{10.0,1257.7211,-791.0063,1084.0078},
	{10.0,1262.6,-794.5,88.3},
	{10.0,-785.8726,500.0969,1371.7422},
	{10.0,-782.4619,500.0730,1371.7490},
	{10.0, 223.0705,1407.3998,27.7734},
	{10.0,2537.5303,-1288.9594,1054.6406},
	{10.0,1487.4,-666.9,95.6},
	{10.0,-328.1,1803.1,42.7},
	{10.0,1257.2,-791.0,1084.0},
	{10.0,1104.500,-824.8508,106.1270},
	{10.0,1104.9603,-828.8508,107.1270},
	{4.0,241.4241,1022.6302,1084.0194},
	{20.0,2196.1833,1608.6389,1005.0625},
	{12.0,2575.6638,-1682.2990,1033.7017},
	{7.0,825.0572,-2056.0303,12.8672}
};

enum intHouse
{
	intH,
	intPrice,
	Float:intX,
	Float:intY,
	Float:intZ,
}
new HouseInt[][intHouse] = {
	{2, 500000,2467.9895,-1698.2231,1013.5078}, // Ryder House
	{5, 500000,2233.7095,-1114.6260,1050.8828}, // Safe House group 1
	{9, 500000,2317.7146,-1026.5259,1050.2178}, // Safe House group 3
	{10, 500000,2259.5728,-1135.7870,1050.6328}, // Safe House group 4
	{3, 500000,235.1864,1187.1646,1080.2578}, // Byrglary House X1
	{2, 500000,226.0055,1240.0029,1082.1406}, // Byrglary House X2
	{1, 500000,223.0618,1287.3446,1082.1406}, // Byrglary House X3
	{5, 500000,226.9107,1114.3109,1080.9961}, // Byrglary House X4
	{12, 500000,443.2735,509.3156,1001.4195}, // Motel Room
	{10, 500000,23.9266,1340.6561,1084.3750}, // Byrglary House X14
	{12, 500000,2324.2925,-1148.8942,1050.7101}, // Unuded Safe House
	{4, 500000,-260.7433,1456.6342,1084.3672}, // Byrglary House X15
	{5, 500000,22.8225,1403.7344,1084.4297}, // Byrglary House X16
	{5, 500000,140.2087,1366.6652,1083.8594}, // Byrglary House X17
	{6, 500000,234.2954,1064.2416,1084.2115}, // Byrglary House X18
	{6, 500000,-68.8532,1351.4395,1080.2109}, // Byrglary House X19
	{8, 500000,2807.6042,-1174.1803,1025.5703}, // Colonel Furhbegers
	{1, 500000,2217.5000,-1076.1509,1050.4844}, // The Calems Toe Safehouse
	{2, 500000,2237.4856,-1080.2096,1049.0234}, // old Venturas Strip Casino
	{8, 500000,2365.2268,-1135.3055,1050.8750}, // Verdant Bluffs Safehouse
	{8, 500000,-42.7179,1405.9940,1084.4297}, // Byrglary House X21
	{7, 800000, 225.8882,1021.8793,1084.0165} // Gold bar
};


enum jInfo {
	jID,
	jP,
	jV,
	Float:jPos[3],
	jName[24],
}
new JobsInfo[][jInfo] = {
	{0,	-1,	0,	{0.0,	   0.0,		  0.0},		  "Безработный"},
	{1,	-1, 7,	{359.54080, 206.76930, 1008.3828}, "Детектив"},
	{2,	-1, 7,	{335.35450, 195.29080, 1014.1875}, "Адвокат"},
	{3,	-1,	0,	{2415.8638,-1220.7854, 25.273400}, "Проститутка"},
	{4,	-1,	0,	{2166.3772,-1675.3829, 15.085900}, "Наркодилер"},
	{5,	-1,	0,	{1109.3318,-1796.3042, 16.593800}, "Автоугонщик"},
	{6,	-1,	0,	{-1932.385, 276.21170, 41.039100}, "Автомеханик"},
	{7,	-1,	0,	{1366.4325,-1275.2096, 13.546900}, "Гандилер"},
	{8,	-1,	0,	{531.79300,-1292.4044, 17.242200}, "Автодилер"},
	{9,	-1,	0,	{1154.2208,-1770.8203, 16.599200}, "Автобусник"},
	{10,-1,	0,	{-77.72880,-1136.3896, 1.0781000}, "Дальнобойщик"}
};
enum dInfo {
	dPrice,
	dDrunk,
	dName[24],
	Float:dHP,
}
new DrinkInfo[][dInfo] = {
	{3,		0,	"Soda",			5.0},
	{3,		0,	"Coca-Cola",	5.0},
	{3,		0,	"Tea",			5.0},
	{2,		0,	"Water",		5.0},
	{5,		1,	"Beer",			15.0},
	{10,	3,	"Vodka",		25.0},
	{20,	2,	"Whiskey",		25.0},
	{20,	2,	"Tequila",		25.0},
	{25,	2,	"Martini",		25.0},
	{30,	4,	"Samagon",		30.0},
	{100,	4,	"Coniak",		35.0},
	{1,		0,	"Cigarette",	0.0}
};

enum burgsInfo
{
	bPrice,
	bName[24],
	Float:bHP,
}
new BurgerInfo[][burgsInfo] = {
	{10,	"Hamburger",		5.0},
	{10,	"CheeseBurger",		5.0},
	{30,	"BigMak",			10.0},
	{35,	"RoyalCheeseBurger",15.0},
	{28,	"MakFluri",			11.0},
	{60,	"ChikenMakNafix",	25.0},
	{31,	"Vishnevi Pirojok",	18.0},
	{8,		"Rojok",			4.0}
};

enum pizzaInfo
{
	Float:pizza_hp,
	pizza_price,
	piName[16],
}
new PizzaInfo[][pizzaInfo] = {
	{5.0,		3,		"Soda"},
	{5.0,		3,		"Coca-Cola"},
	{5.0,		3,		"Tea"},
	{3.0,		2,		"Water"},
	{15.0,		15,		"PiZZa"},
	{25.0,		50,		"Big PiZZa"},
	{10.0,		30,		"BigMak"}
};

enum eat_enum
{
	eat_price,
	Float:eat_hp,
	eat_name[15],
}
new EatInfo[][eat_enum] = {
	{10,	10.0,	"Перловка"},
	{15,	18.0,	"Картофель"},
	{15,	15.0,	"Гречка"},
	{10,	10.0,	"Компот"},
	{5,		10.0,	"Чай"}
};
enum ammoInfo
{
	gID,
	gAmmo,
	gPrice,
	gName[24],
}
new Ammu1Info[][ammoInfo] = {
	{24,	50,		3500,	"Deagle"},
	{22,	100,	2000,	"Pistol 9mm"},
	{23,	100,	2200,	"Silenced 9mm"},
	{25,	30,		3000,	"ShotGun"},
	{31,	200,	7000,	"M4"},
	{29,	200,	5000,	"MP5"},
	{30,	200,	7000,	"AK-47"},
	{5,		1,		500,	"BassBall Bat"},
	{1,		1,		500,	"Brass Knuckles"},
	{7,		1,		500,	"Billiard Cue"},
	{10,	1,		600,	"Purple Dildo"}
};

new Ammu2Info[][ammoInfo] = {
	{24,	50,		1500,	"Deagle"},
	{22,	100,	1000,	"Pistol 9mm"},
	{23 ,	100,	1200,	"Silenced 9mm"},
	{25,	30,		1500,	"ShotGun"},
	{31,	500,	3500,	"M4"},
	{29,	500,	2500,	"MP5"},
	{30,	500,	3000,	"AK-47"},
	{3,		1,		500,	"Nite Stick"},
	{41,	500,	500,	"Spraycan"}
};

enum hitInfo
{
	gID,
	gAmmo,
	gRank,
	gPrice,
	gName[24],
}
new HitmanAmmo[][hitInfo] = {
	{4, 	1, 		1,	1000,	"Knife"},
	{24,	50,		1,	1500,	"Deagle"},
	{23 ,	100,	1,	1200,	"Silenced 9mm"},
	{25,	30,		1,	1500,	"ShotGun"},
	{31,	300,	3,	3500,	"M4"},
	{29,	300,	2,	2500,	"MP5"},
	{30,	300,	4,	3000,	"AK-47"},
	{34,	10,		4,	5000,	"Sniper Rifle"}
};

enum wInfo {
	wID,
	wName[36 char],
}
new WeatherInfo[][wInfo] = {
	{10,	!"Солнечная погода"},
	{11,	!"Очень солнечная погода"},
	{8,		!"Гроза"},
	{9,		!"Пасмурно и туман"},
	{14,	!"Хмурая и дождливая"},
	{19,	!"Песчаная буря"},
	{20,	!"Туманный и зеленоватый"},
	{23,	!"В красках бледного Апельсина"},
	{27,	!"Свежая в синих красках"},
	{30,	!"Туманно и серо"},
	{33,	!"Темный неясный коричневый"},
	{-1337,	!"Розовое небо"}
};

enum spInfo {
	spInt,
	spVirt,
	Float:spX,
	Float:spY,
	Float:spZ,
	Float:spA,
}
new SpawnInfo[MAX_SPAWNS][spInfo];

new FracID		[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
new trailerID	[] = { 435, 611, 450, 591, 606, 607, 610, 569, 590, 584, 570, 608 };
new FightStyles	[] = { 4, 5, 6, 7, 15, 16 };
static const correctAnswer[] = {
	' ',
	'b', 'c', 'b', 'b', 'c', 'b', 'c', 'd', 'd', 'b',
	'd', 'b', 'b', 'd', 'b', 'a', 'd', 'b', 'b', 'a'
};

enum tpInfo
{
	tpVw,
	tpInt,
	tpLocal,
	Float:tpPos[4],
}
new TeleportDest[MAX_PLAYERS][tpInfo];


enum E_GATE {
	E_GATE_OBJECT,
	E_GATE_STATUS,
};
enum E_GATE_INFO {

	E_GATE_SD[E_GATE],
	E_GATE_MED[E_GATE],
	E_GATE_CNN[E_GATE],
	E_GATE_LCN[E_GATE],
	E_GATE_RM_1[E_GATE],
	E_GATE_RM_2[E_GATE],
	E_GATE_ARMY[E_GATE],
	E_GATE_TAXI[E_GATE],
	E_GATE_RIFA[E_GATE],
	E_GATE_FBI_1[E_GATE],
	E_GATE_FBI_2[E_GATE],
	E_GATE_VAGOS[E_GATE],
	E_GATE_YAKUZA[E_GATE],
	E_GATE_KOLXOZ[E_GATE],
	E_GATE_ZONA_1[E_GATE],
	E_GATE_ZONA_2[E_GATE],
	E_GATE_GROVE_1[E_GATE],
	E_GATE_GROVE_2[E_GATE],
	E_GATE_FLAMING[E_GATE],
	E_GATE_GOVDOOR[E_GATE],		// Дверь в мэрии
	E_GATE_SFMCDOOR[E_GATE],	// Дверь в sfmc
	E_GATE_BALLAS_1[E_GATE],
	E_GATE_BALLAS_2[E_GATE],
	E_GATE_HITMAN_1[E_GATE],
	E_GATE_HITMAN_2[E_GATE],
	E_GATE_LSPDDOOR[E_GATE],	// Ришетка в лспд
	E_GATE_LSPDGATE[E_GATE],	// Ворота при въезде в гараж
	E_GATE_CORONOS_1[E_GATE],
	E_GATE_CORONOS_2[E_GATE],
	E_GATE_FBIDOOR_1[E_GATE],
	E_GATE_FBIDOOR_2[E_GATE],
	E_GATE_FBIDOOR_3[E_GATE],
	E_GATE_FBIDOOR_4[E_GATE],
	E_GATE_FBIDOOR_5[E_GATE],
	E_GATE_GOVBARRIER[E_GATE],
	E_GATE_LICBARRIER[E_GATE],	// шлагбаум лиценциаров
	E_GATE_LSPDBARRIER[E_GATE], // шлагбаум лспд
};
new GateInfo[E_GATE_INFO];

new rentcar		[2];
new comptruck	[2];

new engine,light,alarm,doors,bonnet,boot,objective;
new Float:posx, Float:posy, Float:posz;
new Float:vehx, Float:vehy, Float:vehz;
new Float:angle,Float:distance;


enum Fc::Enum {
	Fc::Id[2],				// 0 - ид транспорта в Бд. 1 - ид созданного транспорта на сервере
	Fc::Model,
	Fc::FracId,
	Fc::RankId,
	Fc::Color[2],			// 0 - первый цет. 1 - второй цвет.
	Fc::Number[10],
	Float:Fc::RespPos[4],	// 0 - x. 1 - y. 2 - z. 3 - angle.
}
new Fc::Info[MAX_FC][Fc::Enum];

new Fc::FORBIDDEN_VEH[] = { 441, 449, 450, 470, 569, 577, 584, 590, 591, 592, 594, 606, 607, 608, 610, 611 };

new Gangs[] = { 12, 14, 15, 16, 17, 18, 19 };
new Teams[] = { 1, 2, 3, 4, 7 };

new ZahvatKills[MAX_FRAC char];
new ZahvatScore[MAX_FRAC];
new GangOnBattle[MAX_FRAC char];

enum pInfo {
	pID,
	pVip,
	pLevel,
	pAdmin,
	pHelper,
	pTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pMuted,
	pExp,
	pBank,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedL,
	pWantedD,
	pPhoneBook,
	pLottoNr,
	pJob,
	pPayCheck,
	pJailed,
	pJailTime,
	pMats,
	pDrugs,
	pLeader,
	pMember,
	pRank,
	pChar,
	pDonateMoney,
	pContractTime,
	pDetSkill,
	pSexSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pCarSkill,
	pNewsSkill,
	pDrugsSkill,
	pLocal,
	pNumber,
	pHouseKey,
	pBizKey,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pGunLic,
	pCarTime,
	pPayDay,
	pPayDayHad,
	pCDPlayer,
	pWarns,
	pFuel,
	pMutedTime,
	pReport,
	pBanned,
	pTest,
	pRebuke,
	pFightstyle,
	pPasport[3],
	pLastVisit,

	pContract,
	pCountry[24],
	
	pWait,
	pUpdate,
	pHunger,
	pCamPos,
	
	bool:pMaskOn,
	
};
new Pl::Info[MAX_PLAYERS][pInfo];


enum Bl::enum {
	Bl::Marker,
	
	Bl::Finder,
	Bl::Observe,
	
	bool:Bl::isKilled,

	Bl::onFrac[MAX_FRAC],
	Bl::Kills[MAX_FRAC],
}
new Bl::Info[MAX_PLAYERS][Bl::enum];


enum spec_enum
{
	pSpecID,
	pSpecVw		[2],
	pSpecInt	[2],
	pSpecState	[2],
}
new Pl::SpecInfo[MAX_PLAYERS][spec_enum];


enum syncInfo {
	sKillerID,
	sReasonID,
}
new SyncInfo[MAX_PLAYERS][syncInfo];

enum houseInfo {
    hID,
	hOwned,
	hLock,

	hOwner[24],
	hInfo [28],

	hPrice,
	hRent,
	hRentPrice,
	hSafe,
	hLevel,
	hHel,
	hArm,
	hTv,
	hInt,
	hDate,

	hVeh,
	hvCol1,
	hvCol2,

	hMats,
	hDrugs,

	hGuns[MAX_HWEAP],
	hAmmos[MAX_HWEAP],

	Float:hEnterx,
	Float:hEntery,
	Float:hEnterz,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	Float:hvX,
	Float:hvY,
	Float:hvZ,
	Float:hvA,

	hPickup,
	hMapIcon,
	hVirtual,
	hAuto,
};
new HouseInfo[505][houseInfo];

enum aInfo
{
	aRadio,
	aUpdate,

	aColor1,
	aColor2,

	aMats,
	aDrugs,
	aMaxMats,
	aMaxDrugs,

	aTuning[MAX_COMPONENT],
	aPaintJob,

	Float:aX,
	Float:aY,
	Float:aZ,
	Float:aA,
	Float:aMileage,
};
new AutoInfo[MAX_VEHICLES][aInfo];

enum bInfo
{
	bID,
	bType,
	bOwned,

	bOwner	  [24],
	bName	  [24],
	bExtortion[24],

	Float:bEnterX,
	Float:bEnterY,
	Float:bEnterZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,

	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bProducts,
	bMaxProducts,
	bPriceProd,
	bFrac,

	bVirtual,
	bPickupEnter,
	bPickupExit,
	bMapIcon,

	bZone,
	bAttack,
	bDefend,
	bOnBattle,
	bZahvatTime,
	bZahvatTimer,
	Text:bZahvatTD,

	Float:bzMinX,
	Float:bzMinY,
	Float:bzMaxX,
	Float:bzMaxY,
};
new BizzInfo[MAX_BIZNES][bInfo];

enum burgInfo
{
	ID,
	Float:bX,
	Float:bY,
	Float:bZ,
	Float:bEX,
	Float:bEY,
	Float:bEZ,
	Int,
	Type,
	
	vW,
	MapIcon,
	PickupEn,
	PickupEx,
}
new Burgers[50][burgInfo];

enum gInfo {
	fID,
	gRespect,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	Text3D:gText,
};
new GangInfo[7][gInfo];


enum fInfo {
	fBank,
 	fRConf[3],
 	fBConf[2],
	fName[36],
//	fColor,
//	fSpawn[4],
//	fInvitedSkin,
};
new FracInfo[MAX_FRAC][fInfo];
new RankInfo[MAX_FRAC][MAX_RANK][36];
new RankNums[MAX_FRAC];

#define zRANK	(0)
#define bRANK	(1)
#define gRANK	(2)
#define bKILLS	(0)
#define bPRICE	(1)


enum sInfo {
	sTaxValue,
	sPDrugs,
	sADrugs,
	sFMetal,
	sFFuel,
	sFProds,
	sRegged
};
new StuffInfo[sInfo];


enum Gm::enum {
	Gm::isStarted,
	Gm::isAutoRest,
}
new Gm::info[ Gm::enum ];


enum pHaul
{
	pCapasity,
	pLoad,
};
new PlayerHaul[NUMBER_OF_TRUCKS][pHaul];


enum pCrime_Enum {
	pVictim		[24],
	pAccused	[24],
	pAccusing	[64],
};
new Pl::Crime[MAX_PLAYERS][pCrime_Enum];


enum Tp::e_potal
{
	Tp::Id,
	
	Tp::Model[2],
	Tp::Type[2],
	Tp::Inter[2],
	Tp::World[2],
	
	Float:Tp::Portal1[4],
	Float:Tp::Portal2[4],
	
	Tp::Allowed[MAX_FRAC],
	Tp::Pickup[2],
};
new
	TOTAL_PORTAL,
	Tp::Info[MAX_PORTALS][Tp::e_potal]
;


new carsA[][2] = {
	{411,150000}, //Infernus
	{415,120000}, //Cheetah
	{429,100000}, //Banshee
	{451,100000}, //Turismo
	{480,100000}, //Comet
	{494,170000}, //Hotring
	{502,170000}, //Hotring
	{503,170000}, //Hotring
	{506,108000}, //Super GT
	{541,126000}  //Bullet
};

new carsB[][2] = {
	{579,90000}, //Huntley
	{426,88000}, //Premier
	{445,89500}, //Admiral
	{477,86500}, //ZR-350
	{495,88000}, //SandKing
	{496,88000}, //Blista Compact
	{507,85500}, //Elegant
	{555,86500}, //Windsor
	{558,87000}, //Uranus
	{559,82000}, //Jester
	{560,85000}, //Sultan
	{561,83000}, //Stratum
	{562,84550}, //Elegy
	{565,88000}, //Flash
	{587,86000}, //Euros
	{589,88000}, //Club
	{602,80000}  //Alpha
};

new carsC[][2] = {
	{400,58000}, //Landstalker
	{402,59500}, //Buffalo
	{405,55000}, //Sentinel
	{419,54000}, //Esperanto
	{421,54500}, //Washington
	{424,56700}, //BF Injection
	{436,54000}, //Previon
	{458,52000}, //Solair
	{466,59000}, //Glendale
	{492,59000}, //Greenwood
	{500,60000}, //Mesa
	{516,62000}, //Nebula
	{517,59000}, //Majestic
	{526,57800}, //Fortune
	{527,58000}, //Cadrona
	{533,63500}, //Feltzer
	{535,61500}, //Slamvan
	{536,63000}, //Blade
	{550,69000}, //Sunrise
	{551,60000}, //Merit
	{585,62000}, //Emperor
	{589,64000}, //Club
	{603,69800}  //Phoenix
};

new carsD[][2] = {
	{401,46000}, //Bravura
	{404,44000}, //Perenniel
	{418,45000}, //Moonbeam
	{422,47800}, //Bobcat
	{434,44000}, //Hotknife
	{439,41000}, //Stallion
	{467,44000}, //Oceanic
	{474,45600}, //Hermes
	{475,45500}, //Sabre
	{479,45000}, //Regina
	{489,40000}, //Rancher
	{491,47000}, //Virgo
	{518,44000}, //Buccaneer
	{529,43900}, //Willard
	{540,44500}, //Vincent
	{542,40000}, //Clover
	{543,41000}, //Sadler
	{545,49000}, //Hustler
	{549,42500}, //Tampa
	{566,45500}, //Tahoma
	{567,47000}, //Savanna
	{600,44567}  //Picador
};

new carsE[][2] = {
	{461,40010}, //pcj600
	{462,7400 }, //faggio
	{463,63100}, //freeway
	{468,29000}, //sanchez
	{521,45200}, //fcr900
	{522,67100}, //nrg500
	{581,39000}, //bf400
	{586,58000}, //wayfarer
	{510,10000}  //mountain bike
};

enum vInfo {
	vID,
	vModel,
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vColor1,
	vColor2,
	vRespTime,
	vJob,
	cID
};
new VehicleInfo[MAX_VEHICLESex][vInfo];


enum respI
{
	fId,
	Float:rMinX,
	Float:rMinY,
	Float:rMaxX,
	Float:rMaxY,
}
new RespCoord[ ][respI] = {
	{1,1523.4375,-1738.28125,1593.75,-1599.609375},
	{2,-1703.1,642.5,-1562.5,742.1},
	{3,78.125,1750.0,388.6,2128.9},
	{4,-2748.0,576.1,-2525.3,712.8},
	{5,1083.9,-2087.8,1291.0,-1988.2},
	{6,1416.0,2722.6,1529.29,2876.9},
	{7,1382.8,-1871.0,1564.4,-1732.4},
	{8,986.3,-394.5,1111.3,-300.7},
	{9,636.7,-1392.5,789.0,-1330.07},
	{10,-1785.1,927.7,-1701.1,1109.3},
	{11,-2111.3,-287.1,-1996.0,-54.6},
	{12,647.2,-479.8,723.6,-422.2},
	{13,-2820.3,-421.875,-2599.6,-199.2},
	{14,2423.8,-1734.375,2544.9,-1599.6},
	{15,1666.0,-1968.75,1833.9,-1814.4},
	{16,804.5,-1135.7,952.6,-1061.4},
	{17,-2202.3,-281.7,-2095.5,-79.9},
	{18,2732.4,-1662.109375,2908.2,-1480.4},
	{19,1009.6,2057.3,1112.4,2212.9},
	{20,-1238.9,-1393.4,-965.2,-870.6}
};

new Float:PaintballSpawns[ ][ ] = {
	{358.8001,2435.0730,17.0082},
	{331.2314,2591.4666,17.4633},
	{252.5303,2626.1033,16.4766},
	{189.1124,2448.7795,16.9182},
	{413.9773,2537.3499,19.1484},
	{393.4427,2598.8479,16.4844},
	{382.9538,2432.3525,16.4844}
};


enum camEnum
{
	musicid,
	iteriorid,
	virtworld,
	Float:p_pos[4],
	Float:c_pos[3],
	Float:c_lookAt[3],
}
new EnterPos[ ][ camEnum ] = {
	{{0000}, {0}, {99}, {-1657.5237,1207.6644,13.6719,357.6906},	{-1657.4678,1211.2292,13.6781},		{-1657.5237,1207.6644,13.6719}}
};

enum gunInfo
{
	g_id,
	g_name[15],
	g_ammo,
	g_mats,
}
new GunInfo[][gunInfo] = {
//	{ 4, "knife", 1, 100 },
	{ 21, "sdpistol", 50, 100 },
	{ 14, "flowers", 1, 25 },
	{ 24, "eagle", 50, 150 },
	{ 29, "mp5", 200, 200 },
	{ 25, "shotgun", 50, 200 },
//	{ 27, "spas12", 50, 600 },
	{ 30, "ak47", 250, 600 },
	{ 31, "m4", 250, 600 },
	{ 33, "rifle", 50, 600 }
};

enum e_SAInteriors {
	iI,
	Float:iX,
	Float:iY,
	Float:iZ,
	Float:iA,
	int_Name[40]
}
new Menu:SAInteriorsMenu;
new SAInteriors[146][e_SAInteriors] = {
	{11, 2003.1178, 1015.1948, 33.008, 351.5789, "Four Dragons' Managerial Suite"},
	{5, 770.8033, -0.7033, 1000.7267, 22.8599, "Ganton Gym"},
	{3, 974.0177, -9.5937, 1001.1484, 22.6045, "Brothel"},
	{3, 961.9308, -51.9071, 1001.1172, 95.5381, "Brothel2"},
	{3, 830.6016, 5.9404, 1004.1797, 125.8149, "Inside Track Betting"},
	{3, 1037.8276, 0.397, 1001.2845, 353.9335, "Blastin' Fools Records"},
	{3, 1212.1489, -28.5388, 1000.9531, 170.5692, "The Big Spread Ranch"},
	{18, 1290.4106, 1.9512, 1001.0201, 179.9419, "Warehouse 1"},
	{1, 1412.1472, -2.2836, 1000.9241, 114.661, "Warehouse 2"},
	{3, 1527.0468, -12.0236, 1002.0971, 350.0013, "B Dup's Apartment"},
	{2, 1523.5098, -47.8211, 1002.2699, 262.7038, "B Dup's Crack Palace"},
	{3, 612.2191, -123.9028, 997.9922, 266.5704, "Wheel Arch Angels"},
	{3, 512.9291, -11.6929, 1001.5653, 198.7669, "OG Loc's House"},
	{3, 418.4666, -80.4595, 1001.8047, 343.2358, "Barber Shop"},
	{3, 386.5259, 173.6381, 1008.3828, 63.7399, "Planning Department"},
	{3, 288.4723, 170.0647, 1007.1794, 22.0477, "Las Venturas Police Department"},
	{3, 206.4627, -137.7076, 1003.0938, 10.9347, "Pro-Laps"},
	{3, -100.2674, -22.9376, 1000.7188, 17.285, "Sex Shop"},
	{3, -201.2236, -43.2465, 1002.2734, 45.8613, "Las Venturas Tattoo parlor"},
	{17, -202.9381, -6.7006, 1002.2734, 204.2693, "Lost San Fierro Tattoo parlor"},
	{17, -25.7220, -187.8216, 1003.5469, 5.0760, "24/7 (version 1)"},
	{5, 454.9853, -107.2548, 999.4376, 309.0195, "Diner 1"},
	{5, 372.5565, -131.3607, 1001.4922, 354.2285, "Pizza Stack"},
	{17, 378.026, -190.5155, 1000.6328, 141.0245, "Rusty Brown's Donuts"},
	{7, 315.244, -140.8858, 999.6016, 7.4226, "Ammu-nation"},
	{5, 225.0306, -9.1838, 1002.218, 85.5322, "Victim"},
	{2, 611.3536, -77.5574, 997.9995, 320.9263, "Loco Low Co"},
	{10, 246.0688, 108.9703, 1003.2188, 0.2922, "San Fierro Police Department"},
	{10, 6.0856, -28.8966, 1003.5494, 5.0365, "24/7 (version 2 - large)"},
	{7, 773.7318, -74.6957, 1000.6542, 5.2304, "Below The Belt Gym (Las Venturas)"},
	{1, 621.4528, -23.7289, 1000.9219, 15.6789, "Transfenders"},
	{1, 445.6003, -6.9823, 1000.7344, 172.2105, "World of Coq"},
	{1, 285.8361, -39.0166, 1001.5156, 0.7529, "Ammu-nation (version 2)"},
	{1, 204.1174, -46.8047, 1001.8047, 357.5777, "SubUrban"},
	{1, 245.2307, 304.7632, 999.1484, 273.4364, "Denise's Bedroom"},
	{3, 290.623, 309.0622, 999.1484, 89.9164, "Helena's Barn"},
	{5, 322.5014, 303.6906, 999.1484, 8.1747, "Barbara's Love nest"},
	{1, -2041.2334, 178.3969, 28.8465, 156.2153, "San Fierro Garage"},
	{1, -1402.6613, 106.3897, 1032.2734, 105.1356, "Oval Stadium"},
	{7, -1403.0116, -250.4526, 1043.5341, 355.8576, "8-Track Stadium"},
	{2, 1204.6689, -13.5429, 1000.9219, 350.0204, "The Pig Pen (strip club 2)"},
	{10, 2016.1156, 1017.1541, 996.875, 88.0055, "Four Dragons"},
	{1, -741.8495, 493.0036, 1371.9766, 71.7782, "Liberty City"},
	{2, 2447.8704, -1704.4509, 1013.5078, 314.5253, "Ryder's house"},
	{1, 2527.0176, -1679.2076, 1015.4986, 260.9709, "Sweet's House"},
	{10, -1129.8909, 1057.5424, 1346.4141, 274.5268, "RC Battlefield"},
	{3, 2496.0549, -1695.1749, 1014.7422, 179.2174, "The Johnson House"},
	{10, 366.0248, -73.3478, 1001.5078, 292.0084, "Burger shot"},
	{1, 2233.9363, 1711.8038, 1011.6312, 184.3891, "Caligula's Casino"},
	{2, 269.6405, 305.9512, 999.1484, 215.6625, "Katie's Lovenest"},
	{2, 414.2987, -18.8044, 1001.8047, 41.4265, "Barber Shop 2 (Reece's)"},
	{2, 1.1853, -3.2387, 999.4284, 87.5718, "Angel \"Pine Trailer\""},
	{18, -30.9875, -89.6806, 1003.5469, 359.8401, "24/7 (version 3)"},
	{18, 161.4048, -94.2416, 1001.8047, 0.7938, "Zip"},
	{3, -2638.8232, 1407.3395, 906.4609, 94.6794, "The Pleasure Domes"},
	{5, 1267.8407, -776.9587, 1091.9063, 231.3418, "Madd Dogg's Mansion"},
	{2, 2536.5322, -1294.8425, 1044.125, 254.9548, "Big Smoke's Crack Palace"},
	{5, 2350.1597, -1181.0658, 1027.9766, 99.1864, "Burning Desire Building"},
	{1, -2158.6731, 642.09, 1052.375, 86.5402, "Wu-Zi Mu's"},
	{10, 419.8936, 2537.1155, 10.0, 67.6537, "Abandoned AC tower"},
	{14, 256.9047, -41.6537, 1002.0234, 85.8774, "Wardrobe/Changing room"},
	{14, 204.1658, -165.7678, 1000.5234, 181.7583, "Didier Sachs"},
	{12, 1133.35, -7.8462, 1000.6797, 165.8482, "Casino (Redsands West)"},
	{14, -1420.4277, 1616.9221, 1052.5313, 159.1255, "Kickstart Stadium"},
	{17, 493.1443, -24.2607, 1000.6797, 356.9864, "Club"},
	{18, 1727.2853, -1642.9451, 20.2254, 172.4193, "Atrium"},
	{16, -202.842, -24.0325, 1002.2734, 252.8154, "Los Santos Tattoo Parlor"},
	{5, 2233.6919, -1112.8107, 1050.8828, 8.6483, "Safe House group 1"},
	{6, 1211.2484, 1049.0234, 359.941, 170.9341, "Safe House group 2"},
	{9, 2319.1272, -1023.9562, 1050.2109, 167.3959, "Safe House group 3"},
	{10, 2261.0977, -1137.8833, 1050.6328, 266.88, "Safe House group 4"},
	{17, -944.2402, 1886.1536, 5.0051, 179.8548, "Sherman Dam"},
	{16, -26.1856, -140.9164, 1003.5469, 2.9087, "24/7 (version 4)"},
	{15, 2217.281, -1150.5349, 1025.7969, 273.7328, "Jefferson Motel"},
	{1, 1.5491, 23.3183, 1199.5938, 359.9054, "Jet Interior"},
	{1, 681.6216, -451.8933, -25.6172, 166.166, "The Welcome Pump"},
	{3, 234.6087, 1187.8195, 1080.2578, 349.4844, "Burglary House X1"},
	{2, 225.5707, 1240.0643, 1082.1406, 96.2852, "Burglary House X2"},
	{1, 224.288, 1289.1907, 1082.1406, 359.868, "Burglary House X3"},
	{5, 239.2819, 1114.1991, 1080.9922, 270.2654, "Burglary House X4"},
	{15, 207.5219, -109.7448, 1005.1328, 358.62, "Binco"},
	{15, 295.1391, 1473.3719, 1080.2578, 352.9526, "4 Burglary houses"},
	{15, -1417.8927, 932.4482, 1041.5313, 0.7013, "Blood Bowl Stadium"},
	{12, 446.3247, 509.9662, 1001.4195, 330.5671, "Budget Inn Motel Room"},
	{0, 2306.3826, -15.2365, 26.7496, 274.49, "Palamino Bank"},
	{0, 2331.8984, 6.7816, 26.5032, 100.2357, "Palamino Diner"},
	{0, 663.0588, -573.6274, 16.3359, 264.9829, "Dillimore Gas Station"},
	{18, -227.5703, 1401.5544, 27.7656, 269.2978, "Lil' Probe Inn"},
	{0, -688.1496, 942.0826, 13.6328, 177.6574, "Torreno's Ranch"},
	{0, -1916.1268, 714.8617, 46.5625, 152.2839, "Zombotech - lobby area"},
	{0, 818.7714, -1102.8689, 25.794, 91.1439, "Crypt in LS cemetery (temple)"},
	{0, 255.2083, -59.6753, 1.5703, 1.4645, "Blueberry Liquor Store"},
	{2, 446.626, 1397.738, 1084.3047, 343.9647, "Pair of Burglary Houses"},
	{5, 227.3922, 1114.6572, 1080.9985, 267.459, "Crack Den"},
	{5, 227.7559, 1114.3844, 1080.9922, 266.2624, "Burglary House X11"},
	{4, 261.1165, 1287.2197, 1080.2578, 178.9149, "Burglary House X12"},
	{4, 291.7626, -80.1306, 1001.5156, 290.2195, "Ammu-nation (version 3)"},
	{4, 449.0172, -88.9894, 999.5547, 89.6608, "Jay's Diner"},
	{4, -27.844, -26.6737, 1003.5573, 184.3118, "24/7 (version 5)"},
	{0, 2135.2004, -2276.2815, 20.6719, 318.59, "Warehouse 3"},
	{4, 306.1966, 307.819, 1003.3047, 203.1354, "Michelle's Love Nest*"},
	{10, 24.3769, 1341.1829, 1084.375, 8.3305, "Burglary House X14"},
	{1, 963.0586, 2159.7563, 1011.0303, 175.313, "Sindacco Abatoir"},
	{0, 2548.4807, 2823.7429, 10.8203, 270.6003, "K.A.C.C. Military Fuels Depot"},
	{0, 215.1515, 1874.0579, 13.1406, 177.5538, "Area 69"},
	{4, 221.6766, 1142.4962, 1082.6094, 184.9618, "Burglary House X13"},
	{12, 2323.7063, -1147.6509, 1050.7101, 206.5352, "Unused Safe House"},
	{6, 344.9984, 307.1824, 999.1557, 193.643, "Millie's Bedroom"},
	{12, 411.9707, -51.9217, 1001.8984, 173.3449, "Barber Shop"},
	{4, -1421.5618, -663.8262, 1059.5569, 170.9341, "Dirtbike Stadium"},
	{6, 773.8887, -47.7698, 1000.5859, 10.7161, "Cobra Gym"},
	{6, 246.6695, 65.8039, 1003.6406, 7.9562, "Los Santos Police Department"},
	{14, -1864.9434, 55.7325, 1055.5276, 85.8541, "Los Santos Airport"},
	{4, -262.1759, 1456.6158, 1084.3672, 82.459, "Burglary House X15"},
	{5, 22.861, 1404.9165, 1084.4297, 349.6158, "Burglary House X16"},
	{5, 140.3679, 1367.8837, 1083.8621, 349.2372, "Burglary House X17"},
	{3, 1494.8589, 1306.48, 1093.2953, 196.065, "Bike School"},
	{14, -1813.213, -58.012, 1058.9641, 335.3199, "Francis International Airport"},
	{16, -1401.067, 1265.3706, 1039.8672, 178.6483, "Vice Stadium"},
	{6, 234.2826, 1065.229, 1084.2101, 4.3864, "Burglary House X18"},
	{6, -68.5145, 1353.8485, 1080.2109, 3.5742, "Burglary House X19"},
	{6, -2240.1028, 136.973, 1035.4141, 269.0954, "Zero's RC Shop"},
	{6, 297.144, -109.8702, 1001.5156, 20.2254, "Ammu-nation (version 4)"},
	{6, 316.5025, -167.6272, 999.5938, 10.3031, "Ammu-nation (version 5)"},
	{15, -285.2511, 1471.197, 1084.375, 85.6547, "Burglary House X20"},
	{6, -26.8339, -55.5846, 1003.5469, 3.9528, "24/7 (version 6)"},
	{6, 442.1295, -52.4782, 999.7167, 177.9394, "Secret Valley Diner"},
	{2, 2182.2017, 1628.5848, 1043.8723, 224.8601, "Rosenberg's Office in Caligulas"},
	{6, 748.4623, 1438.2378, 1102.9531, 0.6069, "Fanny Batter's Whore House"},
	{8, 2807.3604, -1171.7048, 1025.5703, 193.7117, "Colonel Furhberger's"},
	{9, 366.0002, -9.4338, 1001.8516, 160.528, "Cluckin' Bell"},
	{1, 2216.1282, -1076.3052, 1050.4844, 86.428, "The Camel's Toe Safehouse"},
	{1, 2268.5156, 1647.7682, 1084.2344, 99.7331, "Caligula's Roof"},
	{2, 2236.6997, -1078.9478, 1049.0234, 2.5706, "Old Venturas Strip Casino"},
	{3, -2031.1196, -115.8287, 1035.1719, 190.1877, "Driving School"},
	{8, 2365.1089, -1133.0795, 1050.875, 177.3947, "Verdant Bluffs Safehouse"},
	{0, 1168.512, 1360.1145, 10.9293, 196.5933, "Bike School"},
	{9, 315.4544, 976.5972, 1960.8511, 359.6368, "Andromada"},
	{10, 1893.0731, 1017.8958, 31.8828, 86.1044, "Four Dragons' Janitor's Office"},
	{11, 501.9578, -70.5648, 998.7578, 171.5706, "Bar"},
	{8, -42.5267, 1408.23, 1084.4297, 172.068, "Burglary House X21"},
	{11, 2283.3118, 1139.307, 1050.8984, 19.7032, "Willowfield Safehouse"},
	{9, 84.9244, 1324.2983, 1083.8594, 159.5582, "Burglary House X22"},
	{9, 260.7421, 1238.2261, 1084.2578, 84.3084, "Burglary House X23"},
	{0, -1658.1656, 1215.0002, 7.25, 103.9074, "Otto's Autos"},
	{0, -1961.6281, 295.2378, 35.4688, 264.4891, "Wang Cars"}
};


static const MaxPassengers[27] = { // HEX смещения макс. кол-ва пассажиров на основной транспорт
	0x10331113, 0x11311131, 0x11331313, 0x80133301,
	0x1381F110, 0x10311103, 0x10001F10, 0x11113311,
	0x13113311, 0x31101100, 0x30001301, 0x11031311,
	0x11111331, 0x10013111, 0x01131100, 0x11111110,
	0x11100031, 0x11130221, 0x33113311, 0x11111101,
	0x33101133, 0x101001F0, 0x03133111, 0xFF11113F,
	0x13330111, 0xFF131111, 0x0000FF3F
};


enum e_Colors {
	e_color, e_name[16]
};
new Colors[][e_Colors] = {
	{COLOR_ALPHA,		"Скрыть цвет"},
	{COLOR_TELA,		"Tela"},
	{COLOR_FRENCH,		"French"},
	{COLOR_RED,			"Red"},
	{COLOR_WHITE,		"White"},
	{COLOR_NAVY,		"Navy"},
	{COLOR_AQUA,		"Aqua"},
	{COLOR_CRIMSON,		"Crimson"},
	{COLOR_BISQUE,		"Bisque"},
	{COLOR_CHARTREUSE,	"Chartreuse"},
	{COLOR_BROWN,		"Brown"},
	{COLOR_CORAL,		"Coral"},
	{COLOR_GREENYELLOW, "GreenYellow"},
	{COLOR_LAWNGREEN,	"Lawngreen"},
	{COLOR_LIMEGREEN,	"Limegreen"},
	{COLOR_OLIVE,		"Olive"},
	{COLOR_PINK,		"Pink"},
	{COLOR_SPRINGGREEN, "SpeengGreen"},
	{COLOR_TOMATO,		"Tomato"},
	{COLOR_SYSTEM,		"System"},
	{COLOR_PURPLE,		"Purple"}
};



enum e_AntiDm {
	e_AntiDmZoneId, e_AntiDmZone,
	e_AntiDmWorld, Float:e_AntiDmCoord[4]
};
new
	TOTAL_ANTIDM_ZONES,
	AntiDmInfo[MAX_ANTIDM_ZONES][e_AntiDm]
;


enum cInfo {
	cHitman,
	cVectim,
	cHeadValue,
}
new ContractInfo[MAX_PLAYERS][cInfo], TOTAL_CONTRACTS;


static const fightStyle[][] = {
	{5, "Бокс"},
	{6, "Кунг-фу"},
	{7, "Самбо"},
	{4, "Уличном стиле"}
};


enum e_BusRoute {
	stopID,
	Float:stopX,
	Float:stopY,
	Float:stopZ,
}
new const BusRoute[][][e_BusRoute] = {
	{
		{1, 2233.6335,-1145.045,25.7969},
		{2, -97.8188,-1147.8456,1.53520},
		{3, -1091.4415,-1333.150,129.39},
		{4, -1851.9949,-568.498,21.3089},
		{5, -2026.9414,-75.8452,35.3203}
	},{
		{5, -2026.9414,-75.8452,35.3203},
		{6, -1994.7224,314.3866,35.1719},
		{7, 2080.3950,1679.1343,10.8203},
		{8, 2637.7947,2345.4346,10.6719},
		{0, 0.0, 0.0, 0.0}
	},{
		{5, -2026.2756,-75.5938,35.3203},
		{4, -1825.0438,-621.1991,16.497},
		{3, -1066.8634,-1357.182,129.99},
		{2, -113.7366,-1150.3976,1.7633},
		{1, 2214.3008,-1139.4200,25.796}
	},{
		{8, 2622.3635,2300.7500,10.8203},
		{7, 2035.5227,1655.9678,10.8203},
		{6, -2015.0028,274.7591,32.9499},
		{5, -2038.8948,-63.9849,35.3138},
		{0, 0.0, 0.0, 0.0}
	}
};

new BusRouteCount[] = {5, 4, 5, 4};
new BusRouteStopName[][] = {
	{"-"},
	{"Отель ЛС"},
	{"ДБ"},
	{"Ферма"},
	{"Аэрапорт СФ"},
	{"Автошкола"},
	{"Автосалон СФ"},
	{"Калигула"},
	{"Отель ЛВ"}
};


enum e_DonateInfo {
	dSkinPrice,
	dCashPrice,
	dInvitePrice,
	dWarnPrice,
	dVIPPrice
};
new DonateInfo[e_DonateInfo];


main() {
	if(Gm::info[Gm::isStarted]) {
		print("\n*** "#__GamemodeName__" "#__GamemodeVersion__" by MacMailler loaded ***\n");
	}
}

#include "..\include\r_utils"
#include "..\include\anticheat"


static AntiDeAMX() {
	new a;
	#emit LOAD.S.pri a
	#emit STOR.S.pri a
}

public OnGameModeInit() {
	new time = GetTickCount();
	AntiDeAMX();
	if(sqlConnect()) {
		Db::update();
		
		Iter_Init(JobPlayers);
		Iter_Init(JobVehicles);
		Iter_Init(TeamPlayers);
		Iter_Init(TeamVehicles);
		Iter_Init(inStreamPlayers);
		Iter_Init(inStreamVehicles);
		Iter_Init(vehiclePassengers);
		
		veh::Init		( );
		
		LoadFI			( );
		LoadGI			( );
		LoadFC			( );
		LoadGas			( );
		LoadATM			( );
		LoadBizz		( );
		LoadStuff		( );
		LoadSkins		( );
		LoadRanks		( );
		LoadSpawns		( );
		LoadHouses		( );
		LoadPortals		( );
		LoadBurgers		( );
		LoadVehicles	( );
		LoadDonateInfo	( );
		LoadAntiDmZones	( );

		Td::Init		( );
		mnu::Init		( );
		obj::Init		( );
		pup::Init		( );
		t3d::Init		( );
		area::Init		( );
		
		ShowPlayerMarkers				(2);
		LimitGlobalChatRadius			(T_DIST);
		SetNameTagDrawDistance			(T_DIST);
		EnableStuntBonusForAll			(false );
		LimitPlayerMarkerRadius			(T_DIST);
		DisableInteriorEnterExits		();
		ManualVehicleEngineAndLights	();
		
		RegisterAlt("/c",		"/close");
		RegisterAlt("/s",		"/shout");
		RegisterAlt("/p",		"/pickup");
		RegisterAlt("/h",		"/hangup");
		RegisterAlt("/a",		"/admin");
		RegisterAlt("/pm",		"/w");
		RegisterAlt("/tp",		"/tplist");
		RegisterAlt("/gl",		"/givelicense");
		RegisterAlt("/sl",		"/showlicenses");
		RegisterAlt("/pas",		"/pasport");
		RegisterAlt("/vopros",	"/вопрос");
		RegisterAlt("/pogoda",	"/погода");
		
		for(new i; i < MAX_FRAC; i++) {
			GangOnBattle{i} = 255;
		}
		
		ValidText = regex_build("[а-яА-Яa-zA-Z0-9_,!\\.\\?\\-\\+\\(\\)]+");
		ValidRPName = regex_build("([A-Z]{1,1})[a-z]{2,9}+_([A-Z]{1,1})[a-z]{2,9}");
		ADBlock = regex_build("(((\\w+):\\/\\/)|(www\\.|\\,|))+(([\\w\\.\\,_-]{2,}(\\.|\\,)[\\w]{2,6})|(([\\d]{1,3}(\\b))(\\s+|)(\\.|\\,|\\s)(\\s+|)[\\d]{1,3}(\\s+|)(\\.|\\,|\\s)(\\s+|)[\\d]{1,3}(\\s+|)(\\.|\\,|\\s)(\\s+|)[\\d]{1,3}))(((\\s+|)(\\:|\\;|\\s)(\\s+|)[\\d\\s]{2,}(\\b))|\\b)(\\/[\\w\\&amp\\;\\%_\\.\\/\\-\\~\\-]*)?");
		
		new m, s;
		gettime(ghour, m, s);
		FixHour(ghour);
		ghour = shifthour;
		SetWorldTime(ghour);
		SetGameModeText(SRV_MODE);
		SetWeather(1);
		SetGravity(SRV_GRAVITY);
		SendRconCommand("mapname "#SRV_MAP"");
		SendRconCommand("hostname "#SRV_NAME"");
		SendRconCommand("weburl "#SRV_SITE"");
		#if defined SRV_CLOSED
			SendRconCommand("password "#SRV_PASS"");
		#endif
		
		#if defined _aat_included
			aat_Init(MAX_PLAYERS, false, false);
		#endif
		
		serverUpdate = SetTimer("onServerUpdate", SEC_TIMER, true);
		
		Gm::info[Gm::isStarted] = 1;
		printf("Общее время загрузки: %i (ms)", GetTickCount()-time);

	} else {
	
		SetGameModeText("ТЕХ. РАБОТЫ");
		SendRconCommand("Server is not running!");
		SendRconCommand("password "#SRV_PASS"");
		
		print("\nНе удалось загрузить мод!\n\
		Рестарт сервера произайдет через 1 минуту!\n");
		SetTimer("GameModeExitFunc", (1000 * 60), false);
		Gm::info[Gm::isStarted] = 0;
	}
	
	return Gm::info[Gm::isStarted];
}

public OnGameModeExit() {
	regex_delete_all();
	print("\n*** "#__GamemodeName__" "#__GamemodeVersion__" by MacMailler unloaded ***\n");
	return 1;
}

public: GameModeInitExitFunc(mode) {
	Gm::info[Gm::isAutoRest] = mode;
	SetGameModeText("RESTART");
	SendRconCommand("hostname Restarting...");

	SendToAll(COLOR_LIGHTRED, "*[RP]GrandWorld: Вы были кикнут сервером, причина: Рестарт сервера");
	foreach(new p : Player) {
		if(Pl::isLogged(p)) {
			DeleteAllAttachedObject(p);
			GameTextForPlayer(p, "~b~] ~w~PECTAPT CEPBEPA ~b~]", 4000, 5);
			SetPlayerCameraPos(p, 1460.0, -1324.0, 287.2);
			SetPlayerCameraLookAt(p, 1374.5, -1291.1, 239.0);
			
			updatePlayerData(p);
			PlayerLogged{p} = false;
			SetPlayerColor(p, COLOR_GRAD2);
			if(mode) Kick(p);
		}
	}
	KillTimer(serverUpdate);

	switch(mode) {
		case 1: {
			Bl::Clear();
			Checkprop();
			UpdateProp();
			SetTimer("GameModeExitFunc", 1000*60, 0);
		}
		default: {
			UpdateProp();
			SetTimer("GameModeExitFunc", 10000, 0);
		}
	}

	return 1;
}

public: GameModeExitFunc() {
	if(Gm::info[Gm::isStarted]) {
		DestroyAllDynamicCPs			( );
		DestroyAllDynamicAreas			( );
		DestroyAllDynamicRaceCPs		( );
		DestroyAllDynamicObjects		( );
		DestroyAllDynamicPickups		( );
		DestroyAllDynamicMapIcons		( );
		DestroyAllDynamic3DTextLabels	( );
		if(Gm::info[Gm::isAutoRest]) {
			return SendRconCommand("exit");
		}
	}
	SendRconCommand("gmx");
	return 1 ;
}

public: onZahvatBizz(bizid, attack, defend) {
	if(BizzInfo[bizid][bZahvatTime] != 0) {
		BizzInfo[bizid][bZahvatTime]--;
		foreach(new p : TeamPlayers[attack]) {
			format(temp, sizeof temp, "~r~%i", BizzInfo[bizid][bZahvatTime]);
			Td::SetString(BizzInfo[bizid][bZahvatTD], temp), Td::ShowForPlayer(p, BizzInfo[bizid][bZahvatTD]);
		}
		foreach(new p : TeamPlayers[defend]) {
			format(temp, sizeof temp, "~r~%i", BizzInfo[bizid][bZahvatTime]);
			Td::SetString(BizzInfo[bizid][bZahvatTD], temp), Td::ShowForPlayer(p, BizzInfo[bizid][bZahvatTD]);
		}
	} else {
		new attackped, defendped;

		foreach(new p : TeamPlayers[defend]) {
			if((1 <= GetPlayerState(p) <= 3) && IsPlayerInSquare2D(p, MAX_ZONE_SIZE, BizzInfo[bizid][bEnterX], BizzInfo[bizid][bEnterY], 0)) {
				defendped++;
			}
		}
		foreach(new p : TeamPlayers[attack]) {
			if((1 <= GetPlayerState(p) <= 3) && IsPlayerInSquare2D(p, MAX_ZONE_SIZE, BizzInfo[bizid][bEnterX], BizzInfo[bizid][bEnterY], 0)) {
				attackped++;
			}
		}
		
		if((attackped == 0 && defendped > 0) && (!ZahvatKills{attack} && !ZahvatKills{defend})) {
			//ZahvatScore[defend] += defendped;
			if(ZahvatScore[defend] < 1) {
				ZahvatScore[defend] ++;
				GiveGangRespect(defend, ZahvatScore[defend]);
			}
			BizzInfo[bizid][bFrac] = defend;
			Gz::StopFlashForAll(BizzInfo[bizid][bZone]);
			Gz::HideForAll(BizzInfo[bizid][bZone]);
			Gz::ShowForAll(BizzInfo[bizid][bZone], GetFracColor(BizzInfo[bizid][bFrac]));
			format(temp, sizeof(temp), "~r~%s~g~~n~RESPECT~r~+%d", GetGangName(defend), ZahvatScore[defend]);
			GameTextForAllGang(temp, 6000, 1);
			format(temp, sizeof(temp), "[GANG NEWS] %s[%d] удержала территорию бизнеса %s, без боя, %s[%d] повержены!",
			GetGangName(defend), ZahvatScore[defend], BizzInfo[bizid][bName], GetGangName(attack), ZahvatScore[attack]);
			sendToTeam(GetFracColor(defend), temp, Gangs);
		
		} else if((defendped == 0 && attackped > 0) && (!ZahvatKills{attack} && !ZahvatKills{defend})) {
			//ZahvatScore[attack] += attackped;
			if(ZahvatScore[attack] < 1) {
				ZahvatScore[attack] ++;
				GiveGangRespect(attack, ZahvatScore[attack]);
			}
			GangBiznes{attack} ++;
			GangBiznes{defend} --;
			BizzInfo[bizid][bFrac] = attack;
			Gz::StopFlashForAll(BizzInfo[bizid][bZone]);
			Gz::HideForAll(BizzInfo[bizid][bZone]);
			Gz::ShowForAll(BizzInfo[bizid][bZone], GetFracColor(BizzInfo[bizid][bFrac]));
			format(temp, sizeof(temp), "~r~%s~g~~n~RESPECT~r~+%d", GetGangName(attack), ZahvatScore[attack]);
			GameTextForAllGang(temp, 6000, 1);
			format(temp, sizeof(temp), "[GANG NEWS] %s[%d] взяли территорию бизнеса %s, без боя, %s[%d] повержены!",
			GetGangName(attack), ZahvatScore[attack], BizzInfo[bizid][bName], GetGangName(defend), ZahvatScore[defend]);
			sendToTeam(GetFracColor(attack), temp, Gangs);
			
		} else if(!ZahvatKills{attack} && !ZahvatKills{defend}) {
			if(ZahvatScore[defend] < 1) {
				ZahvatScore[defend] ++;
				GiveGangRespect(defend, ZahvatScore[defend]);
			}
			BizzInfo[bizid][bFrac] = defend;
			Gz::StopFlashForAll(BizzInfo[bizid][bZone]);
			Gz::HideForAll(BizzInfo[bizid][bZone]);
			Gz::ShowForAll(BizzInfo[bizid][bZone], GetFracColor(BizzInfo[bizid][bFrac]));
			GiveGangRespect(defend, ZahvatScore[defend]);
			format(temp, sizeof(temp), "~r~%s~g~~n~RESPECT~r~+%d", GetGangName(defend), ZahvatScore[defend]);
			GameTextForAllGang(temp, 6000, 1);
			format(temp, sizeof(temp), "[GANG NEWS] %s[%d] удержала территорию бизнеса %s, без боя, %s[%d] повержены!",
			GetGangName(defend), ZahvatScore[defend], BizzInfo[bizid][bName], GetGangName(attack), ZahvatScore[attack]);
			sendToTeam(GetFracColor(defend), temp, Gangs);
		
		} else {
			new totalscore = (ZahvatScore[attack]-ZahvatScore[defend]);
			if(totalscore == 0) {
				if(ZahvatKills{attack} < ZahvatKills{defend}) {
					BizzInfo[bizid][bFrac] = defend;
					Gz::StopFlashForAll(BizzInfo[bizid][bZone]);
					Gz::HideForAll(BizzInfo[bizid][bZone]);
					Gz::ShowForAll(BizzInfo[bizid][bZone], GetFracColor(BizzInfo[bizid][bFrac]));
					GiveGangRespect(defend, ZahvatScore[defend]);
					format(temp, sizeof(temp), "~r~%s~g~~n~RESPECT~r~+%d", GetGangName(defend), ZahvatScore[defend]);
					GameTextForAllGang(temp, 6000, 1);
					format(temp, sizeof(temp), "[GANG NEWS] %s[%d] удержала территорию своего бизнеса %s, %s[%d] повержены!",
					GetGangName(defend), ZahvatScore[defend], BizzInfo[bizid][bName], GetGangName(attack), ZahvatScore[attack]);
					sendToTeam(GetFracColor(defend), temp, Gangs);
				
				} else if(ZahvatKills{attack} > ZahvatKills{defend}) {
					GangBiznes{attack} ++;
					GangBiznes{defend} --;
					BizzInfo[bizid][bFrac] = attack;
					Gz::StopFlashForAll(BizzInfo[bizid][bZone]);
					Gz::HideForAll(BizzInfo[bizid][bZone]);
					Gz::ShowForAll(BizzInfo[bizid][bZone], GetFracColor(BizzInfo[bizid][bFrac]));
					format(temp, sizeof(temp), "~r~%s~g~~n~RESPECT~r~+%d", GetGangName(attack), ZahvatScore[attack]);
					GameTextForAllGang(temp, 6000, 1);
					format(temp, sizeof(temp), "[GANG NEWS] %s[%d] захватили территорию бизнеса %s, %s[%d] повержены!",
					GetGangName(attack), ZahvatScore[attack], BizzInfo[bizid][bName], GetGangName(defend), ZahvatScore[defend]);
					sendToTeam(GetFracColor(attack), temp, Gangs);
				
				} else {
					BizzInfo[bizid][bFrac] = defend;
					if(ZahvatScore[defend] < 1) {
						ZahvatScore[defend] ++;
						GiveGangRespect(defend, ZahvatScore[defend]);
					}
					Gz::StopFlashForAll(BizzInfo[bizid][bZone]);
					Gz::HideForAll(BizzInfo[bizid][bZone]);
					Gz::ShowForAll(BizzInfo[bizid][bZone], GetFracColor(BizzInfo[bizid][bFrac]));
					format(temp, sizeof(temp), "~r~%s~g~~n~RESPECT~r~+%d", GetGangName(defend), ZahvatScore[defend]);
					GameTextForAllGang(temp, 6000, 1);
					format(temp, sizeof(temp), "[GANG NEWS] %s[%d] удержала территорию своего бизнеса %s, %s[%d] повержены!",
					GetGangName(defend), ZahvatScore[defend], BizzInfo[bizid][bName], GetGangName(attack), ZahvatScore[attack]);
					sendToTeam(GetFracColor(defend), temp, Gangs);
				}
				
			} else if(totalscore < 0) {
				BizzInfo[bizid][bFrac] = defend;
				if(ZahvatScore[defend] < 1) {
					ZahvatScore[defend] ++;
					GiveGangRespect(defend, ZahvatScore[defend]);
				}
				Gz::StopFlashForAll(BizzInfo[bizid][bZone]);
				Gz::HideForAll(BizzInfo[bizid][bZone]);
				Gz::ShowForAll(BizzInfo[bizid][bZone], GetFracColor(BizzInfo[bizid][bFrac]));
				format(temp, sizeof(temp), "~r~%s~g~~n~RESPECT~r~+%d", GetGangName(defend), ZahvatScore[defend]);
				GameTextForAllGang(temp, 6000, 1);
				format(temp, sizeof(temp), "[GANG NEWS] %s[%d] удержала территорию своего бизнеса %s, %s[%d] повержены!",
				GetGangName(defend), ZahvatScore[defend], BizzInfo[bizid][bName], GetGangName(attack), ZahvatScore[attack]);
				sendToTeam(GetFracColor(defend), temp, Gangs);
			
			} else if(totalscore > 0) {
				GangBiznes{attack} ++;
				GangBiznes{defend} --;
				BizzInfo[bizid][bFrac] = attack;
				if(ZahvatScore[attack] < 1) {
					ZahvatScore[attack] ++;
					GiveGangRespect(attack, ZahvatScore[attack]);
				}
				Gz::StopFlashForAll(BizzInfo[bizid][bZone]);
				Gz::HideForAll(BizzInfo[bizid][bZone]);
				Gz::ShowForAll(BizzInfo[bizid][bZone], GetFracColor(BizzInfo[bizid][bFrac]));
				format(temp, sizeof(temp), "~r~%s~g~~n~RESPECT~r~+%d", GetGangName(attack), ZahvatScore[attack]);
				GameTextForAllGang(temp, 6000, 1);
				format(temp, sizeof(temp), "[GANG NEWS] %s[%d] захватили территорию бизнеса %s, %s[%d] повержены!",
				GetGangName(attack), ZahvatScore[attack], BizzInfo[bizid][bName], GetGangName(defend), ZahvatScore[defend]);
				sendToTeam(GetFracColor(attack), temp, Gangs);
			}
		}
		ZahvatKills{attack} = ZahvatKills{defend} = 0;
		ZahvatScore[defend] = ZahvatScore[defend] = 0;
		GangOnBattle{attack} = GangOnBattle{defend} = 255;
		BizzInfo[bizid][bAttack] = BizzInfo[bizid][bDefend] = 0;
		BizzInfo[bizid][bOnBattle] = 0;
		DisableZahvatMapIcon(attack, defend);
		Td::HideForAll(BizzInfo[bizid][bZahvatTD]);
		Td::Destroy(BizzInfo[bizid][bZahvatTD]);
		KillTimer(BizzInfo[bizid][bZahvatTimer]);
		UpdateBizz(bizid);
		UpdateGI();
	}
}


stock IsInRespawn(fracid, vehid) {
	for(new i; i < sizeof RespCoord; i++) {
		if(VehicleToKvadrat(vehid, RespCoord[i][rMinX], RespCoord[i][rMinY], RespCoord[i][rMaxX], RespCoord[i][rMaxY]) && fracid == RespCoord[i][fId]) return 1;
	}
	return 0;
}

stock UnJail(playerid, type)
{
	Pl::Info[playerid][pJailed] = 0;
    Pl::Info[playerid][pJailTime] = 0;
	SetPlayerSkin(playerid, TempSkin[playerid]);
	switch(type) {
		case 1: {
			Rac::SetPlayerInterior(playerid, 6);
			Rac::SetPlayerVirtualWorld(playerid, 1);
			SetPlayerFacingAngle(playerid,180.4);
			Rac::SetPlayerPos(playerid,246.5,67.5,1003.6);
			Send(playerid,COLOR_LIGHTRED,"Вы были выпушены из тюрьмы!");
		}
		case 2: {
			SetPlayerWorldBounds(playerid, 20000.0000,-20000.0000,20000.0000,-20000.0000);
			Rac::SetPlayerVirtualWorld(playerid, 0);
			Rac::SetPlayerInterior(playerid, 0);
			Rac::SetPlayerPos(playerid, 1552.9265,-1675.9987,16.1953);
		}
		default:
		{
			Rac::SetPlayerInterior(playerid, 6);
			Rac::SetPlayerVirtualWorld(playerid, 1);
			SetPlayerFacingAngle(playerid,180.4);
			Rac::SetPlayerPos(playerid,246.5,67.5,1003.6);
			Send(playerid,COLOR_LIGHTRED,"Вы были выпушены из тюрьмы!");
		}
	}
	Pl::setSpawnInfo(playerid);
	return 1;
}

stock CrimInRange(Float:radi, playerid, copid) {
    if(Pl::isLogged(playerid) && Pl::isLogged(copid)) {
		GetPlayerPos(copid, posx, posy, posz);
		return (radi >= GetPlayerDistanceFromPoint(playerid, posx, posy, posz));
	}
	return 0;
}

stock IsPlayerInRangeOfPlayer(playerid, Float:radi, targetid) {
	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid, x, y, z);
	return IsPlayerInRangeOfPoint(playerid, radi, x, y, z);
}

stock IsPlayerInRangeOfObject(playerid, Float:radi, objectid, bool:dynamic=false) {
	new Float:x, Float:y, Float:z;
	if(dynamic) {
		GetDynamicObjectPos(objectid, x, y, z);
	} else {
		GetObjectPos(objectid, x, y, z);
	}
	return IsPlayerInRangeOfPoint(playerid, radi, x, y, z);
}

stock ProxDetector(Float:radi, playerid, const message[], col1=COLOR_FADE1, col2=COLOR_FADE2, col3=COLOR_FADE3, col4=COLOR_FADE4, col5=COLOR_FADE5) {
	new Float:x, Float:y, Float:z, Float:dist;
	new playerint = GetPlayerInterior(playerid);
	new playervirt = GetPlayerVirtualWorld(playerid);
    GetPlayerPos(playerid, x, y, z);
	Send(playerid, col1, message);
	
    foreach(new i : inStreamPlayers[playerid]) {
		dist = GetPlayerDistanceFromPoint(i, x, y, z);
		if(!BigEar[i]) {
			if(radi >= dist) {
				if(GetPlayerInterior(i) == playerint && GetPlayerVirtualWorld(i) == playervirt) {
					if(dist < (radi/16)) Send(i, col1, message);
					else if(dist < (radi/8)) Send(i, col2, message);
					else if(dist < (radi/6)) Send(i, col3, message);
					else if(dist < (radi/4)) Send(i, col4, message);
					else if(dist < (radi/2)) Send(i, col5, message);
				}
			}
		} else {
			Send(i, col1, message);
		}
    }
}

stock SendToAdmin(color, string[], lvl = 1, logid = 0) {
	foreach(new i : AdminPlayers) {
		if(Pl::isAdmin(i, lvl)) {
			Send(i, color, string);
		}
	}
	switch(logid) {
		case 0: SendLog(	"adminchat",	string	);
		case 1: SendLog(	"anticheat",	string	);
		case 2: SendLog(	"report",		string	);
		case 3: SendLog(	"admwarn",		string	);
		case 4: SendLog(	"debug",		string	);
		case 5: SendLog(	"sqlerror",		string	);
	}
	return 1;
}

stock SendToHelper(color, string[], lvl = 1) {
	foreach(new i : HelperPlayers) if(IsPHelper(i, lvl) && IsAHelperDuty(i)) Send(i, color, string);
	SendLog(	"helperchat",	string	);
}

stock SendToLeader(color, string[]) {
	foreach(new i : LeaderPlayers) Send(i, color, string);
	SendLog(	"leaderchat",	string	);
}

stock EmptyMessage(playerid, rows) {
	while(rows--) {
		SendClientMessage(playerid, -1, " ");
	}
	return ;
}

stock EmptyMessageToAll(rows) {
	while(rows--) {
		SendToAll(COLOR_WHITE, " ");
	}
}

stock OOCOff(color, const string[]) {
	foreach(new i: Player) {
		if(Pl::isLogged(i)) {
			if(gOoc[i]) {
				Send(i, color, string);
			}
		}
	}
}

stock OOCNews(color, const string[]) {
	foreach(new i: Player) {
		if(Pl::isLogged(i)) {
			if(gNews[i]) {
				Send(i, color, string);
			}
		}
	}
	return ;
}

stock sendToTeam(color, const message[], forteam[] = { -1 }, size = sizeof forteam) {
	if(forteam[0] != -1) {
		for(new j; j < size; j++) {
			foreach(new i: TeamPlayers[forteam[j]]) {
				Send(i, color, message);
			}
		}
	} else {
		for(new j; j < MAX_FRAC; j++) {
			foreach(new i: TeamPlayers[j]) {
				Send(i, color, message);
			}
		}
	}
}

stock sendToFamily(family, color, const string[]) {
	foreach(new i: TeamPlayers[family]) {
		if(gFam[i]) {
			Send(i, color, string);
		}
	}
}

stock sendToFrac(fracid, color, const string[]) {
	foreach(new playerid: TeamPlayers[fracid]) {
		Send(playerid, color, string);
	}
}

stock SendPaintballMessage(color, string[])
{
	foreach(new i: PaintballPlayers) {
		if(Pl::Paintballing[i] != 0) {
			Send(i, color, string);
		}
	}
	return ;
}

stock sendToLog(color, const string[]) {
	foreach(new i: ToglogPlayers) {
		Send(i, color, string);
	}
	return 1;
}

stock SendJobMessage(job, color, const string[]) {
	foreach(new i: JobPlayers[job]) {
		Send(i, color, string);
	}
	return 1;
}

stock SendZahvatMessage(attack, defend, color, const string[]) {
	foreach(new i: TeamPlayers[attack]) Send(i, color, string);
	foreach(new i: TeamPlayers[defend]) Send(i, color, string);
}

stock PlayerPlayMusic(playerid) {
	if(IsPlayerConnected(playerid)) {
		Fixr{playerid} = 5;
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

stock PlayerFixRadio(playerid) {
    if(IsPlayerConnected(playerid)) {
		Fixr{playerid} = 1;
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
	return;
}

public: PreparePaintball() {
    SendPaintballMessage(COLOR_YELLOW, "Пейнтбол начнётся через 20 секунд.");
 	SetTimer("StartPaintball", 20000, 0);
	return 1;
}

public: StartPaintball()
{
	PaintballRound = 1;
	PaintballWinner = INVALID_PLAYER_ID;
	PaintballWinnerKills = 0;
	StartingPaintballRound = 0;
	
	foreach(new i: PaintballPlayers) {
	    if(Pl::isLogged(i))  {
	        if(Pl::Paintballing[i] != 0) {
	            Rac::ResetPlayerWeapons(i);
	            Rac::GivePlayerWeapon(i, 29, 999);
	            Rac::TogglePlayerControllable(i, 1);
				
	            Send(i, COLOR_YELLOW, "Пейнтбол закончится через 240 секунд.");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	        }
	    }
	}
	SetTimer("PaintballEnded", 240000, 0);
	return 1;
}

public: PaintballEnded()
{
	if(Pl::isLogged(PaintballWinner)) {
		PaintballWinner = 0xFFFF;
		GetPlayerName(PaintballWinner, plname, 24);
		format(src, sizeof(src), "** %s выйграл Пейнтбол с %i убийствами **", plname, PaintballWinnerKills);
		SendPaintballMessage(COLOR_WHITE, src);
	}
	
    foreach(new i: PaintballPlayers) {
		if(Pl::Paintballing[i] != 0) {
			Pl::Paintballing[i] = 0;
			Rac::SpawnPlayer(i);
		}
	}
	
	Iter_Clear(PaintballPlayers);
    PaintballRound = 0;
	
	return 1;
}

stock playerSpectateUpdate(i) {
	static targetid, Float:sphealth;
	
	targetid = Pl::SpecInfo[i][pSpecID];
	if(targetid != INVALID_PLAYER_ID) {
		if(Pl::isLogged(targetid)) {
			Pl::SpecInfo[targetid][pSpecVw]		[0] = GetPlayerVirtualWorld(targetid);
			Pl::SpecInfo[targetid][pSpecInt]	[0] = GetPlayerInterior(targetid);
			Pl::SpecInfo[targetid][pSpecState]	[0] = GetPlayerState(targetid);
			GetPlayerName(targetid, plname, 24);
			
			if(Pl::isAdmin(i, 1)) {
				GetPlayerHealth(targetid, sphealth);
				format(specstr, sizeof(specstr), "~g~%s (ID:%i) ~r~HP:%.1f~n~~w~$:%d ~r~DRUGS:%i WARNS:%i",
				plname, targetid, sphealth, Rac::GetPlayerMoney(targetid), Pl::Info[targetid][pDrugs], Pl::Info[targetid][pWarns]);
				Pt::SetString(i, Td::Spec[i], specstr);
			} else {
				format(specstr, sizeof(specstr), "~y~%s[%i]", plname, targetid);
				Pt::SetString(i, Td::Spec[i], specstr);
			}
			
			if(Pl::SpecInfo[targetid][pSpecState][0] != Pl::SpecInfo[targetid][pSpecState][1]) {
				Pl::SpecInfo[targetid][pSpecState][1] = Pl::SpecInfo[targetid][pSpecState][0];
				switch(Pl::SpecInfo[targetid][pSpecState][0]) {
					case 2, 3 : {
						PlayerSpectateVehicle(i, GetPlayerVehicleID(targetid), SPECTATE_MODE_NORMAL);
					}
					default : {
						PlayerSpectatePlayer(i, targetid, SPECTATE_MODE_NORMAL);
					}
				}
			}
			
			if(Pl::SpecInfo[targetid][pSpecInt][0] != Pl::SpecInfo[targetid][pSpecInt][1]) {
				Pl::SpecInfo[targetid][pSpecInt][1] = Pl::SpecInfo[targetid][pSpecInt][0];
				Rac::SetPlayerInterior(i, Pl::SpecInfo[targetid][pSpecInt][0]);
			}
			
			if(Pl::SpecInfo[targetid][pSpecVw][0] != Pl::SpecInfo[targetid][pSpecVw][1]) {
				Pl::SpecInfo[targetid][pSpecVw][1] = Pl::SpecInfo[targetid][pSpecVw][0];
				Rac::SetPlayerVirtualWorld(i, Pl::SpecInfo[targetid][pSpecVw][0]);
			}
		} else {
			MedicBill[i] = false;
			WatchingTV[i] = false;
			Pt::Hide(i, Td::Spec[i]);
			Pl::SpecInfo[i][pSpecID] = INVALID_PLAYER_ID;
			Rac::TogglePlayerControllable(i, 1);
			Rac::TogglePlayerSpectating(i, false);
			GameTextForPlayer(i, "~w~                TV~n~~r~                Off", 5000, 6);
			PlayerPlaySound(i, 1145, 0.0, 0.0, 0.0);
			Pl::setSpawnInfo(i);
			Rac::SpawnPlayer(i);
		}
	}
	
	targetid = Bl::Info[i][Bl::Observe];
	if(targetid != INVALID_PLAYER_ID) {
		if(IsPlayerStreamedIn(targetid, i)) {
			switch(GetPlayerState(targetid)) {
				case PLAYER_STATE_ONFOOT : {
					GetPlayerPos(targetid, posx, posy, posz);
					Streamer_SetFloatData(STREAMER_TYPE_CP, Bl::Info[i][Bl::Marker], E_STREAMER_X, posx);
					Streamer_SetFloatData(STREAMER_TYPE_CP, Bl::Info[i][Bl::Marker], E_STREAMER_Y, posy);
					Streamer_SetFloatData(STREAMER_TYPE_CP, Bl::Info[i][Bl::Marker], E_STREAMER_Z, posz);
				}
			}
		} else {
			Bl::Info[i][Bl::Observe] = INVALID_PLAYER_ID;
			if(Bl::Info[targetid][Bl::Finder] == i) {
				Bl::Info[targetid][Bl::Finder] = INVALID_PLAYER_ID;
			}
			switch(GetPlayerState(targetid)) {
				case PLAYER_STATE_ONFOOT : {
					DestroyDynamicCP(Bl::Info[i][Bl::Marker]);
				}
				
				case PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER : {
					new vehid = GetPlayerVehicleID(targetid);
					GetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, objective);
					if(objective > 0) {
						new count;
						foreach(new passenger: vehiclePassengers[vehid]) {
							if(Bl::Info[passenger][Bl::Finder] != INVALID_PLAYER_ID) {
								count ++;
							}
						}
						if(!count) {
							SetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, false);
						}
					}
				}
			}
		}
	}
	
	return 1;
}

stock IsAtBar(playerid) {
    if(Pl::isLogged(playerid)) {
		for(new i; i < sizeof(BarCoord); i ++) {
			if(IsPlayerInRangeOfPoint(playerid, BarCoord[i][0], BarCoord[i][1], BarCoord[i][2], BarCoord[i][3])) return true;
		}
  	}
	return false;
}

stock Pl::isAdmin(playerid, lvl) {
	if(Rac::isValidPlayer(playerid)) {
		if(Pl::Info[playerid][pAdmin] >= lvl) {
			if(AdminDuty[playerid] || Pl::Info[playerid][pAdmin] == DEV_ADMIN) {
				return 1;
			}
		}
	}
	return 0;
}


public OnPlayerConnect(playerid) {
	static currtime, ip[16];
	static playerIp[MAX_PLAYERS][16];
	
	currtime = gettime();
	GetPlayerIp(playerid, ip, 16);
	if(slotused{playerid} && strcmp(playerIp[playerid], ip, false) == 0) {
		//printf("%i:%s - %s", playerid, playerIp[playerid], ip);
		return Rac::Ban(playerid, "Флуд коннектами");
	}
	if(currtime-timeleft[playerid] < 10) {
		if(strcmp(playerIp[playerid], ip, false) == 0) {
			Send(playerid, COLOR_LIGHTRED, "* Реконнект возможен через 10 сек. после отключения от сервера!");
			return Kick(playerid);
		}
	}
	slotused{playerid} = true;
	strmid(playerIp[playerid], ip, 0, strlen(ip), 16);
	
	GetPlayerName(playerid, plname, 24);
	Pl::Info[playerid][pID] = GetIDFormName(plname);
	GetPlayerVersion(playerid, temp, sizeof temp);
    if(strcmp(temp, "0.3x-R1-2", false)) {
        Send(playerid, 0xFF0000FF, "* Вы используете недействительную версию SA-MP.");
        Send(playerid, 0xFF0000FF, "* Пожалуйста, скачайте последнюю версию и установите ее.");
	//	Kick(playerid);
	}
	if(Db::handle == -1) {
		ShowDialog(playerid, D_NONE, 0, "[RP]GrandWorld: ERROR", "list/bd_no_connect.lst", "OK", "");
		Kick(playerid);
	
	} else if(Gm::info[Gm::isAutoRest] || !Gm::info[Gm::isStarted]) {
		ShowDialog(playerid, D_NONE, 0, "RESTART", "list/srv_restart.lst", "OK","");
		Kick(playerid);
	
	} else if(!regex_match_exid(plname, ValidRPName) && Pl::Info[playerid][pID] == -1) {	
		Send(playerid, COLOR_LIGHTRED, "Ваш ник не соответствует правилам нашего сервера");
		Send(playerid, COLOR_LIGHTBLUE, "Измените свой ник по типу: Имя_Фамилия. Например: Ivan_Petrov");
		Kick(playerid);
	
	} else if(!CheckBan(playerid)) {
		Pl::Init(playerid);
		Bl::Init(playerid);
		Pt::Init(playerid);
		ClearCrime(playerid);
		Pl::RemoveWorldModel(playerid);
		
		ForceClassSelection(playerid);
		Rac::TogglePlayerSpectating(playerid, true);
		Rac::TogglePlayerSpectating(playerid, false);
	
		SPD(playerid, D_WAIT, 0, "Добро пожаловать на ..::[RP]GrandWorld::..!", "Дождитесь полной загрузки игры и нажмите ENTER!\n\
		Правила сервера - www.rp-grandworld.ru/rules", "OK", "");
	} else {
		Kick(playerid);
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason) {
	slotused{playerid} = false;
	timeleft[playerid] = gettime();
	if(!Pl::isLogged(playerid)) return 1;	
	
	foreach(new i: Player) {
		if(Pl::isLogged(i)) {
			if(TaxiAccepted[i] != INVALID_PLAYER_ID) {
				if(TaxiAccepted[i] == playerid) {
					TaxiAccepted[i] = INVALID_PLAYER_ID;
					TaxiCallTime[i] = 0;
					DestroyDynamicCP(checkpoints[i]);
					GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Left the game", 5000, 1);
				}
			} else if(BusAccepted[i] != INVALID_PLAYER_ID) {
				if(BusAccepted[i] == playerid) {
					BusAccepted[i] = INVALID_PLAYER_ID;
					BusCallTime[i] = 0;
					DestroyDynamicCP(checkpoints[i]);
					GameTextForPlayer(i, "~w~Bus Caller~n~~r~Left the game", 5000, 1);
				}
			}
		}
	}
	
	if(TOTAL_CONTRACTS > 0) {
		for(new i; i < TOTAL_CONTRACTS; i++) {
			if(ContractInfo[i][cVectim] == playerid) {
				Send(ContractInfo[i][cHitman], COLOR_YELLOW, "* Ваша жертва покинула сервер!");
				removeContract(i);
			}
		}
	}
	
	switch(TransportDuty[playerid]) {
		case 1 : TaxiDrivers--;
		case 2 : BusDrivers--;
	}

	if(Pl::Info[playerid][pJob] == 6 && OnDuty[playerid]) {
		Mechanics --;
	}
	
	AFKInfo[playerid][afk_State] = 0;
	AFKInfo[playerid][afk_Time][0] = 0; 
	Delete3DTextLabel(AFKInfo[playerid][afk_Text]);
	
	Pl::Info[playerid][pMuted] = 0;
	Pl::Info[playerid][pMutedTime] = 0;
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] != INVALID_PLAYER_ID) {
		new driver = TransportDriver[playerid];
	    if(Pl::isLogged(driver)) {
		    TransportMoney[driver] += TransportCost[playerid];
		    TransportTime[driver] = 0;
		    TransportCost[driver] = 0;
		    format(temp, sizeof(temp), "~w~Passenger left~n~~g~Earned $%d", TransportCost[playerid]);
		    GameTextForPlayer(driver, temp, 5000, 1);
		}
	}
		
	if(HireCar[playerid] != INVALID_VEHICLE_ID) {
		ToggleVehicleDoor(HireCar[playerid], true);
	}
	
	if(gLastCar[playerid] != INVALID_VEHICLE_ID) {
		Iter_Remove(vehiclePassengers[gLastCar[playerid]], playerid);
		if(Bl::Info[playerid][Bl::Finder] != INVALID_PLAYER_ID) {
			GetVehicleParamsEx(gLastCar[playerid], engine, light, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(gLastCar[playerid], engine, light, alarm, doors, bonnet, boot, false);
		}
	}
	
	if(Pl::Info[playerid][pContract] != -1) {
		removeContract(playerid);
	}
	
	AshQueue(playerid, 1);
	Del_Of_Iterator(playerid);
	
	updatePlayerData(playerid);
	DeleteAllAttachedObject(playerid);
	PlayerLogged{playerid} = false;
	
	DestroyDynamicCP(checkpoints[playerid]);
	DestroyDynamicCP(Bl::Info[playerid][Bl::Marker]);
	DestroyDynamicRaceCP(checkpointb[playerid]);
	DestroyDynamicPickup(pickupd[playerid][0]);
	DestroyDynamicMapIcon(pickupd[playerid][1]);
	
	static rsn[][] = { "Обрыв связи", "Вышел", "Кикнут", "unknown"};
	format(temp, sizeof temp, "* %s (ID: %i) сбежал(а) с ..::[RP]GrandWorld::.. [RUS]. (%s)", GetName(playerid), playerid, (0<=reason<=2)?(rsn[reason]):(rsn[3]));
	sendToLog(COLOR_GREY, temp);
	
	return 1;
}

public OnVehicleSpawn(vehicleid) {
	Rac::RepairVehicle(vehicleid);
	if(!Benzin{vehicleid}) {
		Benzin{vehicleid}=10;
	}
	if(isEngined{vehicleid}) {
		ToggleVehicleEngine(vehicleid, 0);
	}
	AddTuning(vehicleid);
	GetVehiclePos(vehicleid, AutoInfo[vehicleid][aX], AutoInfo[vehicleid][aY], AutoInfo[vehicleid][aZ]);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid) {
	new Float:x, Float:y, Float:z;
	GetVehicleRotation(vehicleid, x, y, z);
	if((y < 90 && y > -90) && gLastCar[killerid] != vehicleid && killerid != INVALID_PLAYER_ID) {
		Rac::Kick(killerid, "Уничтожении тачек читами");
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason) {
	printf("playerid:%i, killerid:%i, reason:%i", playerid, killerid, reason);
	if(playerid == killerid) {
		return Rac::Kick(playerid, "SelfKill");
	} else if(reason != 255) {
		if(reason < 47) {
			return Rac::Kick(playerid, "FakeKill");
		}
	} else {
		killerid = SyncInfo[playerid][sKillerID];
		reason = SyncInfo[playerid][sReasonID];
		SyncInfo[playerid][sKillerID] = INVALID_PLAYER_ID;
		SyncInfo[playerid][sReasonID] = 255;
	}
	
	if(Pl::isLogged(killerid)) {
		new killername[24], playername[24];
		new killerfrac = GetFracID(killerid), playerfrac = GetFracID(playerid);
		getname(killerid -> killername,playerid -> playername);
	
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(IsPlayerInRangeOfPoint(killerid, 50.0, x, y, z)) {
			if(Rac::GetPlayerState(killerid) == 2 && (reason == WEAPON_UZI || reason == WEAPON_MP5 || reason == WEAPON_TEC9)) {
				format(temp, sizeof(temp),"[античит] * %s(%i) только, что совершил ДБ. Жертва:(%i)%s", killername, killerid, playerid, playername);
				SendToAdmin(COLOR_NEWS, temp, 1, 1);
			}
		} else if(!IsPlayerStreamedIn(playerid, killerid)) {
			return Rac::Kick(playerid, "FakeKill");
		}
		
		if(reason == WEAPON_MINIGUN) {
			format(temp, sizeof(temp), "[античит] * %s[%i] только что убил игрока миниганом.", killername, killerid);
			SendToAdmin(COLOR_YELLOW, temp, 1, 1);
		}
		
		Pl::Info[killerid][pKills]++;
		if(Pl::Info[playerid][pWantedL] > 0) {
			if(IsACop(killerid)) {
				new jtime	= (Pl::Info[playerid][pWantedL]*3*100);
				new jmoney	= (Pl::Info[playerid][pWantedL]*1000);
				if(CrimInRange(30.0, playerid, killerid)) {
					Rac::GivePlayerMoney(killerid, jmoney);
					Rac::GivePlayerMoney(playerid, -jmoney);
					format(temp, sizeof temp, "~w~Running Suspect~r~Killed~n~Bonus~g~$%d", jmoney);
					GameTextForPlayer(killerid, temp, 5000, 1);
					PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
				}
				ClearCrime(playerid);
				Pl::Info[playerid][pWantedD] ++;
				SuspectKill[playerid] = true;
				Pl::Info[playerid][pJailTime] = jtime;
				format(temp, sizeof temp, "Вас убил законник с %d уровнем розыска. Вы посажены в тюрьму на %d минуты!", Pl::Info[playerid][pWantedL], jtime/60);
				Send(playerid, COLOR_LIGHTRED, temp);
				format(temp, sizeof temp, "Вы убили нарушителя с %d уровнем розыска. Он посажен в тюрьму на %d минуты!", Pl::Info[playerid][pWantedL], jtime/60);
				Send(killerid, COLOR_LIGHTRED, temp);
			}
		}

		// Уважения за убийство при захвате бизнеса
		#define InCapture(%0,%1) ((BizzInfo[%0][bAttack]==%1)||(BizzInfo[%0][bDefend]==%1))
		if(GangOnBattle{killerfrac} != 255 && killerfrac != playerfrac) {
			new biz = GangOnBattle{killerfrac};
			if(BizzInfo[biz][bOnBattle] && IsPlayerInSquare2D(killerid, MAX_ZONE_SIZE, BizzInfo[biz][bEnterX], BizzInfo[biz][bEnterY], 0)) {
				if(!InCapture(biz, playerfrac) && InCapture(biz, killerfrac)) {
					GiveGangRespect(killerfrac, -5);
					format(temp, sizeof temp, "[GANG NEWS] %s[%s] завалил %s[%s] (уважение -5)", killername, GetGangName(killerfrac), playername, GetGangName(playerfrac));
					SendZahvatMessage(BizzInfo[biz][bAttack], BizzInfo[biz][bDefend], GetFracColor(killerfrac), temp);
				} else if(!InCapture(biz, killerfrac) && InCapture(biz, playerfrac)) {
					GiveGangRespect(killerfrac, -50);
					format(temp, sizeof temp, "[GANG NEWS] %s[%s] вмешался в захват бизнеса (уважение -50)", killername, GetGangName(killerfrac));
					SendZahvatMessage(BizzInfo[biz][bAttack], BizzInfo[biz][bDefend], GetFracColor(killerfrac), temp);
					sendToFrac(killerfrac, GetFracColor(killerfrac), temp);
				} else if(InCapture(biz, killerfrac) && InCapture(biz, playerfrac)) {
					new rep;
					switch(reason) {
						case 0 									: rep = 5;
						case 22, 23 							: rep = 3;
						case 5, 6, 7, 10, 11, 12, 13, 14, 15	: rep = 10;
						default 								: rep = 1;
					}
					ZahvatKills{killerfrac} ++;
					ZahvatScore[killerfrac] += rep;
					GiveGangRespect(killerfrac, rep);
					format(temp, sizeof temp, "[GANG NEWS] %s[%s] завалил %s[%s] (уважение +%i)", killername, GetGangName(killerfrac), playername, GetGangName(playerfrac), rep);
					SendZahvatMessage(BizzInfo[biz][bAttack], BizzInfo[biz][bDefend], GetFracColor(killerfrac), temp);
				}
			}
		}
		
		// Блэклист
		if(Bl::Info[playerid][Bl::onFrac][killerfrac]) {
			Bl::Info[playerid][Bl::isKilled] = true;
			Bl::Info[playerid][Bl::Finder] = INVALID_PLAYER_ID;
			Bl::Info[playerid][Bl::Kills][killerfrac] ++;
			if(Bl::Info[playerid][Bl::Kills][killerfrac] >= FracInfo[killerfrac][fBConf][bKILLS]) {
				Bl::Remove(playerid, killerfrac);
				format(temp, sizeof temp, "[BLACK LIST] %s откупился кровью и был вычеркнут из черного списка %s.", playername, FracInfo[killerfrac][fName]);
				sendToFamily(killerfrac, COLOR_AZTECAS, temp);
				format(temp, sizeof temp, "[BLACK LIST] Вы откупились кровью и были вычеркнуты из черного списка %s.", FracInfo[killerfrac][fName]);
				Send(playerid, COLOR_AZTECAS, temp);
			} else {
				Bl::Update(playerid, killerfrac);
				format(temp, sizeof temp, "[BLACK LIST] Заплати или терпи, %s помнит о тебе.", FracInfo[killerfrac][fName]);
				Send(playerid, COLOR_AZTECAS, temp);
				format(temp, sizeof temp, "[BLACK LIST] %s завалил %s. Крепись братва, в следующий раз терпила даст монету.", killername, playername);
				sendToFamily(killerfrac, COLOR_AZTECAS, temp);
			}
		}
		
		else if(killerfrac == 8) {
			new contract = Pl::Info[killerid][pContract];
			if(contract != -1 && ContractInfo[contract][cVectim] == playerid) {
				removeContract(contract);
				Rac::GivePlayerMoney(killerid, ContractInfo[contract][cHeadValue]);
				Send(playerid, COLOR_LIGHTRED, "Ничего личного. На вас был контракт, и хитман его выполнил");
				format(temp, sizeof temp,"<< Хитман %s выполнил контракт на %s и получил $%d денег >>", killername, playername, ContractInfo[contract][cHeadValue]);
				sendToFamily(8, COLOR_YELLOW, temp);
			}
		}		

		else if(Pl::Paintballing[playerid] != 0) {
			Pl::PaintballKills[killerid] ++;
			if(Pl::PaintballKills[killerid] > PaintballWinnerKills) {
				PaintballWinner = killerid;
				PaintballWinnerKills = Pl::PaintballKills[killerid];
				format(temp, sizeof temp, "* Лидирует %s. Убил %i человек", killername, PaintballWinnerKills);
				SendPaintballMessage(COLOR_WHITE, temp);
			}
		}
	} else {
		if(!IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID) {
			return Rac::Kick(playerid, "Invalid killerid");
		}
	}
	
	if(Pl::CheckpointStatus[playerid] > 4 && Pl::CheckpointStatus[playerid] < 11) {
		DestroyDynamicCP(checkpoints[playerid]);
		Pl::CheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	
	new caller = Mobile[playerid];
	if(Pl::isLogged(caller)) {
		Send(caller,  COLOR_GRAD2, "* Эта линия отключина.");
		CellTime[caller] = 0;
		CellTime[playerid] = 0;
		Mobile[caller] = INVALID_PLAYER_ID;
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
	}
	
	if(OnAir[playerid]) {
		OnAirMax--;
		OnAir[playerid] = false;
	}

	// *** Дальнобойщик ***
	if(acceptgruz{playerid} != 0) {
		acceptgruz{playerid} = 0;
		DestroyDynamicPickup(pickupd[playerid][0]);
		DestroyDynamicMapIcon(pickupd[playerid][1]);
	}
	
	Pl::CuffedTime[playerid] = 0;
	Pl::Info[playerid][pLocal] = 0;
	Pl::Info[playerid][pMaskOn] = false;
	
	DisablePlayerCheckpoint(playerid);
	DisablePlayerCheckpointEx(playerid, FIND_ICON);
	DestroyDynamicRaceCP(checkpointb[playerid]);
	
	if(GetPVarInt(playerid, "RouteID") != 0xFFFF) {
		SetPVarInt(playerid, "RouteID", 0xFFFF);
		SetPVarInt(playerid, "NextCP", 0);
	}

	MedicBill[playerid] = true;
	PlayerCuffed[playerid] = false;
	Pl::CarInt[playerid] = INVALID_VEHICLE_ID;
	SetPlayerColor(playerid, COLOR_GRAD2);
	
	return 1;
}

public OnPlayerSpawn(playerid) {
	SetPlayerTeam(playerid, 1);
	//InitLockDoors(playerid);
	if(!Pl::Info[playerid][pReg]) {
		Pl::setCamPos(playerid, Pl::Info[playerid][pCamPos], playerid+99);
		
	} else if(!Pl::isLogged(playerid)) {
    	Send(playerid, COLOR_LIGHTRED, "* Извините но этот сервере требует залогинится перед тем как войти в игру. (Kicked) **");
        Kick(playerid);
		
 	} else {			
		SetPlayerSkin(playerid, Pl::Info[playerid][pChar]);
		if(Pl::Paintballing[playerid] != 0) {
		    new rand = random(sizeof(PaintballSpawns));
			Rac::SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
			SetCameraBehindPlayer(playerid);
			
		} else if(SuspectKill[playerid]) {
			SuspectKill[playerid] = false;
			Jailed(playerid, Pl::Info[playerid][pJailTime], Pl::Info[playerid][pJailed]);
			SetCameraBehindPlayer(playerid);
		
		} else if(Pl::Info[playerid][pJailed] > 0) {
		    if(Pl::Info[playerid][pJailed] != 2) Jailed(playerid, Pl::Info[playerid][pJailTime]);
			else Jailed(playerid, Pl::Info[playerid][pJailTime], Pl::Info[playerid][pJailed]);
			Send(playerid, COLOR_LIGHTRED, "* Вы ещё не отсидели свой тюремный срок.");
			SetCameraBehindPlayer(playerid);
		
		} else if(IsValidHouse(Pl::Info[playerid][pHouseKey]) && !SpawnChange[playerid]) {
			new house = Pl::Info[playerid][pHouseKey];
			Pl::Info[playerid][pLocal] = house;
			Rac::SetPlayerInterior(playerid,HouseInfo[house][hInt]);
			Rac::SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
			Rac::SetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity], HouseInfo[house][hExitz]); // Warp the player
			SetCameraBehindPlayer(playerid);
		
		} else {
			new fracid = GetFracID(playerid);
			if(fracid) {
				Rac::SetPlayerInterior(playerid, SpawnInfo[fracid][spInt]);
				Rac::SetPlayerVirtualWorld(playerid, SpawnInfo[fracid][spVirt]);
				Rac::SetPlayerPos(playerid, SpawnInfo[fracid][spX], SpawnInfo[fracid][spY], SpawnInfo[fracid][spZ]);
				SetPlayerFacingAngle(playerid, SpawnInfo[fracid][spA]);
				SetCameraBehindPlayer(playerid);
			
			} else {
				new i = 20+Pl::Info[playerid][pOrigin];
				if(i < sizeof SpawnInfo) {
					Rac::SetPlayerInterior(playerid, SpawnInfo[i][spInt]);
					Rac::SetPlayerVirtualWorld(playerid, SpawnInfo[i][spVirt]);
					Rac::SetPlayerPos(playerid, SpawnInfo[i][spX], SpawnInfo[i][spY], SpawnInfo[i][spZ]);
					SetPlayerFacingAngle(playerid, SpawnInfo[i][spA]);
					SetCameraBehindPlayer(playerid);
				} else {
					Rac::SetPlayerInterior(playerid, SpawnInfo[21][spInt]);
					Rac::SetPlayerVirtualWorld(playerid, SpawnInfo[21][spVirt]);
					Rac::SetPlayerPos(playerid, SpawnInfo[21][spX], SpawnInfo[21][spY], SpawnInfo[21][spZ]);
					SetPlayerFacingAngle(playerid, SpawnInfo[21][spA]);
					SetCameraBehindPlayer(playerid);
				}
			}
		}
		if(MedicBill[playerid] && !Pl::Info[playerid][pJailed] && !Pl::Paintballing[playerid] && !SuspectKill[playerid]) {
			MedicBill[playerid] = false;
			Pl::Info[playerid][pDeaths]++;
			new cut = Pl::Info[playerid][pLevel]*deathcost;
			GiveFracMoney(4, cut);
			Rac::GivePlayerMoney(playerid, -cut);
			Rac::SetPlayerHealth(playerid, 100.0);
			format(temp, sizeof(temp), "*Доктор: я взял с вас $%i за лечение, приятной игры.", cut);
			Send(playerid, COLOR_CYAN, temp);
		}
		
		SetPColor(playerid);
		SetPlayerWeapons(playerid);
		PlayerFixRadio(playerid);
		SetPlayerFightingStyle(playerid, Pl::Info[playerid][pFightstyle]);
	}
	PreloadAnimlib(playerid);
	SetPlayerSkillLevel(playerid, 0, 0);
	SetPlayerSkillLevel(playerid, 6, 0);
	SetPlayerSkillLevel(playerid, 5, 0);
	SetPlayerSkillLevel(playerid, 4, 0);
	SetPlayerScore(playerid, Pl::Info[playerid][pLevel]);
    return 1;
}
//---------------------------------------------------------------------------
public OnPlayerEnterCheckpoint(playerid) {
	new string[128];
	new Veh = GetPlayerVehicleID(playerid);
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] != INVALID_PLAYER_ID) {
		TaxiAccepted[playerid] = INVALID_PLAYER_ID;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	
	} else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] != INVALID_PLAYER_ID) {
	    BusAccepted[playerid] = INVALID_PLAYER_ID;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		BusCallTime[playerid] = 0;
		DestroyDynamicCP(checkpoints[playerid]);
	
	} else if(CP[playerid] == 1) {
	    if(IsPlayerInAnyVehicle(playerid)) {
		    new moneys, level;
			if(Pl::Info[playerid][pJackSkill] < 401) level = ++Pl::Info[playerid][pJackSkill];
			
			switch(level) {
				case 50 : Send(playerid, COLOR_YELLOW, "* Ваш скил угонщика машин увеличен до 2 уровня теперь вы можете продовать больше машин.");
				case 100 : Send(playerid, COLOR_YELLOW, "* Ваш скил угонщика машин увеличен до 3 уровня теперь вы можете продовать больше машин.");
				case 200 : Send(playerid, COLOR_YELLOW, "* Ваш скил угонщика машин увеличен до 4 уровня теперь вы можете продовать больше машин.");
				case 400 : Send(playerid, COLOR_YELLOW, "* Ваш скил угонщика машин увеличен до 5 уровня теперь вы можете продовать больше машин.");
			}
			
			if(0 <= level <= 50) {
			    new rand = random(sizeof(SELLCAR1)); moneys = SELLCAR1[rand];
			    format(string, sizeof(string), "Вы продали автомобиль за $%d, вы можете продать следующий через - 20 минут.", SELLCAR1[rand]);
				Send(playerid, COLOR_LIGHTBLUE, string);
				Pl::Info[playerid][pCarTime] = 1200;
				
			} else if(51 <= level <= 100) {
			    new rand = random(sizeof(SELLCAR2)); moneys = SELLCAR2[rand];
			    format(string, sizeof(string), "Вы продали автомобиль за $%d, вы можете продать следующий через - 18 минут.", SELLCAR2[rand]);
				Send(playerid, COLOR_LIGHTBLUE, string);
				Pl::Info[playerid][pCarTime] = 1080;
				
			} else if(101 <= level <= 200) {
			    new rand = random(sizeof(SELLCAR3)); moneys = SELLCAR3[rand];
			    format(string, sizeof(string), "Вы продали автомобиль за $%d, вы можете продать следующий через - 16 минут.", SELLCAR3[rand]);
				Send(playerid, COLOR_LIGHTBLUE, string);
				Pl::Info[playerid][pCarTime] = 960;
				
			} else if(201 <= level <= 400) {
			    new rand = random(sizeof(SELLCAR4)); moneys = SELLCAR4[rand];
			    format(string, sizeof(string), "Вы продали автомобиль за $%d, вы можете продать следующий через - 14 минут.", moneys);
				Send(playerid, COLOR_LIGHTBLUE, string);
				Pl::Info[playerid][pCarTime] = 840;
				
			} else if(level >= 401) {
				moneys = 6000;
				format(string, sizeof(string), "Вы продали автомобиль за $%d, вы можете продать следующий через - 12 минут.", moneys);
				Send(playerid, COLOR_LIGHTBLUE, string);
				Pl::Info[playerid][pCarTime] = 720;
			}
			format(string, sizeof(string), "~g~+$%i~n~~y~Sold the car", moneys);
			GameTextForPlayer(playerid, string, 7000, 1);
			CP[playerid] = 0;
			Rac::GivePlayerMoney(playerid, moneys);
			DestroyDynamicCP(checkpoints[playerid]);
			SetVehicleToRespawn(Veh);
	
		} else {
			GameTextForPlayer(playerid, "Not in a car", 5000, 1);
		}
	} else if(CP[playerid] == 5) {
		CP[playerid] = 0;
		DestroyDynamicCP(checkpoints[playerid]);
	    GameTextForPlayer(playerid, "~y~At the Missions Checkpoint", 2500, 1);
	
	} else {
		switch (Pl::CheckpointStatus[playerid]) {
			case CHECKPOINT_HOME : {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DestroyDynamicCP(checkpoints[playerid]);
				Pl::CheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~You are~n~~y~Home", 5000, 1);
		    }
		}
	}

	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid) {
	if(!Pl::isLogged(playerid)) return 0;

	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] != INVALID_PLAYER_ID) {
	    TaxiAccepted[playerid] = INVALID_PLAYER_ID;
		TaxiCallTime[playerid] = 0;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		DestroyDynamicCP(checkpoints[playerid]);
	
	} else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] != INVALID_PLAYER_ID) {
	    BusAccepted[playerid] =INVALID_PLAYER_ID;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		BusCallTime[playerid] = 0;
		DestroyDynamicCP(checkpoints[playerid]);
	
	} else {
		switch(Pl::CheckpointStatus[playerid]) {
			case CHECKPOINT_HOME: {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DestroyDynamicCP(checkpoints[playerid]);
				Pl::CheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~You are~n~~y~Home", 5000, 1);
		    }
		}
	}
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid) {
	if(!Pl::isLogged(playerid)) return 0;
	
	new string[144];
	
	switch(GetPlayerState(playerid)) {
		case PLAYER_STATE_DRIVER : {
			new Veh = GetPlayerVehicleID(playerid);
			switch(GetPlayerJob(playerid)) {
				case JOB_BUSMAN : {
					if(checkpointb[playerid] == checkpointid && GetPVarInt(playerid, "RouteID") != 0xFFFF) {
						if(IsABusCar(Veh)) {
							new next = GetPVarInt(playerid, "NextCP");
							new route = GetPVarInt(playerid, "RouteID");

							if(++next < BusRouteCount[route]) {
								DestroyDynamicRaceCP(checkpointb[playerid]);
								SetVehicleVelocity(Veh, 0.0, 0.0, 0.0);
								PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
								format(string, sizeof(string),  "** %s, следующия остановка - %s.", BusRouteStopName[BusRoute[route][next-1][stopID]], BusRouteStopName[BusRoute[route][next][stopID]]);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
								checkpointb[playerid] = CreateDynamicRaceCP(2, BusRoute[route][next][stopX], BusRoute[route][next][stopY], BusRoute[route][next][stopZ], 0, 0, 0, 4.0, 0, 0, playerid, 99999.0);
								SetPVarInt(playerid, "NextCP", next);
							} else {
								BusDrivers --;
								TransportDuty[playerid] = 0;
								TransportValue[playerid] = 0;
								DestroyDynamicRaceCP(checkpointb[playerid]);
								DestroyDynamic3DTextLabel(AttachText[Veh]);
								SetVehicleVelocity(Veh, 0.0, 0.0, 0.0);
								PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
								format(string, sizeof(string),  "** %s, конечная остановка.", BusRouteStopName[BusRoute[route][next-1][stopID]]);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
								
								new Float:health;
								GetVehicleHealth(Veh, health);
								new cost = floatround((health*5.0));
								format(string, sizeof(string),  "* Маршрут закончен! Вы заработали $%i", cost);
								Send(playerid, COLOR_YELLOW, string);
								format(string, sizeof(string),  "~g~+$%i", cost);
								GameTextForPlayer(playerid, string, 7000, 1);
								Rac::GivePlayerMoney(playerid, cost);

								SetPVarInt(playerid, "RouteID", 0xFFFF);
								DeletePVar(playerid, "NextCP");
							
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid) {
	if(Pl::isLogged(playerid)) {
		if(areaid == area::ASH) {
			AshQueue(playerid, 0);
			
		} else if(areaid == area::jailField) {

		} else if(areaid >= AntiDmInfo[0][e_AntiDmZone] && areaid <= AntiDmInfo[TOTAL_ANTIDM_ZONES-1][e_AntiDmZone]) {
			InAntiDmZone{playerid} = true;
			
		} else {
			for(new i; i < sizeof(ClubInfo); i++) {
				if(ClubInfo[i][cArea] == areaid) {
					PlayAudioStreamForPlayer(playerid, RadioInfo[3][rUrl], ClubInfo[i][cX], ClubInfo[i][cY], ClubInfo[i][cZ], ClubInfo[i][cS], 1);
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid) {
	if(Pl::isLogged(playerid)) {
		if(areaid == area::ASH) {
			AshQueue(playerid, 1);
		} else if(areaid == area::Shamal) {
			Pl::CarInt[playerid] = INVALID_PLAYER_ID;
			
		} else if(areaid == area::jailField) {
			if(Pl::Info[playerid][pJailed] == 1) {
				format(temp, sizeof temp, "* {FF6347}%s[ID: %d] {CDFFFF}подозрение на побег из тюрьмы. {C2A2DA}(оставшийся срок: %d секунд).", GetName(playerid), playerid, Pl::Info[playerid][pJailTime]);
				SendToAdmin(COLOR_CHEATS, temp, 1, 1);
			}
			
		} else if(AntiDmInfo[0][e_AntiDmZone] <= areaid <= AntiDmInfo[TOTAL_ANTIDM_ZONES-1][e_AntiDmZone]) {
			InAntiDmZone{playerid} = false;
			
		} else {
			for(new i; i < sizeof(ClubInfo); i++) {
				if(ClubInfo[i][cArea] == areaid) {
					StopAudioStreamForPlayer(playerid);
				}
			}
		}
	}
	
	return 1;
}

stock AshQueue(playerid, reason) {
	switch(reason) {
		case 0 : {
			if(!Pl::Info[playerid][pCarLic]) {
				if(Pl::Info[playerid][pTest] == 999) {
					if(pddo[playerid] == 0) {
						if(!TakingLesson[playerid]) {
							Iter_Add(Queue, playerid);
							pddo[playerid] = Iter_Count(Queue);
							GetPlayerName(playerid, plname, 24);
							scf(string_ah, src, "%i.%s\n", pddo[playerid], plname);
							UpdateDynamic3DTextLabelText(ah_text, 0x42aaffFF, string_ah);
							Send(playerid, COLOR_WHITE,"* Вы заняли место в очереди.");
						}
					}
				}
			}
		}
		
		case 1 : {
			if(!Pl::Info[playerid][pCarLic]) {
				if(Pl::Info[playerid][pTest] == 999) {
					if(pddo[playerid] != 0) {
						new pddp;
						pddo[playerid] = 0;
						Iter_Remove(Queue, playerid);
						format(string_ah,sizeof(string_ah),">> Очередь допущенных к практической части экзамена: <<\n");
						foreach(new i : Queue) {
							pddp++;
							pddo[i] = pddp;
							GetPlayerName(i, plname, 24);
							scf(string_ah, temp, "%i.%s\n", pddp, plname);
						}
						UpdateDynamic3DTextLabelText(ah_text, 0x42aaffFF, string_ah);
						Send(playerid, COLOR_WHITE, "* Вы покинули очередь.");
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid) {
	if(PickupInfo[playerid][pOld] == pickupid) {
		return 1;
	} else if(PickupInfo[playerid][pDelay]) {
		PickupInfo[playerid][pOld] = pickupid;
		return GetPlayerPos(playerid, PickupInfo[playerid][pOldPos][0], PickupInfo[playerid][pOldPos][1], PickupInfo[playerid][pOldPos][2]);
	} else {
		PickupInfo[playerid][pOld] = pickupid;
		GetPlayerPos(playerid, PickupInfo[playerid][pOldPos][0], PickupInfo[playerid][pOldPos][1], PickupInfo[playerid][pOldPos][2]);
	}
	
	if(GetPlayerDistanceFromPickup(playerid, pickupid) > 18.0) {
		return Rac::Kick(playerid, "SendPic");
	}

	switch(GetPlayerState(playerid)) {
		case PLAYER_STATE_ONFOOT : {
			if(pickupid == helpp[0] || pickupid == helpp[1] || pickupid == helpp[2]) {
				ShowDialog(playerid, D_REF, DIALOG_STYLE_LIST, "{33CCFF}Справка.", "dialog/ref/main.txt", "SELECT", "CANCEL");
			}
			
			else if(pickupid == healcnn) {
				Rac::SetPlayerHealth(playerid, 100.0);
			}
			
			else if(pickupid == healfbi) {
				Rac::SetPlayerHealth(playerid, 100.0);
			}
			
			else if(pickupid == Parashut) {
				if(!Rac::CheckPlayerWeapon(playerid, 46)) {
					Rac::GivePlayerWeapon(playerid, 46, 1);
				}		
			}
	
			else if(pickupid == saveTuning) {
				if(!IsValidHouse(Pl::Info[playerid][pHouseKey])) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				if(HouseInfo[Pl::Info[playerid][pHouseKey]][hVeh] == 0) return Send(playerid, COLOR_GREY, "* У Вас нет домашней машины!");
				SPD(playerid, D_TUNING, DIALOG_STYLE_LIST, "[RP]GrandWorld: Tuning", "Зарегистрировать тюнинг\nУдалить тюнинг", "SELECT", "CANCEL");
			}

			else if(pickupid == givepasport) {
				if(!Pl::Info[playerid][pPasport][0]) {
					SPD(playerid, D_GIVE_PASS, 1, "{ffcf00}Паспортный стол", "Укажите ваш возраст", "Ввод", "Отмена");
				} else {
					Send(playerid, COLOR_GREY, "* У Вас уже есть паспорт!");
				}
			}
	
			else if(pickupid == ammozakona[0]) {
				if(!IsACop(playerid)) return Send(playerid,COLOR_GREY,"* Вы не законник!");
				if(Pl::Info[playerid][pGunLic] <= 0) return Send(playerid,COLOR_WHITE,"Продавец: Я не могу продать вам оружие без лицензии!");
				ShowMenuForPlayer(Ammu2Menu,playerid);
				Rac::TogglePlayerControllable(playerid, 0);
			}
	
			else if(pickupid == ammozakona[1]) {
				if(GetFracID(playerid) != 2) return Send(playerid,COLOR_GREY,"* Для вас нет комплекта одежды!");
				if(Pl::Info[playerid][pRank] < 3) return Send(playerid,COLOR_GREY,"* Только с 3-го ранга!");
				SPD(playerid, D_MASK+1, DIALOG_STYLE_LIST, "Скины скрытности","Японец\nКоронос\nБаллас\nГражданский\nВернуть свой","ВЫБОР","ОТМЕНА");
			}
	
			else if(pickupid == ammozakona[2]) {
				if(GetFracID(playerid) != 3) return Send(playerid,COLOR_GREY,"* Для вас нет комплекта одежды!");
				skin::goto( GetFracID(playerid), skin::first, SelectCharPlace[playerid], ChosenSkin[playerid]);
				SetPlayerSkin(playerid, ChosenSkin[playerid]); ShowMenuForPlayer(ClothesMenu, playerid); Rac::TogglePlayerControllable(playerid, 0);
			}
	
			else if(pickupid == ammozakona[3]) {
				if(!IsACop(playerid)) return Send(playerid,COLOR_GREY,"* Вы не законник!");
				SPD(playerid, D_ARMOUR, DIALOG_STYLE_MSGBOX, "Одеть бронежилет?", "Вам приедеться заплатить $500", "ОДЕТЬ","ОТМЕНА");
			}
	
			else if(pickupid == buy) {
				Rac::TogglePlayerControllable(playerid,0);
				ShowMenuForPlayer(BuyMenu, playerid);
			}
	
			else if(pickupid == proba) {
				ShowCantina(playerid);
			}
	
			else if(pickupid == fire_ext) {
				if(GetFracID(playerid) == TEAM_GOV) {
					if(Rac::GetPlayerAmmo(playerid, 42) == 0) {
						Rac::GivePlayerWeapon(playerid, 42, 500);
					}
				}
			}
	
			else if(pickupid == mak[0] || pickupid == mak[1]) {
				Rac::TogglePlayerControllable(playerid,0);
				ShowMenuForPlayer(BurgerMenu, playerid);
			}
	
			else if(pickupid == boj) {
				SPD(playerid, 2222, DIALOG_STYLE_LIST,"Выберите стиль боя. Стоимость 100.000",
				"БОКС\nКУНГ-ФУ\nСАМБО\nУЛИЧНЫЙ","Выбрать","Отмена");
			}
	
			else if(pickupid == Piza) {
				Rac::TogglePlayerControllable(playerid,0);
				ShowMenuForPlayer(PizaMenu, playerid);
			}
	
			else if(pickupid == weapon1 || pickupid == weapon2 || pickupid == weapon3 || pickupid == weapon4) {
				if(Pl::Info[playerid][pGunLic] <= 0) return Send(playerid,COLOR_WHITE,"Продавец: Я не могу продать вам оружие без лицензии!");
				ShowMenuForPlayer(Ammu1Menu,playerid);
				Rac::TogglePlayerControllable(playerid, 0);
			}
			
			else if(pickupid == hitpickup[0]) {
				if(GetFracID(playerid) == TEAM_HITMANS) {
					SPD(playerid, D_MASK, DIALOG_STYLE_LIST,"Скины скрытности","Полиция\nFBI\nАрмия\nГражданский\nВернуть свой","Ок","Отмена");
				}
			}
	
			else if(pickupid == hitpickup[1]) {
				if(GetFracID(playerid) == TEAM_HITMANS) {
					Rac::TogglePlayerControllable(playerid, 0);
					ShowMenuForPlayer(HitmanMenu, playerid);
				}
			}
	
			else if(pickupid == testpdd) {
				if(Pl::Info[playerid][pCarLic]) return Send(playerid,COLOR_GREY,"* У Вас уже есть права!");
				if(Pl::Info[playerid][pTest] == 999) return Send(playerid,COLOR_GREY,"* Вы уже сдали теорию!");
				SetPVarInt(playerid, "SelectedItem", 1);
				return ShowDialog(playerid, D_PDDTEST, 1, "[RP]GrandWorld: TEST PDD", "dialog/pddtest/pdd_test_1.lst", "Ответ", "Отмена");
			}
	
			else if(pickupid == prolaps[0] || pickupid == prolaps[1]) {
				if(GetPlayerInterior(playerid) == 3) {
					SetPlayerPos(playerid, 215.0070, -132.9081, 1003.5078);
					SetPlayerFacingAngle(playerid, 88.6508);
					SetPlayerCameraPos(playerid, 211.3418,-132.9378,1003.8132 );
					SetPlayerCameraLookAt(playerid, 215.0070, -132.9081, 1003.5078);
					Rac::SetPlayerVirtualWorld(playerid, ((99 * 7) + playerid));
				} else {
					SetPlayerPos(playerid, 222.6448, -8.6822, 1002.2109);
					SetPlayerFacingAngle(playerid, 271.0125);
					SetPlayerCameraPos(playerid, 226.138, -8.524, 1002.953);
					SetPlayerCameraLookAt(playerid, 222.6448, -8.6822, 1002.2109);
					Rac::SetPlayerVirtualWorld(playerid, ((99 * 7) + playerid));
				}
				skin::goto(GetFracID(playerid), skin::first, SelectCharPlace[playerid], ChosenSkin[playerid]);
				SetPlayerSkin(playerid, ChosenSkin[playerid]);
				ShowMenuForPlayer(ClothesMenu, playerid);
				Rac::TogglePlayerControllable(playerid, 0);
			}
	
			else if(pickupid == Bank[0]) {
				SPD(playerid, D_BANK, DIALOG_STYLE_LIST, "[RP]GrandWorld: BANK","Баланс\nОбналичить\nПополнить счет\nПеревести","SELECT","CENCEL");
			}
	
			else if(pickupid == Bank[1]) {
				clear(dialog);
				for(new s; s < sizeof(FracID); s++) scf(dialog, temp, "%s\n", FracInfo[ FracID[s] ][ fName ]);
				SPD(playerid, D_FBANK, DIALOG_STYLE_LIST,"[RP]GrandWorld: TRANSFER", dialog, "ENTER", "CANCLE");
			}
	
			else if(ATMp[0] <= pickupid <= ATMp[1]) {
				SPD(playerid, D_ATM, DIALOG_STYLE_LIST, "[RP]GRANDWORLD ATM.", "Обналичить\nПополнить\nБаланс", "SELECT", "CANCLE");
			}
			
			else {
				if(!processPortal(playerid, pickupid)) {
					if(!processJob(playerid, pickupid)) {
						if(!processBurger(playerid, pickupid)) {
							if(!processBizz(playerid, pickupid)) {
								if(!processHouses(playerid, pickupid)) {}
							}
						}
					}
				}
			}
		}
		
		case PLAYER_STATE_DRIVER : {
			if(pickupid == barn[0]) {
				if(GetFracID(playerid) == TEAM_FARMERS) {
					new vehid = GetPlayerVehicleID(playerid);
					if(GetVehicleModel(vehid) == 532) {
						SPD(playerid, D_BARN, 0, "Амбар", "Разгрузить мак?", "OK", "CANCEL");
					} else {
						SPD(playerid, D_BARN+2, 1, "Амбар", "Взять мак:", "OK", "CANCEL");
					}
				}
			}
			
			else if(pickupid == barn[1]) {
				if(GetFracID(playerid) == TEAM_FARMERS) {
					SPD(playerid, D_BARN+1, 0, "Притон", "Продать мак?", "OK", "CANCEL");
				}
			}
			
			else if(pickupd[playerid][0] == pickupid) {
				if(acceptgruz{playerid}) {
					new veh = GetPlayerVehicleID(playerid);
					if(IsATruckCar(veh) && Rac::GetPlayerState(playerid) == 2) {
						new trailer = GetVehicleTrailer(veh);
						if(trailer) {
							acceptgruz{playerid} = 0;
							DestroyDynamicPickup(pickupd[playerid][0]);
							DestroyDynamicMapIcon(pickupd[playerid][1]);
							
							new rnd = (1000 + (random(7)*1000));
							Rac::GivePlayerMoney(playerid, rnd);
							SetVehicleToRespawn(trailer);
							
							format(temp, sizeof(temp),"* Груз доставлен. Заработано %d$", rnd);
							Send(playerid,COLOR_YELLOW, temp);
							format(temp, sizeof(temp),"~g~+$%i", rnd);
							GameTextForPlayer(playerid, temp, 5000, 1);
						} else {
							DestroyDynamicPickup(pickupd[playerid][0]);
							DestroyDynamicMapIcon(pickupd[playerid][1]);
							Send(playerid,COLOR_YELLOW, "* Вы приехали без груза!");
						}
					}
				} else {
					acceptgruz{playerid} = 0;
					DestroyDynamicPickup(pickupd[playerid][0]);
					DestroyDynamicMapIcon(pickupd[playerid][1]);
				}
			}
			
			else {
				processPortal(playerid, pickupid);
			}
		}
	}
	
	return 1;
}

stock processPortal(playerid, pickupid) {
	for(new i; i < TOTAL_PORTAL; ++i) {
		if(Tp::Info[i][Tp::Pickup][0] == pickupid) {
			if(EditMode[playerid]) {
				SetPVarInt(playerid, "selectTeleport", i);
				format(dialog, sizeof dialog, "Telepot №%i | | Пикап №1", Tp::Info[i][Tp::Id]);
				SPD(playerid,TP_EDIT,2,dialog,"Перый пикап\nВторой пикап\nОткрыть/Закрыть\nУдалить","Выбор","Выход");
				return 1;
			}
			
			if(Tp::Info[i][Tp::Portal2][0] != 0.0) {
				if(!Tp::Info[i][Tp::Allowed][GetFracID(playerid)]) {
					switch(CallLocalFunction("onPlayerPortal", "iii", playerid, Tp::Info[i][Tp::Id], 1)) {
						case -1 : {
							return 1;
						}
						case 0 : {
							return GameTextForPlayer(playerid, "~r~Closed", 1000, 1);
						}
					}
				}
				
				new Float:x,Float:y;
				if(Tp::Info[i][Tp::Type][1] != 14) {
					GetXYInFrontOfPoint(x, y, Tp::Info[i][Tp::Portal2][3], 1.5);
					Rac::SetPlayerPos(playerid,Tp::Info[i][Tp::Portal2][0]+x,Tp::Info[i][Tp::Portal2][1]+y,Tp::Info[i][Tp::Portal2][2]);
					SetPlayerFacingAngle(playerid, Tp::Info[i][Tp::Portal2][3]);
				} else {
					new veh = GetPlayerVehicleID(playerid);
					GetXYInFrontOfPoint(x, y, Tp::Info[i][Tp::Portal2][3], vehicleSize(veh)+2.0);
					Rac::SetVehiclePos(veh, Tp::Info[i][Tp::Portal2][0]+x,Tp::Info[i][Tp::Portal2][1]+y,Tp::Info[i][Tp::Portal2][2]);
					SetVehicleZAngle(veh, Tp::Info[i][Tp::Portal2][3]);
					LinkVehicleToInterior(veh, Tp::Info[i][Tp::Inter][1]);
					SetVehicleVirtualWorld(veh, Tp::Info[i][Tp::World ][1]);
				}
				Rac::SetPlayerInterior(playerid, Tp::Info[i][Tp::Inter][1]);
				Rac::SetPlayerVirtualWorld(playerid, Tp::Info[i][Tp::World][1]);
				SetCameraBehindPlayer(playerid);
				
				return 1;
			}
		}
		
		else if(Tp::Info[i][Tp::Pickup][1] == pickupid) {
			if(EditMode[playerid]) {
				SetPVarInt(playerid, "selectTeleport", i);
				format(dialog, sizeof dialog, "Telepot №%i | Пикап №2 ", Tp::Info[i][Tp::Id]);
				SPD(playerid,TP_EDIT,2,dialog,"Перый пикап\nВторой пикап\nОткрыть/Закрыть\nУдалить","Выбор","Выход");
				return 1;
			}
			
			if(!Tp::Info[i][Tp::Allowed][GetFracID(playerid)]) {
				switch(CallLocalFunction("onPlayerPortal", "iii", playerid, Tp::Info[i][Tp::Id], 2)) {
					case -1 : {
						return 1;
					}
					case 0 : {
						return GameTextForPlayer(playerid, "~r~Closed", 1000, 1);
					}
				}
			}
				
			new Float:x,Float:y;
			if(Tp::Info[i][Tp::Type][0] != 14) {
				GetXYInFrontOfPoint(x, y, Tp::Info[i][Tp::Portal1][3], 1.5);
				Rac::SetPlayerPos(playerid,Tp::Info[i][Tp::Portal1][0]+x,Tp::Info[i][Tp::Portal1][1]+y,Tp::Info[i][Tp::Portal1][2]);
				SetPlayerFacingAngle(playerid, Tp::Info[i][Tp::Portal1][3]);
			} else {
				new veh = GetPlayerVehicleID(playerid);
				GetXYInFrontOfPoint(x, y, Tp::Info[i][Tp::Portal1][3], vehicleSize(veh)+2.0);
				Rac::SetVehiclePos(veh, Tp::Info[i][Tp::Portal1][0]+x,Tp::Info[i][Tp::Portal1][1]+y,Tp::Info[i][Tp::Portal1][2]);
				SetVehicleZAngle(veh, Tp::Info[i][Tp::Portal1][3]);
				LinkVehicleToInterior(veh, Tp::Info[i][Tp::Inter][0]);
				SetVehicleVirtualWorld(veh, Tp::Info[i][Tp::World][0]);
			}
			Rac::SetPlayerInterior(playerid, Tp::Info[i][Tp::Inter][0]);
			Rac::SetPlayerVirtualWorld(playerid, Tp::Info[i][Tp::World][0]);
			SetCameraBehindPlayer(playerid);
			
			return 1;
		}
	}
	
	return 0;
}

stock processJob(playerid, pickupid) {
	#pragma unused pickupid
	for(new i; i < sizeof(JobsInfo); i++) {
		if(IsPlayerInRangeOfPoint(playerid, 2.0, JobsInfo[i][jPos][0], JobsInfo[i][jPos][1], JobsInfo[i][jPos][2])) {
			if(Pl::Info[playerid][pPasport][0] != 0) {
				if(Pl::Info[playerid][pJob] != 0) {
					Send(playerid, COLOR_GREY, "* У Вас уже есть работа! /quitjob - уволится (если выполнен контракт)");
				} else {
					GettingJob[playerid] = JobsInfo[i][jID];
					format(src, sizeof(src), "{ffffff}Вы хотите устроится на работу.\n— Должность: {ff0000}%s\n{ffffff}— Срок контракта: {ff0000}5 часов\n\n\
					{ffffff}Вы не уволитесь пока не выполните контракт!\nВы согласны?", JobsInfo[i][jName]);
					SPD(playerid, D_JOB, 0, "Трудоустройство", src, "Да", "Нет");
				}
			} else {
				Send(playerid, COLOR_GREY, "* У Вас нет паспорта! Получить его можно в мэрии.");
			}
			return 1;
		}
	}
	return 0;
}

stock processBurger(playerid, pickupid) {
	#pragma unused pickupid
	new virtual = GetPlayerVirtualWorld(playerid);
	for(new b; b < TOTAL_BURGERS; b++) {
		if(IsPlayerInRangeOfPoint(playerid, 2.0, Burgers[b][bX], Burgers[b][bY], Burgers[b][bZ])) {
			BlockPickup(playerid, Burgers[b][PickupEx]);
			Rac::SetPlayerInterior(playerid, Burgers[b][Int]);
			Rac::SetPlayerVirtualWorld(playerid, Burgers[b][vW]);
			Rac::SetPlayerPos(playerid, Burgers[b][bEX], Burgers[b][bEY], Burgers[b][bEZ]);
			switch(Burgers[b][Type]) {
				case 1: GameTextForPlayer(playerid, "burger", 3500, 1);
				case 2: GameTextForPlayer(playerid, "pizza", 3500, 1);
				case 3: GameTextForPlayer(playerid, "cluckin bell", 3500, 1);
				case 4: GameTextForPlayer(playerid, "24/7", 3500, 1);
			}
			return 1;
		}
		
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, Burgers[b][bEX], Burgers[b][bEY], Burgers[b][bEZ])) {
			if(Burgers[b][vW] == virtual) {
				Rac::SetPlayerInterior(playerid,0);
				Rac::SetPlayerVirtualWorld(playerid,0);
				Rac::SetPlayerPos(playerid, Burgers[b][bX], Burgers[b][bY], Burgers[b][bZ]);
				BlockPickup(playerid, Burgers[b][PickupEn]);
				GameTextForPlayer(playerid, "buye-buye", 3500, 1);
				return 1;
			}
		}
	}
	return 0;
}

stock processBizz(playerid, pickupid) {
	#pragma unused pickupid
	new virtual = GetPlayerVirtualWorld(playerid);
	for(new b; b < TOTAL_BIZZ; b++) {
		if(IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[b][bEnterX], BizzInfo[b][bEnterY], BizzInfo[b][bEnterZ])) {
			if(BizzInfo[b][bOwned]) {
				format(dialog, sizeof dialog,
				"Название: %s\n\
				Плата за вход: $%i\n\n\
				Владелец: %s\n\
				Команьон: %s\n\
				Крыша: %s\n\
				Level: %i",
				BizzInfo[b][bName], BizzInfo[b][bEntranceCost], BizzInfo[b][bOwner],
				BizzInfo[b][bExtortion], GetGangName(BizzInfo[b][bFrac]), BizzInfo[b][bLevelNeeded]);
				if(EditMode[playerid]) scf(dialog, temp, "\n\n---- debug ----\nbizid: %i", BizzInfo[b][bID]);
				SPD(playerid, D_EN_BIZ, 0, "[RP]GrandWorld: Business Info", dialog, "ENTER", "CANCEL");
			} else {
				format(dialog, sizeof dialog,
				"Название: %s\n\n\
				БИЗНЕС ПРОДАЕТСЯ\n\
				Цена: $%i\n\
				Level: %i\n\
				Введите /buybiz для покупки!",
				BizzInfo[b][bName], BizzInfo[b][bBuyPrice], BizzInfo[b][bLevelNeeded]);
				if(EditMode[playerid]) scf(dialog, temp, "\n\n---- debug ----\nbizid: %i", BizzInfo[b][bID]);
				SPD(playerid, D_EN_BIZ, 0, "[RP]GrandWorld: Business Info", dialog, "OK", "CANCEL");
			}
			SetPVarInt(playerid, "PlayerBizz", b);
			return 1;
		}
		
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[b][bExitX], BizzInfo[b][bExitY], BizzInfo[b][bExitZ])) {
			if(BizzInfo[b][bVirtual] == virtual) {
				SetPVarInt(playerid, "PlayerBizz", b);
				SPD(playerid, D_EX_BIZ, 0, "EXIT", "Вы хотите выйти?", "OK", "CANCEL");
				return 1;
			}
		}
	}
	return 0;
}

stock processHouses(playerid, pickupid) {
	for(new h; h != TOTAL_HOUSES+1; h++) {
		if(HouseInfo[h][hPickup] == pickupid) {
			switch(HouseInfo[h][hOwned]) {
				case 0 : {
					format(dialog, sizeof dialog,
					"Дом продается!\n\
					Описание: %s\n\
					Цена: $%i\n\
					Level: %i\n\
					ID дома: %i\n\
					Введите /buyhouse, чтобы купить дом.",
					HouseInfo[h][hInfo], HouseInfo[h][hPrice], HouseInfo[h][hLevel], h);
				}
				
				case 1 : {
					switch(HouseInfo[h][hRent]) {
						case 0 : {
							format(dialog, sizeof dialog,
							"Владелец: %s\n\
							Level: %i\n\
							ID дома: %i",
							HouseInfo[h][hOwner],  HouseInfo[h][hLevel], h);
						}
						case 1 : {
							format(dialog, sizeof dialog,
							"Владелец: %s\n\
							Стоимость аренды: $%i\n\
							Level: %i\n\
							ID дома: %i\n\
							Введите /rentroom, чтобы посилиться тут.",
							HouseInfo[h][hOwner], HouseInfo[h][hRentPrice], HouseInfo[h][hLevel], h);
						}
					}
				}
			}
			SetPVarInt(playerid, "PlayerHouse", h);
			SPD(playerid, D_EN_HOUSE, 0, "[RP]GrandWorld: Информация о доме.", dialog, "ENTER", "CANCEL");
			return 1;
		}
	}
	return 0;
}

public: onPlayerPortal(playerid, portalid, pickupid) {
	new result = 0;
	switch(portalid) {
		case 11 : {
			if(GetFracID(playerid) == 11) {
				result = 1;
			}
		}
		case 12 : {
			switch(pickupid) {
				case 1 : {
					if(!TakingLesson[playerid]) {
						Send(playerid, COLOR_WHITE, "* Дождитесь начала экзамена!");
						result = -1;
					} else {
						result = 1;
					}
				}
				case 2 : {
					result = 1;
				}
			}
		}
	}
	return result;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:current;
	current = GetPlayerMenu(playerid);

	if(current == IntMenu)
	{
		switch(row)
		{
			case 0:
			{
				new idx = GetPVarInt(playerid, "SelectedItem"); idx ++;
				if(idx >= sizeof(HouseInt)) idx = 0;
				SetPVarInt(playerid, "SelectedItem", idx);
				Rac::SetPlayerPos(playerid, HouseInt[idx][intX], HouseInt[idx][intY], HouseInt[idx][intZ]);
				Rac::SetPlayerInterior(playerid, HouseInt[idx][intH]);
				Rac::SetPlayerVirtualWorld(playerid, 999);
				SetPlayerCameraPos(playerid, HouseInt[idx][intX], HouseInt[idx][intY], HouseInt[idx][intZ]);
				SetPlayerCameraLookAt(playerid, HouseInt[idx][intX] - 100.0, HouseInt[idx][intY] - 100.0, HouseInt[idx][intZ] - 100.0);
				SetCameraBehindPlayer(playerid);
				format(temp, sizeof(temp), "~n~~n~~n~~n~~n~~n~~n~~n~~g~price: ~w~$%i", HouseInt[idx][intPrice]);
				GameTextForPlayer(playerid, temp, 5000, 6);
				ShowMenuForPlayer(IntMenu, playerid);
				return 0;
			}
			case 1:
			{
				new idx = GetPVarInt(playerid, "SelectedItem"); idx --;
				if(idx < 0) idx = sizeof(HouseInt)-1;
				SetPVarInt(playerid, "SelectedItem", idx);
				Rac::SetPlayerPos(playerid, HouseInt[idx][intX], HouseInt[idx][intY], HouseInt[idx][intZ]);
				Rac::SetPlayerInterior(playerid, HouseInt[idx][intH]);
				Rac::SetPlayerVirtualWorld(playerid, 999);
				SetPlayerCameraPos(playerid, HouseInt[idx][intX], HouseInt[idx][intY], HouseInt[idx][intZ]);
				SetPlayerCameraLookAt(playerid, HouseInt[idx][intX] - 100.0, HouseInt[idx][intY] - 100.0, HouseInt[idx][intZ] - 100.0);
				SetCameraBehindPlayer(playerid);
				format(temp, sizeof(temp), "~n~~n~~n~~n~~n~~n~~n~~n~~g~price: ~w~$%i", HouseInt[idx][intPrice]);
				GameTextForPlayer(playerid, temp, 5000, 6);
				ShowMenuForPlayer(IntMenu, playerid);
				return 0;
			}
			case 2:
			{
				new idx = GetPVarInt(playerid, "SelectedItem");
				format(dialog, sizeof dialog, "Цена интерьера:\t$%i\nВы точно хотите купить этот интерьер?", HouseInt[idx][intPrice]);
				SPD(playerid, D_HMENU+11, 0, "[House Menu] > Интерьер", dialog,  "ДА", "НЕТ");
				return 0;
			}
		}
		return 1;
	}
	
	else if(current == SAInteriorsMenu) {
		switch(row) {
			case 0 : {
				new i = GetPVarInt(playerid, "SelectedItem"); i ++;
				if(i >= sizeof(SAInteriors)) i = 0;
				
				Rac::SetPlayerPos(playerid, SAInteriors[i][iX], SAInteriors[i][iY], SAInteriors[i][iZ]);
				Rac::SetPlayerInterior(playerid, SAInteriors[i][iI]);
				Rac::SetPlayerVirtualWorld(playerid, 100+playerid);
				SetPVarInt(playerid, "SelectedItem",i);
				format(temp, sizeof temp, "~n~~n~~n~~n~~n~~n~~n~~n~~g~%s(id:%i)", SAInteriors[i][int_Name], i);
				GameTextForPlayer(playerid, temp, 5000, 6);
				ShowMenuForPlayer(SAInteriorsMenu, playerid);
			}
			
			case 1 : {
				new i = GetPVarInt(playerid, "SelectedItem"); i --;
				if(i < 0) i = sizeof(SAInteriors)-1;
				
				Rac::SetPlayerPos(playerid, SAInteriors[i][iX], SAInteriors[i][iY], SAInteriors[i][iZ]);
				Rac::SetPlayerInterior(playerid, SAInteriors[i][iI]);
				Rac::SetPlayerVirtualWorld(playerid, 100+playerid);
				format(temp, sizeof temp, "~n~~n~~n~~n~~n~~n~~n~~n~~g~%s(id:%i)", SAInteriors[i][int_Name], i);
				GameTextForPlayer(playerid, temp, 5000, 6);
				SetPVarInt(playerid, "SelectedItem",i);
				ShowMenuForPlayer(SAInteriorsMenu, playerid);
			}
			
			case 2 : {
				Pl::setSpawnInfo(playerid);
				Rac::SpawnPlayer(playerid);
			}
		}
	}
	
//===================== Пролапс ================================
	else if(current == ClothesMenu) {
		switch(row) {
			case 0 : {
				skin::goto(GetFracID(playerid), skin::next, SelectCharPlace[playerid], ChosenSkin[playerid]);
				SetPlayerSkin(playerid, ChosenSkin[playerid]);
				ShowMenuForPlayer(ClothesMenu, playerid);
			}
			
			case 1 : {
				skin::goto(GetFracID(playerid), skin::prev, SelectCharPlace[playerid], ChosenSkin[playerid]);		
				SetPlayerSkin(playerid, ChosenSkin[playerid]); ShowMenuForPlayer(ClothesMenu, playerid);
			}
			
			case 2 : {
				if(Pl::Info[playerid][pLocal] != 0) {
					Rac::SetPlayerVirtualWorld(playerid, BizzInfo[(Pl::Info[playerid][pLocal]/99)][bVirtual]);
				}
				Pl::Info[playerid][pChar] = ChosenSkin[playerid];
				Pl::setSpawnInfo(playerid);
				SetPlayerSkin(playerid, ChosenSkin[playerid]);
				ChosenSkin[playerid] = 0;
				SelectCharPlace[playerid] = 0;
				Rac::TogglePlayerControllable(playerid, 1);
				SetCameraBehindPlayer(playerid);
		    }
		}
	}

	else if(current == SkinMenu) {
		switch(row) {
			case 0 : {
				skin::goto(99+Pl::Info[playerid][pSex], skin::next, SelectCharPlace[playerid], ChosenSkin[playerid]);
				SetPlayerSkin(playerid, ChosenSkin[playerid]);
				ShowMenuForPlayer(SkinMenu, playerid);
			}

			case 1 : {
				skin::goto(99+Pl::Info[playerid][pSex], skin::prev, SelectCharPlace[playerid], ChosenSkin[playerid]);
				SetPlayerSkin(playerid, ChosenSkin[playerid]);
				ShowMenuForPlayer(SkinMenu, playerid);
			}
			
			case 2 : {
				ChosenSkin[playerid] = 0;
				MedicBill[playerid] = false;
				PlayerLogged{playerid} = true;
				Pl::Info[playerid][pReg] = 1;
				Pl::Info[playerid][pCarLic] = 1;
				Pl::Info[playerid][pGunLic] = 1;
				Pl::Info[playerid][pFlyLic] = 1;
				Pl::Info[playerid][pBoatLic] = 1;
				SelectCharPlace[playerid] = 0;
				Pl::Info[playerid][pChar] = GetPlayerSkin(playerid);
				
				GiveBankMoney(playerid, 10000);
				Rac::GivePlayerMoney(playerid, 5000);
				Rac::TogglePlayerControllable(playerid, 1);
				updatePlayerData(playerid);
				
				format(temp, sizeof temp, "* %s (ID: %i) прокрался(ась) на ..::[RP]GrandWorld::.. [RUS]", GetName(playerid), playerid);
				sendToLog(COLOR_GREY, temp);
				
				Pl::setSpawnInfo(playerid);
				Rac::SpawnPlayer(playerid);

				Send(playerid, COLOR_LIGHTGREEN, "Добро пожаловать на ..::[RP]GrandWorld::.. [RUS]");
			}
		}
	}
	
	else if(current == PizaMenu) {
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(Rac::GetPlayerMoney(playerid) >= PizzaInfo[row][pizza_price]) {
			if(health < 100.0) {
				Rac::GivePlayerHealth(playerid, PizzaInfo[row][pizza_hp], 100.0);
				GetPlayerName(playerid, plname, 24);
				format(temp, sizeof temp, "* %s купил(а) %s.", plname, PizzaInfo[row][piName]);
				Rac::GivePlayerMoney(playerid, -PizzaInfo[row][pizza_price]);
				ProxDetector(10.0, playerid, temp, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(temp, sizeof temp, "~g~+%.1f HP", PizzaInfo[row][pizza_hp]);
				GameTextForPlayer(playerid, temp, 5000, 1);
				format(temp, sizeof temp, "* %.1f", health);
				Send(playerid, COLOR_PURPLE, temp);
				Rac::TogglePlayerControllable(playerid,0);
				ShowMenuForPlayer(Menu:PizaMenu, playerid);
			} else {
				Send(playerid, COLOR_PURPLE, "* Вы сыты!");
				Rac::TogglePlayerControllable(playerid,1);
			}
		} else {
			Send(playerid, COLOR_PURPLE, "* У Вас нет столько денег!");
			Rac::TogglePlayerControllable(playerid,1);
		}
	}
	
	else if(current == BurgerMenu) {
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(Rac::GetPlayerMoney(playerid) >= BurgerInfo[row][bPrice]) {
			if(health < 100.0) {
				Rac::GivePlayerHealth(playerid, BurgerInfo[row][bHP], 100.0);
				GetPlayerName(playerid, plname, 24);
				format(temp, sizeof temp, "* %s купил(а) %s.", plname, BurgerInfo[row][bName]);
				Rac::GivePlayerMoney(playerid, -BurgerInfo[row][bPrice]);
				ProxDetector(10.0, playerid, temp, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(temp, sizeof temp, "~g~+%.1f HP", BurgerInfo[row][bHP]);
				GameTextForPlayer(playerid, temp, 5000, 1);
				format(temp, sizeof temp, "* %.1f", health);
				Send(playerid, COLOR_PURPLE, temp);
				Rac::TogglePlayerControllable(playerid,0);
				ShowMenuForPlayer(BurgerMenu, playerid);
			} else {
				Send(playerid, COLOR_PURPLE, "* Вы сыты!");
				Rac::TogglePlayerControllable(playerid,1);
			}
		} else {
			Send(playerid, COLOR_PURPLE, "* У Вас нет столько денег!");
			Rac::TogglePlayerControllable(playerid,1);
		}
	}
	
	else if(current == BarMenu) {
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(Rac::GetPlayerMoney(playerid) >= DrinkInfo[row][dPrice]) {
			if(strcmp(DrinkInfo[row][dName], "Cigarette", true) == 0) {
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				Rac::TogglePlayerControllable(playerid,1);
			
			} else if(health < 160.0) {
				Rac::GivePlayerHealth(playerid, DrinkInfo[row][dHP], 160.0);
				Rac::GivePlayerMoney(playerid, -DrinkInfo[row][dPrice]);

				if(GetPlayerDrunkLevel(playerid) < 20000 && DrinkInfo[row][dDrunk]) {
					SetPlayerDrunkLevel(playerid,GetPlayerDrunkLevel(playerid)+1000);
					Pl::Drunk[playerid] += DrinkInfo[row][dDrunk];
				}
				
				switch(row) {
					case 0..3   : SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
					case 4..7   : SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
					case 8..10  : SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
					default		: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				}
				
				GetPlayerName(playerid, plname, 24);
				format(temp, sizeof temp, "* %s выпил(а) %s.", plname, DrinkInfo[row][dName]);
				ProxDetector(10.0, playerid, temp, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				
				format(temp, sizeof temp, "~g~+%.1f HP", DrinkInfo[row][dHP]);
				GameTextForPlayer(playerid, temp, 5000, 1);
				
				format(temp, sizeof temp, "* %.1f", health);
				Send(playerid, COLOR_PURPLE, temp);
				
				Rac::TogglePlayerControllable(playerid,0);
				ShowMenuForPlayer(BarMenu, playerid);
			} else {
				Send(playerid, COLOR_PURPLE, "* Бармен отказывается вам наливать!");
				Rac::TogglePlayerControllable(playerid,1);
			}
		} else {
			Send(playerid, COLOR_PURPLE, "* У Вас нет столько денег!");
			Rac::TogglePlayerControllable(playerid,1);
		}
	}
	
	else if(current == HitmanMenu) {
		if(Rac::GetPlayerMoney(playerid) >= HitmanAmmo[row][gPrice]) {
			if(Pl::Info[playerid][pRank] >= HitmanAmmo[row][gRank]) {
				Rac::GivePlayerMoney(playerid, -HitmanAmmo[row][gPrice]);
				Rac::GivePlayerWeapon(playerid, HitmanAmmo[row][gID], HitmanAmmo[row][gAmmo]);
				format(src, sizeof(src), "~r~-$%i", HitmanAmmo[row][gPrice]);
				GameTextForPlayer(playerid, src, 3000, 1);
				Rac::TogglePlayerControllable(playerid,0);
				ShowMenuForPlayer(HitmanMenu, playerid);
			} else {
				Send(playerid, COLOR_GREY, "* Вам не подходит это оружие!");
				Rac::TogglePlayerControllable(playerid, 1);
			}
		} else {
			Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
			Rac::TogglePlayerControllable(playerid, 1);
		}
	}
	
	else if(current == Ammu1Menu) {
		new bidx = (Pl::Info[playerid][pLocal]/99);
		if(Rac::GetPlayerMoney(playerid) >= Ammu1Info[row][gPrice]) {
			Rac::GivePlayerMoney(playerid, -Ammu1Info[row][gPrice]);
			BizzInfo[bidx][bTill] += Ammu1Info[row][gPrice];
			BizzInfo[bidx][bProducts]--;
			Rac::GivePlayerWeapon(playerid, Ammu1Info[row][gID], Ammu1Info[row][gAmmo]);
			GetPlayerName(playerid, plname, 24);
			format(temp, sizeof temp, "* %s купил(а) %s.", plname, Ammu1Info[row][gName]);
			ProxDetector(10.0, playerid, temp, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(temp, sizeof temp, "~r~-$%i", Ammu1Info[row][gPrice]);
			GameTextForPlayer(playerid, temp, 3000, 1);
			Rac::TogglePlayerControllable(playerid,0);
			ShowMenuForPlayer(Ammu1Menu, playerid);
		} else {
			Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
			Rac::TogglePlayerControllable(playerid, 1);
		}
	}
	
	else if(current == Ammu2Menu) {
		new bidx = (Pl::Info[playerid][pLocal]/99);
		if(Rac::GetPlayerMoney(playerid) >= Ammu2Info[row][gPrice]) {
			Rac::GivePlayerMoney(playerid, -Ammu2Info[row][gPrice]);
			if(0 <= bidx < sizeof(BizzInfo)) {
				BizzInfo[bidx][bTill] += Ammu2Info[row][gPrice];
				BizzInfo[bidx][bProducts]--;
			}
			Rac::GivePlayerWeapon(playerid, Ammu2Info[row][gID], Ammu2Info[row][gAmmo]);
			GetPlayerName(playerid, plname, 24);
			format(temp, sizeof temp, "* %s купил(а) %s.", plname, Ammu2Info[row][gName]);
			ProxDetector(10.0, playerid, temp, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(temp, sizeof temp, "~r~-$%i", Ammu2Info[row][gPrice]);
			GameTextForPlayer(playerid, temp, 3000, 1);
			Rac::TogglePlayerControllable(playerid,0);
			ShowMenuForPlayer(Ammu2Menu, playerid);
		} else {
			Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
			Rac::TogglePlayerControllable(playerid, 1);
		}
	}
	
	else if(current == getweapon) {
		if(Rac::GetPlayerMoney(playerid) >= Ammu1Info[row][gPrice]) {
			Rac::GivePlayerMoney(playerid, -Ammu1Info[row][gPrice]);
			Rac::GivePlayerWeapon(playerid, Ammu1Info[row][gID], Ammu1Info[row][gAmmo]);
			format(src, sizeof(src), "~r~-$%i", Ammu1Info[row][gPrice]);
			GameTextForPlayer(playerid, src, 3000, 1);
			Rac::TogglePlayerControllable(playerid,0);
			ShowMenuForPlayer(getweapon, playerid);
		} else {
			Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
			Rac::TogglePlayerControllable(playerid, 1);
		}
	}
	
	else if(current == BuyMenu) {
		new biz = GetBizIndex(82);
		switch(row) {
			case 0 : {
				if(Rac::GetPlayerMoney(playerid) > 500) {
					new randphone = rndNum(100000,899999);
					Pl::Info[playerid][pNumber] = randphone;
					format(temp, sizeof(temp), "~r~-$%d", 500);
					GameTextForPlayer(playerid, temp, 5000, 1);
					Rac::GivePlayerMoney(playerid, -500);
					BizzInfo[biz][bTill] += 500;
					BizzInfo[biz][bProducts]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(temp, sizeof(temp), "Вы купили телефон, номер: %d", randphone);
					Send(playerid, COLOR_GRAD4, temp);
					Send(playerid, COLOR_GRAD5, "* Вы можете посмотреть свой номер, прописав /stats");
				}
			}
			
			case 1 : {
				new bidx = GetBizIndex(41);
			    if(Rac::GetPlayerMoney(playerid) > 1000) {
					Rac::GivePlayerMoney(playerid, -1000);
					BizzInfo[bidx][bTill] += 1000;
					format(temp, sizeof(temp), "~r~-$%d", 1000);
					GameTextForPlayer(playerid, temp, 5000, 1);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					new
						prize,
						symb1[10],
						symb2[10],
						symb3[10],
						randcard1 = random(10),//minimum 1000  max 9999
						randcard2 = random(10),
						randcard3 = random(10)
					;
					if(randcard1 >= 5) {
						format(symb1, sizeof(symb1), "~b~]");
						randcard1 = 1;
					} else if(randcard1 <= 4 && randcard1 >= 2) {
						format(symb1, sizeof(symb1), "~g~]");
						randcard1 = 2;
					} else if(randcard1 < 2) {
						format(symb1, sizeof(symb1), "~y~]");
						randcard1 = 3;
					}
					
					if(randcard2 >= 5) {
						format(symb2, sizeof(symb2), "~b~]");
						randcard2 = 1;
					} else if(randcard2 <= 4 && randcard2 >= 2) {
						format(symb2, sizeof(symb2), "~g~]");
						randcard2 = 2;
					} else if(randcard2 < 2) {
						format(symb2, sizeof(symb2), "~y~]");
						randcard2 = 3;
					}
					
					if(randcard3 >= 5) {
						format(symb3, sizeof(symb3), "~b~]");
						randcard3 = 1;
					} else if(randcard3 <= 4 && randcard3 >= 2) {
						format(symb3, sizeof(symb3), "~g~]");
						randcard3 = 2;
					} else if(randcard3 < 2) {
						format(symb3, sizeof(symb3), "~y~]");
						randcard3 = 3;
					}
					
					if(randcard1 == randcard2 && randcard1 == randcard3) {
						if(randcard1 > 5) prize = 2500;
						if(randcard1 <= 4 && randcard1 >= 2) prize = 1500;
						if(randcard1 < 2) prize = 500;
						Rac::GivePlayerMoney(playerid, prize); BizzInfo[bidx][bTill] -= prize;
						format(temp, sizeof(temp), "%s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
					} else {
						format(temp, sizeof(temp), "%s %s %s ~n~~n~~w~~r~$0",symb1,symb2,symb3);
					}
					GameTextForPlayer(playerid, temp, 3000, 3);
				}
			}
			
			case 2 : {
			    if(Rac::GetPlayerMoney(playerid) > 5000) {
					Rac::GivePlayerMoney(playerid, -5000);
					BizzInfo[biz][bTill] += 5000;
					BizzInfo[biz][bProducts]--;
					format(temp, sizeof(temp), "~r~-$%d", 5000);
					GameTextForPlayer(playerid, temp, 5000, 1);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	                Pl::Info[playerid][pPhoneBook] = 1;
					format(temp, sizeof(temp), "Вы купили телефонную книгу. Теперь можете узнать номер телефона любого игрока!");
					Send(playerid, COLOR_GRAD4, temp);
					Send(playerid, COLOR_WHITE, "Используйте: /number [id/name].");
				}
			}
			
			case 3 : {
			    if(Rac::GetPlayerMoney(playerid) > 500) {
					gDice[playerid] = true;
					Rac::GivePlayerMoney(playerid, -500);
					BizzInfo[biz][bTill] += 500;
					BizzInfo[biz][bProducts]--;
					format(temp, sizeof(temp), "~r~-$%d", 500);
					GameTextForPlayer(playerid, temp, 5000, 1);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(temp, sizeof(temp), "Вы купили кубики.");
					Send(playerid, COLOR_GRAD4, temp);
					Send(playerid, COLOR_WHITE, "Используйте: /dice");
				}
			}
			
			case 4 : {
			    if(Rac::GetPlayerMoney(playerid) > 5000) {
					if(gLastCar[playerid] != INVALID_VEHICLE_ID) {
						Rac::GivePlayerMoney(playerid, -5000);
						BizzInfo[biz][bTill] += 5000;
						BizzInfo[biz][bProducts]--;
						format(temp, sizeof(temp), "~r~-$%d", 5000);
						GameTextForPlayer(playerid, temp, 5000, 1);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						HireCar[playerid] = gLastCar[playerid];
						format(temp, sizeof(temp), "Вы купили ключи для тачки.");
						Send(playerid, COLOR_GRAD4, temp);
					}
					else Send(playerid, COLOR_WHITE, "У Вас нет транспортного средства!");
				}
			}
			
			case 5 : {
			    if(Rac::GetPlayerMoney(playerid) > 49) {
					Condom[playerid] ++;
					BizzInfo[biz][bTill] += 50;
					BizzInfo[biz][bProducts]--;
					Rac::GivePlayerMoney(playerid,-50);
					format(temp, sizeof(temp), "~r~-$%d", 500);
					GameTextForPlayer(playerid, temp, 5000, 1);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(temp, sizeof(temp), "Вы купили гандон!");
					Send(playerid, COLOR_GRAD4, temp);
				}
			}
			
			case 6 : {
			    if(Rac::GetPlayerMoney(playerid) > 2500) {
					Pl::Info[playerid][pCDPlayer] = 1;
					Rac::GivePlayerMoney(playerid, -2500);
					BizzInfo[biz][bTill] += 2500;
					BizzInfo[biz][bProducts]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(temp, sizeof(temp), "~r~-$%d", 2500);
					GameTextForPlayer(playerid, temp, 5000, 1);
					format(temp, sizeof(temp), "* %s купил(а) CD-Player.", GetName(playerid));
					ProxDetector(10.0, playerid, temp, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Send(playerid, COLOR_WHITE, "Используйте: /music");
				}
			}
		}
		ShowMenuForPlayer(BuyMenu, playerid);
		Rac::TogglePlayerControllable(playerid, 0);
	}
	return 1;
}

public OnPlayerExitedMenu(playerid) {
	new Menu:current = GetPlayerMenu(playerid);
	if(current == IntMenu) {
		SPD(playerid, D_HMENU+12, 0, "[House Menu] > Интерьер", "Вы хотите выйти от сюда?", "Выйти", "Отмена");
	} else if(current == SkinMenu) {
		SPD(playerid, D_NONE, 0, "WARNING", "Вы должны выбрать скин!", "OK", "");
		ShowMenuForPlayer(SkinMenu, playerid);
	} else if(current == ClothesMenu) {
		if(Pl::Info[playerid][pLocal] != 0) {
			Rac::SetPlayerVirtualWorld(playerid, BizzInfo[(Pl::Info[playerid][pLocal] / 99)][bVirtual]);
		}
		SetCameraBehindPlayer(playerid);
		SetPlayerSkin(playerid, Pl::Info[playerid][pChar]);
		Rac::TogglePlayerControllable(playerid, 1);
	} else {
		Rac::TogglePlayerControllable(playerid, 1);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {
	if(gCarLock{vehicleid} && !ispassenger) return Rac::Kick(playerid, "NOP SetVehicleParams");
	
	if(GetVehicleModel(vehicleid) == 519 && ispassenger) {
		Pl::CarInt[playerid] = vehicleid;
		Rac::SetPlayerPos(playerid, 1.8050,23.2547,1199.5938);
		Rac::SetPlayerVirtualWorld(playerid, vehicleid);
		SetPlayerFacingAngle(playerid, 0);
		SetCameraBehindPlayer(playerid);
		Rac::SetPlayerInterior(playerid, 1);
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid) {
//	Rac::TogglePlayerControllable(playerid, 0);
//	SetTimerEx("AC_TogglePlayerControllable", 2000, false, "ii", playerid, 1);
	GetPlayerPos(playerid, posx, posy, posz);
	Streamer_UpdateEx(playerid, posx, posy, posz, GetPlayerVirtualWorld(playerid), newinteriorid);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate) {
	if((newstate == 2 && oldstate == 2) || (newstate == 3 && oldstate == 2) || (newstate == 2 && oldstate == 3)) {
		return Rac::Kick(playerid, "AutoDrive");
	}
	
	if(Pl::isLogged(playerid)) {
		new
			fracid = GetFracID(playerid),
			vehid = GetPlayerVehicleID(playerid),
			oldvehid = gLastCar[playerid]
		;
		switch(newstate) {
			case PLAYER_STATE_ONFOOT : {
				Pt::Hide(playerid, Td::Fuel[playerid]);
				Pt::Hide(playerid, Td::Name[playerid]);
				Pt::Hide(playerid, Td::Status[playerid]);
				Pt::SetString(playerid, Td::Name[playerid], "_");
						
				if(oldvehid != INVALID_VEHICLE_ID) {
					if(TransportDuty[playerid] > 0) {
						if(TransportDuty[playerid] == 1) TaxiDrivers -= 1;
						else if(TransportDuty[playerid] == 2) BusDrivers -= 1;
						TransportDuty[playerid] = 0;
						Send(playerid, COLOR_LIGHTBLUE, "* Вы теперь не на дежурстве!");
						Rac::GivePlayerMoney(playerid, TransportMoney[playerid]);
						TransportValue[playerid] = 0;
						TransportMoney[playerid] = 0;
						DestroyDynamic3DTextLabel(AttachText[oldvehid]);
						DestroyDynamicRaceCP(checkpointb[playerid]);
						MG2[playerid] = 0;
					}
					
					if(AutoInfo[oldvehid][aRadio]) {
						StopAudioStreamForPlayer(playerid);
					}
					Iter_Remove(vehiclePassengers[oldvehid], playerid);
					
					GetVehicleParamsEx(oldvehid, engine, light, alarm, doors, bonnet, boot, objective);
					if(objective > 0) {
						new count;
						foreach(new i: vehiclePassengers[oldvehid]) {
							if(Bl::Info[i][Bl::Finder] != INVALID_PLAYER_ID) {
								count ++;
							}
						}
						if(!count) {
							SetVehicleParamsEx(oldvehid, engine, light, alarm, doors, bonnet, boot, false);
						}
					}
				}
				
				new driver = TransportDriver[playerid];
				if(TransportCost[playerid] > 0 && driver != INVALID_PLAYER_ID) {
					if(IsPlayerConnected(driver)) {
						TransportMoney[driver] += TransportCost[playerid];
						TransportTime[driver] = 0;
						TransportCost[driver] = 0;
						format(src, sizeof(src), "~w~The ride cost~n~~r~$%d",TransportCost[playerid]);
						GameTextForPlayer(playerid, src, 5000, 1);
						format(src, sizeof(src), "~w~Passenger left the car~n~~g~Earned $%d",TransportCost[playerid]);
						GameTextForPlayer(driver, src, 5000, 1);
						Rac::GivePlayerMoney(playerid, -TransportCost[playerid]);
						TransportCost[playerid] = 0;
						TransportTime[playerid] = 0;
						TransportDriver[playerid] = INVALID_PLAYER_ID;
					}
				}
				
				if(Bl::Info[playerid][Bl::Finder] != INVALID_PLAYER_ID) {
					GetPlayerPos(playerid, posx, posy, posz);
					Bl::Info[Bl::Info[playerid][Bl::Finder]][Bl::Marker] = CreateDynamicCP(posx, posy, posz, 1.6, -1, -1, Bl::Info[playerid][Bl::Finder], 200.0);
					foreach(new i: inStreamPlayers[playerid]) {
						if(Bl::Info[i][Bl::Observe] == playerid){
							Bl::Info[i][Bl::Marker] = CreateDynamicCP(posx, posy, posz, 1.6, -1, -1, i, 200.0);
						}
					}
				}
			}

			case PLAYER_STATE_DRIVER : {
				new seatid = GetPlayerVehicleSeat(playerid);
				new model = GetVehicleModel(vehid);
				if(seatid != 128) {
					if(!seatid) {
						if(!(400 <= model <= 611) || MaxPassengers[model - 400 >>> 3] >>> ((model - 400 & 7) << 2) & 0xF == 15) {
							return Rac::Kick(playerid, "Crasher");
						}
					} else {
						return Rac::Kick(playerid, "Crasher");
					}
				}
				
				new vehtype = GetVehicleType(model);
				switch(vehtype) {
					case VEHICLE_TYPE_BOAT : {
						if(Pl::Info[playerid][pBoatLic] < 1) {
							Send(playerid, COLOR_GREY, "* У Вас нет лицензии на водный транспорт!");
							return Rac::RemovePlayerFromVehicle(playerid);
						}
					}
					
					case VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_HELICOPTER : {
						if(Pl::Info[playerid][pFlyLic] < 1) {
							if(!TakingLesson[playerid]) {
								Send(playerid, COLOR_GREY, "* У Вас нет лицензии на воздушный транспорт!");
								return Rac::RemovePlayerFromVehicle(playerid);
							}
						}
					}
					
					case VEHICLE_TYPE_AUTO : {
						if(Pl::Info[playerid][pCarLic] < 1) {
							if(!TakingLesson[playerid]) {
								Send(playerid, COLOR_GREY, "* У Вас нет лицензии на легковой транспорт!");
								return Rac::RemovePlayerFromVehicle(playerid);
							}
						}
					}
				}

				new fc_frac, fc_rank;
				if(Fc::GetInfo(vehid, "fr", fc_frac, fc_rank)) {
					if(fc_frac == 11) {
						if(TakingLesson[playerid]) {
						} else {
							if(fc_frac == fracid) {
								if(fc_rank > Pl::Info[playerid][pRank]) {
									format(src, sizeof(src), "* Этот транспорт доступен с ранга %s[%i]", RankInfo[fc_frac][fc_rank], fc_rank);
									Send(playerid, COLOR_GREY, src);
									return Rac::RemovePlayerFromVehicle(playerid);
								}
							} else {
								format(src, sizeof(src), "* Транспорт зареверзирован (%s)", FracInfo[ fc_frac ][ fName ]);
								Send(playerid,COLOR_GREY, src);
								return Rac::RemovePlayerFromVehicle(playerid);
							}
						}
					} else if(fc_frac == fracid) {
						if(fc_rank > Pl::Info[playerid][pRank]) {
							format(src, sizeof(src), "* Этот транспорт доступен с ранга %s[%i]", RankInfo[fc_frac][fc_rank], fc_rank);
							Send(playerid, COLOR_GREY, src);
							return Rac::RemovePlayerFromVehicle(playerid);
						}
					} else {
						format(src, sizeof(src), "* Транспорт зареверзирован (%s)", FracInfo[ fc_frac ][ fName ]);
						Send(playerid,COLOR_GREY, src);
						return Rac::RemovePlayerFromVehicle(playerid);
					}
				}
				
				new vehjob;
				if(GetVehInfo(vehid, "j", vehjob)) {
					if(vehjob) {
						if(Pl::Info[playerid][pJob] != vehjob && !EditMode[playerid]) {
							static const jnames[][] = {
								"-", "-", "-", "-", "-", "-",
								"Механики", "-", "-",
								"Автобусники",
								"Дальнобойщики"
							};
							format(src, sizeof(src), "* Транспорт зареверзирован (%s)", jnames[vehjob]);
							Send(playerid, COLOR_GREY, src);
							return Rac::RemovePlayerFromVehicle(playerid);
						} else {
							switch(vehjob) {
								case JOB_MECHANIC : {
									Send(playerid, COLOR_YELLOW, "Используйте /at чтобы взять на буксир автомобиль, и /dt чтобы отцепить его.");
								}
							}
						}
					}
				}

				if(IsACompTruck(vehid)) {
					if(HireCar[playerid] == vehid) {
						Send(playerid, COLOR_GREEN, "* Вы можете доставлять продукты в бизнесы");
						Send(playerid, COLOR_GREEN, "* Команды доставки /buyprods /sellprods");
					} else {
						format(src, sizeof(src),"Стоимость: $%i\nВы хотите арендовать грузовик?", HireCost(vehid));
						SPD(playerid, D_RENTCAR+1, 0, "Доставка продуктов", src, "ДА", "НЕТ");
						Rac::TogglePlayerControllable(playerid, 0);
					}
				} else if(rentcar[0] <= vehid <= rentcar[1]) {
					if(HireCar[playerid] != vehid) {
						format(src, sizeof(src),"Стоимость: $%i\nЭтот транспорт сдан в аренду!", (HireCost(vehid) / 5));
						SPD(playerid, D_RENTCAR, 0,"Аренда транспорта", src, "Арендовать","Отмена");
						Rac::TogglePlayerControllable(playerid, 0);
					}
				}

				if(Benzin{vehid} <= 15) {
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					format(src, sizeof(src), "~w~Benzin: ~r~%d%", Benzin{vehid});
					if(Benzin{vehid} <= 0) GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~HET ЂEH€…HA", 5000, 5);
				} else {
					format(src, sizeof(src), "~w~Benzin: ~b~%d%", Benzin{vehid});
				}
				Pt::SetString(playerid, Td::Fuel[playerid], src);
				
				if(Rac::GetVehicleHealth(vehid) < 450.0) {
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~C‡OMAHO", 7000, 5);
				}

				if(!isEngined{vehid}) {
					switch(vehtype) {
						case VEHICLE_TYPE_VELLO : {
							GetVehicleParamsEx(vehid,engine,light,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(vehid, 1, 0, 0, 0, 0, 0, objective);
						}
						case VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_HELICOPTER : { 
							GetVehicleParamsEx(vehid,engine,light,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(vehid, 1,light,alarm,doors,bonnet,boot,objective);
						}
						case VEHICLE_TYPE_AUTO, VEHICLE_TYPE_BIKE : {
							Send(playerid, COLOR_FADE1, "* Нажмите ALT, чтобы завести двигатель!");
						}
					}
				}
				
				switch(fc_frac) {
					case 17 : {
						if(model == 482) {
							format(src, sizeof(src), "* Материалы: %i/%i", AutoInfo[vehid][aMats], AutoInfo[vehid][aMaxMats]);
							Send(playerid, COLOR_GREEN, src); Send(playerid, COLOR_GREEN, "* Команды доставки /buymats /sellmats");
						}
					}
					
					case 20 : {
						switch(vehtype) {
							case VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AUTO : {
								format(src, sizeof(src), "* Мак: %i/%i", AutoInfo[vehid][aDrugs], AutoInfo[vehid][aMaxDrugs]);
								Send(playerid, COLOR_GREEN, src);
							}
						}
					}
				}
				
				switch(vehtype) {
					case VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AUTO : {
						Pt::Show(playerid, Td::Fuel[playerid]);
						Pt::Show(playerid, Td::Status[playerid]);
					}
					
					case VEHICLE_TYPE_BOAT : {
						Pt::Show(playerid, Td::Status[playerid]);
					}
				}
				Pt::Show(playerid, Td::Name[playerid]);
				Iter_Add(vehiclePassengers[vehid], playerid);
				gLastCar[playerid] = vehid;
				
				if(AutoInfo[vehid][aRadio]) {
					PlayAudioStreamForPlayer(playerid, RadioInfo[AutoInfo[vehid][aRadio]][rUrl]);
				}
				
				if(Bl::Info[playerid][Bl::Finder] != INVALID_PLAYER_ID) {
					DestroyDynamicCP(Bl::Info[Bl::Info[playerid][Bl::Finder]][Bl::Marker]);
					foreach(new i: inStreamPlayers[playerid]) {
						if(Bl::Info[i][Bl::Observe] == playerid){
							DestroyDynamicCP(Bl::Info[i][Bl::Marker]);
						}
					}
					GetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, objective);
					if(objective < 1) {
						SetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, true);
					}
				}
			}

			case PLAYER_STATE_PASSENGER : {
				foreach(new driver : vehiclePassengers[vehid]) {
					if(TransportDuty[driver] && Rac::GetPlayerState(driver) == 2) {
						if(TransportValue[driver] > Rac::GetPlayerMoney(playerid)) {
							format(temp, sizeof temp, "Вы нуждаетесь $%i для того чтобы сесть.", TransportValue[driver]);
							Send(playerid, COLOR_LIGHTBLUE, temp);
							Rac::RemovePlayerFromVehicle(playerid);
						} else {
							switch(TransportDuty[driver]) {
								case 1 : {
									TransportTime[driver] = 1;
									TransportTime[playerid] = 1;
									TransportCost[playerid] = TransportValue[driver];
									TransportCost[driver] = TransportValue[driver];
									TransportDriver[playerid] = driver;
									
									format(temp, sizeof temp, " Вы заплатили $%i Таксисту.", TransportValue[driver]);
									Send(playerid, COLOR_LIGHTBLUE, temp);
									format(temp, sizeof temp, " Пассажир %s вошел в ваше Такси.", GetName(playerid));
									Send(driver, COLOR_LIGHTBLUE, temp);
								}
								
								case 2 : {
									format(temp, sizeof temp, " Вы заплатили $%d водителю автобуса.", TransportValue[driver]);
									Send(playerid, COLOR_LIGHTBLUE, temp);
									format(temp, sizeof temp, " Пассажир %s вошел в ваш автобус.", GetName(playerid));
									Send(driver, COLOR_LIGHTBLUE, temp);
								}
							}
							Rac::GivePlayerMoney(playerid, -TransportValue[driver]);
							TransportMoney[driver] += TransportValue[driver];
						}
					}
				}
				
				if(AutoInfo[vehid][aRadio]) {
					PlayAudioStreamForPlayer(playerid, RadioInfo[AutoInfo[vehid][aRadio]][rUrl]);
				}
				
				Iter_Add(vehiclePassengers[vehid], playerid);
				gLastCar[playerid] = vehid;
				
				if(Bl::Info[playerid][Bl::Finder] != INVALID_PLAYER_ID) {
					DestroyDynamicCP(Bl::Info[Bl::Info[playerid][Bl::Finder]][Bl::Marker]);
					foreach(new i: inStreamPlayers[playerid]) {
						if(Bl::Info[i][Bl::Observe] == playerid){
							DestroyDynamicCP(Bl::Info[i][Bl::Marker]);
						}
					}
					GetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, objective);
					if(objective < 1) {
						SetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, true);
					}
				}
			}
		}
	}

	return 1;
}

stock HireCost(carid) {
	if(1 <= carid <= MAX_VEHICLES) {
		new model = GetVehicleModel(carid);
		
		switch(model) {
			case 414 : return 1000;
			case 440 : return 900;
			case 456 : return 1500;
			case 499 : return 1100;
		}

		for(new i; i < sizeof carsA; i++) if(model == carsA[i][0]) return carsA[i][1];
		for(new i; i < sizeof carsB; i++) if(model == carsB[i][0]) return carsB[i][1];
		for(new i; i < sizeof carsC; i++) if(model == carsC[i][0]) return carsC[i][1];
		for(new i; i < sizeof carsD; i++) if(model == carsD[i][0]) return carsD[i][1];
		for(new i; i < sizeof carsE; i++) if(model == carsE[i][0]) return carsE[i][1];

		return 5000;
	}
	return 0;
}

stock ModelCost(model) {
	for(new i; i < sizeof carsA; i++) if(model == carsA[i][0]) return carsA[i][1];
	for(new i; i < sizeof carsB; i++) if(model == carsB[i][0]) return carsB[i][1];
	for(new i; i < sizeof carsC; i++) if(model == carsC[i][0]) return carsC[i][1];
	for(new i; i < sizeof carsD; i++) if(model == carsD[i][0]) return carsD[i][1];
	for(new i; i < sizeof carsE; i++) if(model == carsE[i][0]) return carsE[i][1];
	return 50000;
}

stock ToggleVehicleDoor(carid, bool:toggle) {
	if(1 <= carid <= MAX_VEHICLES) {
		gCarLock{carid} = !toggle;
		GetVehicleParamsEx(carid, engine, light, alarm, doors , bonnet, boot, objective);
		SetVehicleParamsEx(carid, engine, light, alarm, gCarLock{carid}, bonnet, boot, objective);
		foreach(new i: Player) SetVehicleParamsForPlayer(carid, i, 0, gCarLock{carid});
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid) {
	if(Pl::isLogged(playerid)) {
		Pl::setSpawnInfo(playerid);
		Rac::SpawnPlayer(playerid);
	} else {
		new pos = random(sizeof EnterPos);
		Pl::Info[playerid][pCamPos] = pos;
		SetSpawnInfo(playerid, 1, 1, EnterPos[pos][p_pos][0], EnterPos[pos][p_pos][1], EnterPos[pos][p_pos][2], EnterPos[pos][p_pos][3],0,0,0,0,0,0);
		PlayerPlaySound(playerid, EnterPos[pos][musicid], 0.0, 0.0, 0.0);
		Rac::SpawnPlayer(playerid);
	}

	return 1;
}

public OnPlayerRequestSpawn(playerid) return 0;

stock SetPlayerCriminal(playerid, declare, reason[]) {
	if(Pl::isLogged(playerid)) {
		new turned[24], turner[24];
		GetPlayerName(playerid, turned, sizeof(turned));
		if(Pl::isLogged(declare)) {
			GetPlayerName(declare, turner, sizeof(turner));
		} else {
			strmid(turner, "*Неизвестно", 0, 38, sizeof turner);
		}
		WantedTime[playerid] = 180;
		SetPlayerWL(playerid, ++Pl::Info[playerid][pWantedL]);
		strmid(Pl::Crime[playerid][pVictim], turner, 0, strlen(turner), 255);
		strmid(Pl::Crime[playerid][pAccusing], reason, 0, strlen(reason), 255);
		strmid(Pl::Crime[playerid][pAccused], turner, 0, strlen(turner), 255);
		format(src, sizeof(src), "* Вы совершили преступление! ( %s ); Обвинитель: %s",reason,turner);
		Send(playerid, COLOR_LIGHTRED, src);
		if(Pl::Info[playerid][pWantedL] > 0) {
			format(src, sizeof(src), "* Ваш уровень розыска: %i", Pl::Info[playerid][pWantedL]);
			Send(playerid, COLOR_YELLOW, src);
			if(IsPlayerConnected(ReturnUser(turner))) {
				format(src, sizeof(src), "%s(рация):ПРЕСТУПЛЕНИЕ! %s. Обвиняемый: %s", turner, reason, turned);
				sendToFrac(1, COLOR_RADIO, src);
			}
		}
		Pl::Info[playerid][pCrimes] += 1;
	}
	return 1;
}

stock SetPlayerFree(playerid, declare, reason[]) {
	if(Pl::isLogged(playerid)) {
		ClearCrime(playerid);
		format(src, sizeof(src), "*SMS: %s, поскольку Вы %s, Вы больше не преступник. Отправитель: [RP]GrandWorld(555)", GetName(declare), reason);
		Send(playerid, COLOR_YELLOW, src);
		format(src, sizeof(src), "ШТАБ - КВАРТИРА: Офицер %s посадил на нары", GetName(playerid));
		sendToFrac(1, COLOR_DBLUE, src);
	}
}

stock Update(i) {
	SetPlayerScore(i, Pl::Info[i][pLevel]);
	
	if(Wait{i} > 0) Wait{i}--;
	if(JobWaitTime[i] > 0) JobWaitTime[i]--;
	if(Pl::Info[i][pReport] > 0) Pl::Info[i][pReport]--;
	
	Pl::Info[i][pUpdate] ++;
	if(Pl::Info[i][pUpdate] >= (60*4)) {
		Pl::Info[i][pUpdate] = 0;

		if(Pl::Drunk[i] > 0) {
			Pl::Drunk[i] = 0;
			Pl::DrunkTime[i] = 0;
			SetPlayerDrunkLevel(i, 0);
			GameTextForPlayer(i, "~p~Drunk effect~n~~w~Gone", 4500, 1);
		}

		if(Pl::Info[i][pPayDay] < 9) Pl::Info[i][pPayDay]++;

		if(STDPlayer[i] == 1)
		{
			Rac::GivePlayerHealth(i, -5.0);
			Send(i, COLOR_LIGHTBLUE, "* Потеряно 4 здоровья.");
		}

		else if(STDPlayer[i] == 2)
		{
			Rac::GivePlayerHealth(i, -12.0);
			Send(i, COLOR_LIGHTBLUE, "* Потеряно 8 здоровья.");
		}

		else if(STDPlayer[i] == 3)
		{
			Rac::GivePlayerHealth(i, -20.0);
			Send(i, COLOR_LIGHTBLUE, "* Потеряно 12 здоровья.");
		}

		if(Rac::GetPlayerMoney(i) < 0) {
			if(!MoneyMessage[i]) {
				MoneyMessage[i] = true;
				format(temp, sizeof(temp), "* У Вас задолжность штату, вы должны отдать сумму: $%d или сядете в тюрьму!", Rac::GetPlayerMoney(i));
				Send(i, COLOR_LIGHTRED, temp);
			}
		} else if(Pl::Info[i][pBank] < 0) {
			if(!MoneyMessage[i]) {
				MoneyMessage[i] = true;
				format(temp, sizeof(temp), "* У Вас задолжность банку, вы должны отдать сумму: $%d или сядете в тюрьму!", Pl::Info[i][pBank]);
				Send(i, COLOR_LIGHTRED, temp);
			}
		} else {
			MoneyMessage[i] = true;
		}
		
		updatePlayerData(i);
		Td::ShowForPlayer(i, Logo[0]);
		Td::ShowForPlayer(i, Time);
	}
	
	if(Fixr{i} != 0) {
		Fixr{i} --;
		if(Fixr{i} == 0) {
			Fixr{i} = 0;
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
	
	if(AnimClear[i] != 0) {
		AnimClear[i] --;
		if(AnimClear[i] == 0) {
			ApplyAnimation(i,"PED","facgum",4.1,0,1,1,1,1);
		}
	}
	
	if(useknock[i] > 0) {
		useknock[i] --;
		if(useknock[i] == 29) {
			ApplyAnimation(i,"CARRY","crry_prtial",4.0,0,0,0,0,0);
		}
	}
	
	if(Pl::NetStats[i] != INVALID_PLAYER_ID) {
		if(Pl::isLogged(Pl::NetStats[i])) {
			GetPlayerNetworkStats(i, dialog, sizeof dialog);
			SPD(i, D_NETSTAT, 0, "Player stat", dialog, "OK", "");
		
		} else if(Pl::NetStats[i] == 999)	{
			GetNetworkStats(dialog, sizeof dialog);
			SPD(i, D_NETSTAT, 0, "Server stat", dialog, "OK", "");
		
		} else if(Pl::NetStats[ i ] == 1000) {
			Db::stat(dialog,Db::handle);
			SPD(i, D_NETSTAT, 0, "Mysql stat", dialog, "OK", "");
		
		} else {
			Pl::NetStats[i] = INVALID_PLAYER_ID;
		}
	}

	Pl::Info[i][pHunger] ++;
	if(Pl::Info[i][pHunger] >= 60) {
		Pl::Info[i][pHunger] = 0;
		if(Rac::GetPlayerHealth(i) > 5.0) {
			Rac::GivePlayerHealth(i, -1.0);
		}
	}

	if(NameChange{i} > 0) {
		NameChange{i} --;
		if(!NameChange{i}) ChangeName(i);
	}

	if(GetPlayerState(i) == PLAYER_STATE_PASSENGER) {
		SetPlayerArmedWeapon(i, 0);
	}

	if(Fell[i] > 0) {
		Fell[i] --;
		if(Fell[i] <= 0) {
			Rac::TogglePlayerControllable(i, 1);
			ApplyAnimation(i,"PED","getup",4.1,0,1,1,1,1);
		}
	}

	if(DrugIntoxic[i] > 0) {
		switch(--DrugIntoxic[i]) {
			case 0 			: SetPlayerWeather(i, 1);
			case 1..60		: SetPlayerWeather(i, 184);
			case 61..120	: SetPlayerWeather(i, 149);
			case 121..180	: SetPlayerWeather(i, 555);
			case 181..240	: SetPlayerWeather(i, 190);
			default			: SetPlayerWeather(i, 190);
		}
	}

	if(WantedTime[i] > 0 && Pl::Info[i][pWantedL] > 0) {
		WantedTime[i]--;
		if(WantedTime[i] == 0) {
			SetPlayerWL(i, Pl::Info[i][pWantedL]-1);
			if(Pl::Info[i][pWantedL] > 0) WantedTime[i] = 180;
			format(temp, sizeof(temp),"* Понижение уровня розыска, осталось звезд: %i!", Pl::Info[i][pWantedL]);
			Send(i, COLOR_LIGHTBLUE, temp);
		}
	}

	if(CellTime[i] > 0 && Pl::isLogged(Mobile[i])) {
		CellTime[i] ++;
		if(CellTime[i] == cchargetime) {
			CellTime[i] = 1;
			if(Mobile[Mobile[i]] == i) {
				if(Rac::GetPlayerMoney(i) >= callcost) {
					Rac::GivePlayerMoney(i, -callcost);
					format(temp, sizeof(temp), "~r~-$%i", callcost);
					GameTextForPlayer(i, temp, 1000, 1);
				} else {
					CellTime[i] = 0;
					Mobile[i] = INVALID_PLAYER_ID;
					if(Mobile[Mobile[i]] == i) {
						CellTime[Mobile[i]] = 0;
						Mobile[Mobile[i]] = INVALID_PLAYER_ID;
						Send(Mobile[i], COLOR_GRAD2, "Абонент положил трубку.");
						SetPlayerSpecialAction(Mobile[i],SPECIAL_ACTION_STOPUSECELLPHONE);
					}
					Send(i, COLOR_YELLOW, "* У Вас кончались деньги!");
					SetPlayerSpecialAction(i,SPECIAL_ACTION_STOPUSECELLPHONE);
				}
			}
		}
		if(Mobile[Mobile[i]] == INVALID_PLAYER_ID && CellTime[i] == 5) {
			GetPlayerName(Mobile[i], plname, 24);
			format(temp, sizeof(temp), "* %s's звонит телефон", plname);
			ProxDetector(30.0, Mobile[i], temp, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	if(TransportTime[i] > 0) {
		if(TransportTime[i] >= 40) {
			TransportTime[i] = 1;
			if(TransportDriver[i] != INVALID_PLAYER_ID) {
				if(Pl::isLogged(TransportDriver[i])) {
					if(Rac::GetPlayerMoney(i) >= TransportCost[i]) {
						TransportCost[i] += TransportValue[TransportDriver[i]];
						TransportCost[TransportDriver[i]] = TransportCost[i];
					}
				}
			}
		}
		TransportTime[i]++;
		if(Rac::GetPlayerMoney(i) >= TransportCost[i]) {
			format(temp, sizeof(temp), "~n~~n~~n~~n~~n~~n~~n~~g~cost: ~w~$%i/%i", TransportCost[i], TransportTime[i]);
			GameTextForPlayer(i, temp, 1000, 5);
			GameTextForPlayer(TransportDriver[i], temp, 1000, 5);
		} else {
			format(temp, sizeof(temp), "~n~~n~~n~~n~~n~~n~~r~Out Of Money!~n~~g~cost: ~w~$%i/%i", TransportCost[i], TransportTime[i]);
			GameTextForPlayer(i, temp, 1000, 5);
			GameTextForPlayer(TransportDriver[i], temp, 1000, 5);
		}
	}

	if(Pl::Info[i][pMutedTime] != 0) {
		Pl::Info[i][pMutedTime]--;
		if(Pl::Info[i][pMutedTime] <= 0 && Pl::Info[i][pMuted] != 0) {
			Pl::Info[i][pMuted] = 0;
			Pl::Info[i][pMutedTime] = 0;
			format(temp, sizeof(temp),"[RP]GrandWorld: %s выплюнул(а) тряпку изо рта!", GetName(i));
			SendToAll(COLOR_GREY, temp);
		}
	}

	if(UsedFind[i] != 0) UsedFind[i] --;

	if(PlayerTazeTime[i] >= 1) {
		PlayerTazeTime[i] += 1;
		if(PlayerTazeTime[i] == 15) {
			PlayerTazeTime[i] = 0;
		} else {
			GetPlayerFacingAngle(i, angle);
			SetPlayerFacingAngle(i, angle + 90);
		}
	}

	if(Pl::Drunk[i] >= 5)
	{
		Pl::DrunkTime[i]++;
		if(Pl::DrunkTime[i] == 8)
		{
			Pl::DrunkTime[i] = 0;
			if(!IsPlayerInAnyVehicle(i)) ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
		}
	}

	if(Pl::Stoned[i] >= 2)
	{
		Pl::Stoned[i] += 1;
		if(Pl::Stoned[i] == 10) Pl::Stoned[i] = 0;
	}

	if(Pl::Info[i][pCarTime] > 0)
	{
		if(Pl::Info[i][pCarTime] <= 0) Pl::Info[i][pCarTime] = 0;
		else Pl::Info[i][pCarTime] -= 1;
	}

	if(FindTime[i] != 0) {
		FindTime[i] --;
		format(temp, sizeof(temp), "%i", FindTime[i]);
		GameTextForPlayer(i, temp, 1500, 6);
		if(FindTime[i] == 0) {
			DisablePlayerCheckpointEx(i, FIND_ICON);
			PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1);
		}
	}

	if(TaxiCallTime[i] > 0 || BusCallTime[i] > 0)
	{
		if(TaxiAccepted[i] != INVALID_PLAYER_ID)
		{
			if(IsPlayerConnected(TaxiAccepted[i]))
			{
				GetPlayerPos(TaxiAccepted[i], posx, posy, posz); DestroyDynamicCP(checkpoints[i]);
				checkpoints[i] = CreateDynamicCP(posx, posy, posz, 5.0,-1,-1,i,99999.9);
			}
		}
		else if(BusAccepted[i] != INVALID_PLAYER_ID)
		{
			if(IsPlayerConnected(BusAccepted[i]))
			{
				GetPlayerPos(BusAccepted[i], posx, posy, posz); DestroyDynamicCP(checkpoints[i]);
				checkpoints[i] = CreateDynamicCP(posx, posy, posz, 5.0,-1,-1,i,99999.9);
			}
		}
	}

	if(MedicCallTime[i][1] > 0) {
		if(MedicCallTime[i][1] == 300) {
			MedicCallTime[i][0] = INVALID_PLAYER_ID;
			MedicCallTime[i][1] = 0;
			DestroyDynamicMapIcon(pickupd[i][1]);
			PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1);
		} else {
			if(IsPlayerConnected(MedicCallTime[i][0])) {
				format(temp, sizeof temp, "%d", 300 - MedicCallTime[i][1]);
				GameTextForPlayer(i, temp, 1500, 6);
				MedicCallTime[i][1] ++;
			} else {
				MedicCallTime[i][1] = 300;
				format(temp, sizeof temp, "* Клиент %s, вышел из игры.", GetName(MedicCallTime[i][0]));
				Send(i, COLOR_AZTECAS, temp);
			}
		}
	}
	
	if(MechanicCallTime[i][1] > 0) {
		if(MechanicCallTime[i][1] == 300) {
			MechanicCallTime[i][0] = INVALID_PLAYER_ID;
			MechanicCallTime[i][1] = 0;
			DestroyDynamicMapIcon(pickupd[i][1]);
			PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1);
		} else {
			if(IsPlayerConnected(MechanicCallTime[i][0])) {
				format(temp, sizeof(temp), "%d", 300 - MechanicCallTime[i][1]);
				GameTextForPlayer(i, temp, 1500, 6);
				MechanicCallTime[i][1] ++;
			} else {
				MechanicCallTime[i][1] = 300;
				format(temp, sizeof temp, "* Клиент %s, вышел из игры.", GetName(MechanicCallTime[i][0]));
				Send(i, COLOR_AZTECAS, temp);
			}
		}
	}

	if(PlayerCuffed[i])
	{
		if(Pl::CuffedTime[i] > 0)
		{
			Pl::CuffedTime[i] -= 1;
			if(Pl::CuffedTime[i] <= 0)
			{
				PlayerTazeTime[i] = 1;
				Pl::CuffedTime[i] = 0;
				RemovePlayerAttachedObject(i, 0);
				SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
			}
		}
	}
	return 1;
}

public: Fillup(playerid, amount, price) {
	new bidx = GetBizIndex(72);
	if(BizzInfo[bidx][bProducts] <= 0) {
		GameTextForPlayer(playerid, "~r~Out of stock", 5000, 1);
	} else {
		BizzInfo[bidx][bProducts]--;
		BizzInfo[bidx][bTill] += price;
		new veh = GetPlayerVehicleID(playerid);
		Benzin{veh} = amount;
		updateBenzinTD(playerid, veh);
		format(temp, sizeof(temp),"* Машина заправлена, с вас: $%d.", price);
		Send(playerid, COLOR_LIGHTBLUE, temp);
		Rac::GivePlayerMoney(playerid, -price);
	}
	Rac::TogglePlayerControllable(playerid, true);
}

stock SetPlayerWeapons(playerid) {
	if(Pl::isLogged(playerid)) {
		Rac::ResetPlayerWeapons(playerid);
	    if(!Pl::Info[playerid][pJailed]) {
			if(Pl::Paintballing[playerid] != 0) {
				Rac::GivePlayerWeapon(playerid, 29, 1000);
			} else {
				switch(GetFracID(playerid)) {
					case 1..3 : {
						Rac::GivePlayerWeapon(playerid, 3, 1);
					}

					case 5 : {
						Rac::GivePlayerWeapon(playerid, 2, 1);
						Rac::GivePlayerWeapon(playerid, 22, 30);
					}
					case 6 : {
						Rac::GivePlayerWeapon(playerid, 8, 1);
						Rac::GivePlayerWeapon(playerid, 22, 30);
					}
					
					case 9 : {
						Rac::GivePlayerWeapon(playerid, 43, 25);
					}
					
					case 10 : {
						Rac::GivePlayerWeapon(playerid, 3, 1);
						Rac::GivePlayerWeapon(playerid, 41, 1000);
					}
					
					case 11 : {
						Rac::GivePlayerWeapon(playerid, 3, 1);
						Rac::GivePlayerWeapon(playerid, 41, 1000);
					}
					
					case 12..19 : {
						Rac::GivePlayerWeapon(playerid, 5, 1);
						Rac::GivePlayerWeapon(playerid, 22, 30);
					}
					
					case 20 : {
						Rac::GivePlayerWeapon(playerid, 6, 1);
						Rac::GivePlayerWeapon(playerid, 22, 30);
					}
				}
			}
		}
	}
	return 1;
}

stock PrintBizInfo(playerid, bizid) {
    if(Pl::isLogged(playerid)) {
		for(new p; p < TOTAL_BIZZ; p++) {
			if(BizzInfo[p][bID] == bizid) {
				format(dialog, sizeof dialog, "%s\n\n{ffffff}----------------------------------------------------------\n", BizzInfo[p][bName]);
				scf(dialog, src, "{ffa500}Владелец: {ffffff}%s\n",BizzInfo[p][bOwner]);
				scf(dialog, src, "{ffa500}Компоньон: {AA3333}%s\n",BizzInfo[p][bExtortion]);
				scf(dialog, src, "{ffa500}Крыша: {%h}%s\n", rgb<GetFracColor(BizzInfo[p][bFrac])>, GetGangName(BizzInfo[p][bFrac]));
				scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
				scf(dialog, src, "{ffa500}Статус: %s\n", BizzInfo[p][bLocked]?("{AA3333}[закрыт]"):("{33AA33}[открыт]"));
				scf(dialog, src, "{ffa500}Стоимость входа: {33AA33}$%i\n",BizzInfo[p][bEntranceCost]);
				scf(dialog, src, "{ffa500}На счету бизнеса: {33AA33}$%i\n",BizzInfo[p][bTill]);
				scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
				scf(dialog, src, "{ffa500}Стоимость продуктов: {33AA33}$%i\n",BizzInfo[p][bPriceProd]);
				scf(dialog, src, "{ffa500}Продуктов в бизнесе: {ffffff}%i/%i",BizzInfo[p][bProducts],BizzInfo[p][bMaxProducts]);
				return SPD(playerid, D_NONE, 0, "Информация о бизнесе", dialog, "ENTER", "");
			}
		}
	}
	return 1;
}

stock PrintHouseInfo(playerid, hid, mode = 0) {
    if(Pl::isLogged(playerid) && IsValidHouse(hid)) {
		format(dialog, sizeof dialog, "%s\n\n{ffffff}----------------------------------------------------------\n", HouseInfo[hid][hInfo]);
		scf(dialog, src, "{ffa500}Владелец:{0080ff} %s\n", HouseInfo[hid][hOwner]);
		scf(dialog, src, "{ffa500}Цена дома:{33AA33} $%d\n", HouseInfo[hid][hPrice]);
		scf(dialog, src, "{ffa500}Статус: {33AA33}%s\n", HouseInfo[hid][hLock]?("{AA3333}[закрыт]"):("{33AA33}[открыт]"));
		scf(dialog, src, "{ffa500}Аренда: {33AA33}%s\n", HouseInfo[hid][hRent]?("{33AA33}[открыта]"):("{AA3333}[закрыта]"));
		scf(dialog, src, "{ffa500}Цена аренды: {33AA33}$%d\n", HouseInfo[hid][hRentPrice]);
		scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
		scf(dialog, src, "{ffa500}Денег в сейфе: {33AA33}$%d\n", HouseInfo[hid][hSafe]);
		scf(dialog, src, "{ffa500}Нарко в сейфе: {33AA33}%d грамм\n", HouseInfo[hid][hDrugs]);
		scf(dialog, src, "{ffa500}Матов в сейфе: {33AA33}%d матов\n", HouseInfo[hid][hMats]);
		scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
		scf(dialog, src, "{ffa500}Аптечек: {33AA33}%i штук\n", HouseInfo[hid][hHel]);
		scf(dialog, src, "{ffa500}Бронежилетов: {33AA33}%i штук\n", HouseInfo[hid][hArm]);
		scf(dialog, src, "{ffa500}Телевизор: %s\n", HouseInfo[hid][hTv]?("{33AA33}[есть]"):("{AA3333}[нету]"));
		scf(dialog, src, "{ffa500}Домашнее авто: {33AA33}%s\n", (400<=HouseInfo[hid][hVeh]<=611)?(VehicleNames[HouseInfo[hid][hVeh]-400]):("unknown"));
		scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
		if(mode && Pl::isAdmin(playerid, STD_ADMIN)) {
			scf(dialog, src, "{ffa500}Без хозяина уже: {33AA33}%i/20", getday(gettime(), HouseInfo[hid][hDate]));
		}
		return SPD(playerid, D_NONE, 0, "Информация о доме", dialog, "ENTER", "");
	}
	return 1;
}


public: ShowStats(playerid, statid, mode) {
	#define FIELD_COL d16800
	#define TITLE_COL 34b036
	if(!Pl::isLogged(statid)) return 0;
	GetPlayerVersion(statid, temp, sizeof temp);	
	format(dialog,sizeof dialog,"{ffffff}----------------------------------------------------------\n");
	scf(dialog, src, "{"#FIELD_COL"}Уровень: {ffffff}%d\n", 			Pl::Info[statid][pLevel]);
	scf(dialog, src, "{"#FIELD_COL"}Респекты: {ffffff}%d/%d\n", 		Pl::Info[statid][pExp], exp(statid));
	scf(dialog, src, "{"#FIELD_COL"}Цена уровня: {ffffff}$%d\n",		costlvl(statid));
	scf(dialog, src, "{"#FIELD_COL"}Пол: {ffffff}%s\n",					GetPlayerSex(statid));
	scf(dialog, src, "{"#FIELD_COL"}Возраст: {ffffff}%s\n",				GetPlayerAge(statid));
	scf(dialog, src, "{"#FIELD_COL"}Местонахождение: {ffffff}%s\n",		GetPlayerOrigin(statid));
	scf(dialog, src, "{"#FIELD_COL"}Предупреждения: {ffffff}%d / 3\n",	Pl::Info[statid][pWarns]);
	scf(dialog, src, "{"#FIELD_COL"}VIP аккаунт: {ffffff}%s\n",			Pl::Info[statid][pVip]?("Есть"):("Нету"));
	scf(dialog, src, "{"#FIELD_COL"}Часов в игре: {ffffff}%d\n",		Pl::Info[statid][pTime]);
	scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
	scf(dialog, src, "{"#FIELD_COL"}Работа: {ffffff}%s\n", 				JobsInfo[Pl::Info[statid][pJob]][jName]);
	scf(dialog, src, "{"#FIELD_COL"}Организация: {ffffff}%s\n", 		FracInfo[GetFracID(statid)][fName]);
	scf(dialog, src, "{"#FIELD_COL"}Ранг: {ffffff}%s\n",				RankInfo[GetFracID(statid)][Pl::Info[statid][pRank]]);
	scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
	scf(dialog, src, "{"#FIELD_COL"}Деньги(наличные): {ffffff}$%d\n", 	Rac::GetPlayerMoney(statid));
	scf(dialog, src, "{"#FIELD_COL"}Деньги(в банке): {ffffff}$%d\n",	Pl::Info[statid][pBank]);
	scf(dialog, src, "{"#FIELD_COL"}Номер телефона: {ffffff}%d\n",		Pl::Info[statid][pNumber]);
	scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
	scf(dialog, src, "{"#FIELD_COL"}Лотторейный №: {ffffff}%d\n",		Pl::Info[statid][pLottoNr]);
	scf(dialog, src, "{"#FIELD_COL"}Кол-во преступлений: {ffffff}%d\n",	Pl::Info[statid][pCrimes]);
	scf(dialog, src, "{"#FIELD_COL"}Кол-во арестов: {ffffff}%d\n",		Pl::Info[statid][pArrested]);
	scf(dialog, src, "{"#FIELD_COL"}Смертей с розыском: {ffffff}%d\n",	Pl::Info[statid][pWantedD]);
	scf(dialog, src, "{"#FIELD_COL"}Уровень розыска: {ffffff}%d\n", 	Pl::Info[statid][pWantedL]);
	scf(dialog, src, "{"#FIELD_COL"}Убийств: {ffffff}%d\n",				Pl::Info[statid][pKills]);
	scf(dialog, src, "{"#FIELD_COL"}Смертей: {ffffff}%d\n",				Pl::Info[statid][pDeaths]);
	scf(dialog, src, "{"#FIELD_COL"}Выговоров: {ffffff}%d\n", 			Pl::Info[statid][pRebuke]);
	scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
	scf(dialog, src, "{"#FIELD_COL"}Наркотики: {ffffff}%d\n", 			Pl::Info[statid][pDrugs]);
	scf(dialog, src, "{"#FIELD_COL"}Материалы: {ffffff}%d\n", 			Pl::Info[statid][pMats]);

	if(Pl::isAdmin(playerid, 1) && mode) {
		scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
		scf(dialog, src, "{"#FIELD_COL"}UserID: {ffffff}%i\n", 		Pl::Info[statid][pID]);
		scf(dialog, src, "{"#FIELD_COL"}Client: {ffffff}%s\n", 		temp);
		scf(dialog, src, "{"#FIELD_COL"}Дом: {ffffff}%i\n",  		Pl::Info[statid][pHouseKey]);
		scf(dialog, src, "{"#FIELD_COL"}Бизнес: {ffffff}%i\n", 		Pl::Info[statid][pBizKey]);
		scf(dialog, src, "{"#FIELD_COL"}Лицензии: {ffffff}D:%i, F:%i, B:%i, G:%i\n", Pl::Info[statid][pCarLic], Pl::Info[statid][pFlyLic], Pl::Info[statid][pBoatLic], Pl::Info[statid][pGunLic]);
		scf(dialog, src, "{"#FIELD_COL"}Локация: {ffffff}%i\n", 	Pl::Info[statid][pLocal]);
		scf(dialog, src, "{"#FIELD_COL"}Вирт. Мир: {ffffff}%i\n",	GetPlayerVirtualWorld(statid));
		scf(dialog, src, "{"#FIELD_COL"}Интерьер: {ffffff}%i\n", 	GetPlayerInterior(statid));
	}
	
	format(temp, sizeof temp,"{"#TITLE_COL"}Статистика аккуанта: {ffffff}%s", GetName(statid));
	return SPD(playerid, D_NONE, 0, temp, dialog, "ENTER","");
}

stock ShowPass(playerid, showforid, dialogid) {
	if(!Pl::isLogged(showforid)) return 0;
	new fio[2][12], _date[2][14], fakefrac = GetFakeFracID(playerid);
	to_timestamp(_date[0], Pl::Info[playerid][pPasport][1], "%Y-%m-%d");
	to_timestamp(_date[1], Pl::Info[playerid][pPasport][2], "%Y-%m-%d");
	GetPlayerName(playerid, plname, 24), sscanf(plname, "p<_>s[12]S(-)[12]", fio[0], fio[1]);

	format(dialog, sizeof dialog,"{ffffff}----------------------------------------------------------\n");
	scf(dialog, src, "{"#FIELD_COL"}Имя: {ffffff}%s\n", fio[0]);
	scf(dialog, src, "{"#FIELD_COL"}Фамилия: {ffffff}%s\n", fio[1]);
	scf(dialog, src, "{"#FIELD_COL"}Возраст: {ffffff}%s\n", GetPlayerAge(playerid));
	scf(dialog, src, "{"#FIELD_COL"}Пол: {ffffff}%s\n", GetPlayerSex(playerid));
	scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
	scf(dialog, src, "{"#FIELD_COL"}Организация: {%h}%s\n", rgb<GetFracColor(fakefrac)>, FracInfo[fakefrac][fName]);
	scf(dialog, src, "{"#FIELD_COL"}Должность: {ffffff}%s\n", RankInfo[fakefrac][Pl::Info[playerid][pRank]]);
	scf(dialog, src, "{"#FIELD_COL"}Преступлений: {ffffff}%i\n", Pl::Info[playerid][pCrimes]);
	scf(dialog, src, "{"#FIELD_COL"}Проживание в штате: {ffffff}%i(в годах)\n", Pl::Info[playerid][pLevel]);
	scf(dialog, src, "{"#FIELD_COL"}Работа: {ffffff}%s\n", JobsInfo[Pl::Info[playerid][pJob]][jName]);
	scf(dialog, src, "{ffffff}----------------------------------------------------------\n");
	scf(dialog, src, "{"#FIELD_COL"}Действует от: {ffffff}%s\n", _date[0]);
	scf(dialog, src, "{"#FIELD_COL"}Действует до: {ffffff}%s\n", _date[1]);
	
	if(playerid != showforid) {
		format(temp, sizeof(temp),"{"#TITLE_COL"}Паспорт гражданина: {ffffff}%s", plname);
		SPD(showforid, dialogid, 0, temp, dialog, "ENTER","");
	} else {
		SPD(showforid, dialogid, 0, "Ваш паспорт", dialog, "ENTER","");
	}
	return 1;
}

stock GetFakeFracID(playerid) {
	switch(GetFracID(playerid)) {
		case 1..4, 7, 9..11, 20 : return GetFracID(playerid);
		case 8 : {
			if(Pl::Info[playerid][pMaskOn]) {
				switch(GetPlayerSkin(playerid)) {
					case 280 : return 1;
					case 286 : return 2;
					case 287 : return 3;
				}
			}
		}
	}
	return 0;
}

stock IsLegalFrac(fracid) {
	switch(fracid) {
		case 1..4	: return 1;
		case 7		: return 1;
		case 9..11	: return 1;
		case 20		: return 1;
	}
	return 0;
}

stock SetPColor(playerid) {
	if(Pl::isLogged(playerid)) {
		new fracid = GetFracID(playerid);
		static const fracColor[] = {
			-1					,
			COLOR_BLUE			, // Полиция
			COLOR_INDIGO		, // ФБР
			COLOR_GREEN			, // Армия
			COLOR_LIGHTRED		, // Медики
			COLOR_ORANGERED		, // La Cos Nostra
			COLOR_YELLOW		, // Yakuza
			COLOR_WHITE			, // Правительство
			COLOR_ALPHA			, // Хитманы
			COLOR_ORANGE		, // Репортеры
			COLOR_MAROON		, // Таксисты
			COLOR_FLBLUE		, // Лицензиары
			COLOR_IVORY			, // Байкеры
			COLOR_MIDNIGHTBLUE	, // Русская Мафия
			COLOR_LIME			, // West Side Grove
			COLOR_LIGHTBLUE		, // El Coronos
			COLOR_MEDIUMMAGENTA	, // East Side Ballas
			COLOR_MEDIUMAQUA	, // San Fierro Rifa
			COLOR_GOLD			, // Los Santos Vagos
			COLOR_BRIGHTRED		, // Street Dogs
			COLOR_GREY			  // Фермеры
		};
		if(1 <= fracid <= 20) {
			return SetPlayerColor(playerid, fracColor[fracid]);
		}
	}
	return SetPlayerColor(playerid, COLOR_ALPHA);
}

stock LoadSpawns() {
	new time = GetTickCount();
	Db::query("SELECT * FROM `"#__DbPrefix__""#__TableSpawns__"` ORDER BY `ID` ASC");
	if(Db::store_result()) {
		if(Db::num_rows()) {
			new id, int, virt, Float:pos[4];
			while(Db::fetch_row(query)) {
				sscanf(query, "p<|>iiia<f>[4]", id, int, virt, pos);
				SpawnInfo[id][spInt] = int;
				SpawnInfo[id][spVirt] = virt;
				SpawnInfo[id][spX] = pos[0];
				SpawnInfo[id][spY] = pos[1];
				SpawnInfo[id][spZ] = pos[2];
				SpawnInfo[id][spA] = pos[3];
			}
			printf(" + Spawn info successfully loaded! (Ticks: %i)", GetTickCount()-time);
		}
	}
}

stock LoadStuff() {
	new time = GetTickCount();
	Db::query("SELECT * FROM `"#__DbPrefix__""#__TableStuffs__"` WHERE 1");
	if(Db::store_result()) {
		if(Db::num_rows()) {
			Db::fetch_row(src);
			sscanf(src, "p<|>e<iiiiiii>", StuffInfo);
		}
	}
	return printf(" + Stuff info successfully loaded! (Ticks: %i)", GetTickCount()-time);
}

stock SaveStuff() {
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableStuffs__"` SET ");
	scf(query, temp, "`TaxValue`='%i',", StuffInfo[sTaxValue]);
	scf(query, temp, "`PDrugs`='%i',", StuffInfo[sPDrugs]);
	scf(query, temp, "`ADrugs`='%i',", StuffInfo[sADrugs]);
	scf(query, temp, "`fmetal`='%i',", StuffInfo[sFMetal]);
	scf(query, temp, "`ffuel`='%i',", StuffInfo[sFFuel]);
	scf(query, temp, "`fprods`='%i',", StuffInfo[sFProds]);
	scf(query, temp, "`regged`='%i'", StuffInfo[sRegged]);
	return Db::query(query, 0);
}

stock LoadDonateInfo() {
	new time = GetTickCount();
	Db::query("SELECT * FROM `"#__DbPrefix__""#__TableDonate__"` WHERE 1");
	if(Db::store_result() && Db::num_rows()) {
		Db::fetch_row(src);
		sscanf(src, "p<|>e<iiiii>", DonateInfo);
	}
	return printf(" + Donate info successfully loaded! (Ticks: %i)", GetTickCount()-time);
}

stock SaveDonateInfo() {
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableDonate__"` SET ");
	scf(query, temp, "`skin_price`='%i',", DonateInfo[dSkinPrice]);
	scf(query, temp, "`cash_price`='%i',", DonateInfo[dCashPrice]);
	scf(query, temp, "`invite_price`='%i',", DonateInfo[dInvitePrice]);
	scf(query, temp, "`warn_price`='%i',", DonateInfo[dWarnPrice]);
	scf(query, temp, "`vip_price`='%i'", DonateInfo[dVIPPrice]);
	return Db::query(query, 0);
}


static LoadHouses() {
	new time = GetTickCount();
    format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableHouses__"` ORDER BY `ID` ASC");
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows()) {
			new i = 1;
			while(Db::fetch_row(query)) {
				sscanf(query, "P<|,>iiis[24]s[36]iiiiiiiiiiiiiiia<i>[6]a<i>[6]fffffffffffs[128]",
				HouseInfo[i][hID],		HouseInfo[i][hOwned],
				HouseInfo[i][hLock],	HouseInfo[i][hOwner],
				HouseInfo[i][hInfo],	HouseInfo[i][hPrice],
				HouseInfo[i][hRent],	HouseInfo[i][hRentPrice],
				HouseInfo[i][hSafe],	HouseInfo[i][hLevel],
				HouseInfo[i][hHel],		HouseInfo[i][hArm],
				HouseInfo[i][hTv],		HouseInfo[i][hInt],
				HouseInfo[i][hDate],	HouseInfo[i][hVeh],
				HouseInfo[i][hvCol1],	HouseInfo[i][hvCol2],
				HouseInfo[i][hMats],	HouseInfo[i][hDrugs],
				HouseInfo[i][hGuns],	HouseInfo[i][hAmmos],
				HouseInfo[i][hEnterx],	HouseInfo[i][hEntery],
				HouseInfo[i][hEnterz],	HouseInfo[i][hExitx],
				HouseInfo[i][hExity],	HouseInfo[i][hExitz],
				HouseInfo[i][hvX],		HouseInfo[i][hvY],
				HouseInfo[i][hvZ],		HouseInfo[i][hvA],
				AutoInfo[0][aMileage],	temp);
				
				HouseInfo[i][hVirtual] = HouseInfo[i][hID];
				
				switch(HouseInfo[i][hOwned]) {
					case 0 : {
						HouseInfo[i][hPickup] = AddPickup(1273, 23, HouseInfo[i][hEnterx], HouseInfo[i][hEntery], HouseInfo[i][hEnterz], 0);
						HouseInfo[i][hMapIcon] = CreateDynamicMapIcon( HouseInfo[i][hEnterx], HouseInfo[i][hEntery], HouseInfo[i][hEnterz], 31, 0, 0, -1, -1, 250.0);
					}
					case 1 : {
						HouseInfo[i][hPickup] = AddPickup(1318, 23, HouseInfo[i][hEnterx], HouseInfo[i][hEntery], HouseInfo[i][hEnterz], 0);
						HouseInfo[i][hMapIcon] = CreateDynamicMapIcon(HouseInfo[i][hEnterx], HouseInfo[i][hEntery], HouseInfo[i][hEnterz], 32,0, 0, -1, -1, 250.0);
					}
				}
				
				if(400 <= HouseInfo[i][hVeh] <= 611) {
					HouseInfo[i][hAuto] = CreateVeh(HouseInfo[i][hVeh], HouseInfo[i][hvX], HouseInfo[i][hvY], HouseInfo[i][hvZ], HouseInfo[i][hvA], HouseInfo[i][hvCol1], HouseInfo[i][hvCol2], 3600*2);
					SetVehicleNumber(HouseInfo[i][hAuto]);
					ToggleVehicleDoor(HouseInfo[i][hAuto], false);
					sscanf(temp, "p<,>a<i>[13]i", AutoInfo[HouseInfo[i][hAuto]][aTuning], AutoInfo[HouseInfo[i][hAuto]][aPaintJob]);
					AddTuning(HouseInfo[i][hAuto]); AutoInfo[HouseInfo[i][hAuto]][aMileage] = AutoInfo[0][aMileage];
				}
				
				i++;
				TOTAL_HOUSES++;
			}
			printf(" + Houses successfully loaded! Count: %i. (Ticks: %i)", TOTAL_HOUSES, GetTickCount()-time);
		}
	}
	return;
}

static LoadBizz() {
	new time = GetTickCount();
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableBusines__"` ORDER BY `bID` ASC");
	if(Db::query(query) && Db::store_result()) {
		new rows = Db::num_rows();
		if(rows) {
			for(new i; i < rows; i++) {
				Db::fetch_row(query);
				sscanf(query, "p<|>iiis[24]s[36]s[36]ffffffiiiiiiiiii",
				BizzInfo[i][bID],
				BizzInfo[i][bType],
				BizzInfo[i][bOwned],
				BizzInfo[i][bOwner],
				BizzInfo[i][bName],
				BizzInfo[i][bExtortion],
				BizzInfo[i][bEnterX],
				BizzInfo[i][bEnterY],
				BizzInfo[i][bEnterZ],
				BizzInfo[i][bExitX],
				BizzInfo[i][bExitY],
				BizzInfo[i][bExitZ],
				BizzInfo[i][bLevelNeeded],
				BizzInfo[i][bBuyPrice],
				BizzInfo[i][bEntranceCost],
				BizzInfo[i][bTill],
				BizzInfo[i][bLocked],
				BizzInfo[i][bInterior],
				BizzInfo[i][bProducts],
				BizzInfo[i][bMaxProducts],
				BizzInfo[i][bPriceProd],
				BizzInfo[i][bFrac]);

				switch(BizzInfo[i][bOwned]) {
					case 0 : {
						if(BizzInfo[i][bType] != 2) {
							BizzInfo[i][bMapIcon] = CreateDynamicMapIcon(BizzInfo[i][bEnterX],BizzInfo[i][bEnterY],BizzInfo[i][bEnterZ], 52, 0, 0, -1, -1, 250.0);
						}
						BizzInfo[i][bPickupEnter] = AddPickup(1272, 23, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ], 0);
					}
					default : {
						if(BizzInfo[i][bType] != 2) {
							BizzInfo[i][bMapIcon] = CreateDynamicMapIcon(BizzInfo[i][bEnterX],BizzInfo[i][bEnterY],BizzInfo[i][bEnterZ], 36, 0, 0, -1, -1, 250.0);
							BizzInfo[i][bPickupEnter] = AddPickup(1239, 23, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ], 0);
						}
					}
				}
				
				BizzInfo[i][bVirtual] = BizzInfo[i][bID];
				GetSquarePos(BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], MAX_ZONE_SIZE, BizzInfo[i][bzMinX], BizzInfo[i][bzMinY], BizzInfo[i][bzMaxX], BizzInfo[i][bzMaxY]);
				BizzInfo[i][bZone] = Gz::Create(BizzInfo[i][bzMinX], BizzInfo[i][bzMinY], BizzInfo[i][bzMaxX], BizzInfo[i][bzMaxY]);
				if(BizzInfo[i][bID] == 83) BizzInfo[i][bPickupExit] = AddPickup(1318, 23, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ], BizzInfo[i][bVirtual]);
				if(BizzInfo[i][bType] == 0) BizzInfo[i][bPickupExit] = AddPickup(1318, 23, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ], BizzInfo[i][bVirtual]);
				GangBiznes{BizzInfo[i][bFrac]} ++;
				
				TOTAL_BIZZ++;
			}
		}
	}
	return printf(" + Busnises successfully loaded! Count: %i (Ticks: %i)", TOTAL_BIZZ, GetTickCount()-time);
}

static LoadBurgers() {
	new time = GetTickCount();
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableBurgers__"` ORDER BY `ID` ASC");
	if(Db::query(query) && Db::store_result()) {
		new rows = Db::num_rows();
		if(rows) {
			for(new b; b < rows; b++) {
				Db::fetch_row(query);
				sscanf(query, "p<|>iffffffii", Burgers[b][ID],
				Burgers[b][bX], Burgers[b][bY], Burgers[b][bZ],
				Burgers[b][bEX], Burgers[b][bEY], Burgers[b][bEZ],
				Burgers[b][Int], Burgers[b][Type]);

				Burgers[b][vW] = Burgers[b][ID];
				Burgers[b][PickupEn] = AddPickup(1318, 23, Burgers[b][bX], Burgers[b][bY], Burgers[b][bZ], 0);
				Burgers[b][PickupEx] = AddPickup(1318, 23, Burgers[b][bEX], Burgers[b][bEY], Burgers[b][bEZ], Burgers[b][vW]);
				
				switch(Burgers[b][Type]) {
					case 1: Burgers[b][MapIcon] = CreateDynamicMapIcon(Burgers[b][bX], Burgers[b][bY], Burgers[b][bZ], 10, 0, 0, -1, -1, 250.0);
					case 2: Burgers[b][MapIcon] = CreateDynamicMapIcon(Burgers[b][bX], Burgers[b][bY], Burgers[b][bZ], 29, 0, 0, -1, -1, 250.0);
					case 3: Burgers[b][MapIcon] = CreateDynamicMapIcon(Burgers[b][bX], Burgers[b][bY], Burgers[b][bZ], 14, 0, 0, -1, -1, 250.0);
				}
				TOTAL_BURGERS++;
			}
		}
	}
	return printf(" + Burgers successfully loaded! Count: %i. (Ticks: %i)", TOTAL_BURGERS, GetTickCount()-time);
}

static LoadGas() {
	new time = GetTickCount();
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableGasstations__"` ORDER BY `ID` ASC");
	if(Db::query(query) && Db::store_result()) {
		new rows = Db::num_rows();
		if(rows) {
			for(new b; b < rows; b++) {
				Db::fetch_row(query);
				sscanf(query, "p<|>ifff", GasStations[b][ID], GasStations[b][pX], GasStations[b][pY], GasStations[b][pZ]);
				AddPickup(1650, 14, GasStations[b][pX], GasStations[b][pY], GasStations[b][pZ]-0.2, 0, "* Заправочная Станция *\n /fill", 0xFF6347AA);
				TOTAL_GASS++;
			}
		}
	}
	return printf(" + Gas stations successfully loaded! Count: %i. (Ticks: %i)", TOTAL_GASS, GetTickCount()-time);
}

static LoadGI()
{
	new time = GetTickCount();
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableGangInfo__"` ORDER BY `gRespect` DESC");
	if(Db::query(query) && Db::store_result()) {
		new rows = Db::num_rows();
		if(rows) {
			for(new i; i < rows; i++) {
				Db::fetch_row(query);
				sscanf(query, "p<|>iifff",
				GangInfo[i][fID], GangInfo[i][gRespect],
				GangInfo[i][gPosX], GangInfo[i][gPosY], GangInfo[i][gPosZ]);
			}
			printf(" + Gang info successfully loaded! (Ticks: %i)", GetTickCount()-time);
		}
	}
	
	return;
}

stock SaveGI() {
	for(new i; i < sizeof(GangInfo); ++i) {
		format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableGangInfo__"` SET ");
		scf(query, src, "`gRespect`='%i',", GangInfo[i][gRespect]);
		scf(query, src, "`gPosX`='%f',", GangInfo[i][gPosX]);
		scf(query, src, "`gPosY`='%f',", GangInfo[i][gPosY]);
		scf(query, src, "`gPosZ`='%f' ", GangInfo[i][gPosZ]);
		scf(query, src, "WHERE `fracID`='%i'", GangInfo[i][fID]);
		Db::query(query, 1);
	}
	return;
}

static LoadFI() {
	new fracname[36], frconf[3], fbconf[2];
	new fracid, bank, time = GetTickCount();
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableFracInfo__"` ORDER BY `fID` ASC");
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows()) {
			strmid(FracInfo[0][fName], "Civilian", 0, strlen("Civilian"), 255);
			while(Db::fetch_row(query)) {
				sscanf(query, "P<|,>iia<i>[3]a<i>[2]s[36]", fracid, bank, frconf, fbconf, fracname);
				
				FracInfo[fracid][fBank] = bank;
				for(new i; i < sizeof frconf; i++) FracInfo[fracid][fRConf][i] = frconf[i];
				for(new i; i < sizeof fbconf; i++) FracInfo[fracid][fBConf][i] = fbconf[i];
				strmid(FracInfo[fracid][fName], fracname, 0, 36, 255);
			}
			printf(" + Fraction info successfully loaded! (Ticks: %i)", GetTickCount()-time);
		}
	}
	return 1;
}

stock UpdateFI(fracid) {
	if(1 <= fracid <= 20) {
		format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableFracInfo__"` SET ");
		scf(query, temp, "`fBank`='%i',", FracInfo[fracid][fBank]);
		scf(query, temp, "`fRConf`='%i,%i,%i',", FracInfo[fracid][fRConf][zRANK], FracInfo[fracid][fRConf][bRANK], FracInfo[fracid][fRConf][gRANK]);
		scf(query, temp, "`fBConf`='%i,%i'", FracInfo[fracid][fBConf][bKILLS], FracInfo[fracid][fBConf][bPRICE]);
		scf(query, temp, " WHERE `fID`='%i'", fracid);
		return Db::query(query, fracid);
	}
	return 0;
}

static LoadFC( ) {
	new time = GetTickCount();
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableFracVehicles__"` ORDER BY `ID` ASC");
	if(Db::query(query) && Db::store_result()) {
		new rows = Db::num_rows();
		if(rows) {
			if(rows > MAX_FC) rows = MAX_FC;
			
			for(new i; i < rows; i++) {
				Db::fetch_row(query);
				sscanf(
					query, "P<|,>iiiia<i>[2]s[10]a<f>[4]f",
					Fc::Info[i][Fc::Id][0],
					Fc::Info[i][Fc::Model],
					Fc::Info[i][Fc::FracId],
					Fc::Info[i][Fc::RankId],
					Fc::Info[i][Fc::Color],
					Fc::Info[i][Fc::Number],
					Fc::Info[i][Fc::RespPos],
					AutoInfo[0][aMileage]
				);
				
				Fc::Info[i][Fc::Id][1] = CreateVeh(
					Fc::Info[i][Fc::Model],
					Fc::Info[i][Fc::RespPos][0],
					Fc::Info[i][Fc::RespPos][1],
					Fc::Info[i][Fc::RespPos][2],
					Fc::Info[i][Fc::RespPos][3],
					Fc::Info[i][Fc::Color][0],
					Fc::Info[i][Fc::Color][1],
					600
				);
				
				if(!strlen(Fc::Info[i][Fc::Number])) strmid(Fc::Info[i][ Fc::Number], Fc::DEF_NUMBER, 0, strlen(Fc::DEF_NUMBER), 255);
				SetVehicleNumberPlate(Fc::Info[i][Fc::Id][1], Fc::Info[i][Fc::Number]);
				AutoInfo[Fc::Info[i][Fc::Id][1]][aMileage] = AutoInfo[0][aMileage];
				Iter_Add(TeamVehicles[Fc::Info[i][Fc::FracId]], Fc::Info[i][Fc::Id][1]);
				Fc::TOTAL ++;
			}
			
			Db::free_result();
			
			printf(" + Frac vehicle successfully loaded! Count: %i; (Time: %i ticks)", Fc::TOTAL, GetTickCount()-time);
		}
		else printf("Fc::Load() : returned rows %i; (Time: %i ticks)", rows, GetTickCount()-time);
	}
	else printf("Fc::Load() : table not found! (Time: %i; ticks)", GetTickCount()-time);
}

stock SaveAcc() {
    foreach(new playerid: Player) {
		updatePlayerData(playerid);
	}
	return 1;
}

stock UpdateProp() {
	if(Db::ping() != -1) {
		for(new i; i < TOTAL_BIZZ; ++i) UpdateBizz(i);

		for(new i = 1; i < TOTAL_HOUSES; ++i) UpdateHouse(i);

		for(new i; i < TOTAL_VEHICLES; ++i) UpdateToSQL(i, 0);

		for(new i; i < Fc::TOTAL; ++i) Fc::Update(i);

		for(new i; i < MAX_FRAC; ++i) UpdateFI(i);

		SaveStuff();
		
		SaveGI();
	}

	return 1;
}

stock Float:GetDistanceBetweenPlayers(p1,p2) {
	new Float:xyz[ 3 ];
	GetPlayerPos(p2, xyz[0], xyz[1], xyz[2]);
	return GetPlayerDistanceFromPoint(p1, xyz[0], xyz[1], xyz[2]);
}

stock GetClosestPlayer(playerid, Float:radi=200.0) {
	new Float: dist, p1 = INVALID_PLAYER_ID;
	foreach(new i : inStreamPlayers[playerid]) {
		dist = GetDistanceBetweenPlayers(i, playerid);
		if(dist <= radi && dist != -1.00) {
			radi = dist;
			p1 = i;
		}
	}

	return p1;
}

stock DateProp(playerid, ...) {
	GetPlayerName(playerid, plname, 24);
	for(new i = numargs()-1; i != 0; --i) {
		switch(getarg(i)) {
			case 0 : {
				new houseid = Pl::Info[playerid][pHouseKey];
				if(IsValidHouse(houseid)) {
					if(strcmp(plname, HouseInfo[houseid][hOwner], false) == 0) {
						HouseInfo[houseid][hDate] = gettime();
					}
				}
			}
			
			case 1 : {
				if(Pl::Info[playerid][pPasport][0] != 0) {
					new currtime = gettime();
					if(currtime >= Pl::Info[playerid][pPasport][2]) {
						Pl::Info[playerid][pPasport][0] = 0;
						Pl::Info[playerid][pPasport][1] = 0;
						Pl::Info[playerid][pPasport][2] = 0;
						Send(playerid, COLOR_YELLOW, "* Ваш паспорт больше не действителен, новый можно получить в Мэрии.");
					}
				}
			}
		}
	}
	return 1;
}

public: ClearBanList() {
	new banIp[16], currtime = gettime();
	format(query, sizeof query, "SELECT `ip` FROM `"#__DbPrefix__""#__TableBanned__"` WHERE `unbandate` <= '%i'", currtime);
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows() > 0) {
			while(Db::fetch_row(banIp)) {
				format(query, sizeof query, "unbanip %.16s", banIp);
				SendRconCommand(query);
			}
			format(query, sizeof query, "DELETE FROM `"#__DbPrefix__""#__TableBanned__"` WHERE `unbandate` <= '%i'", currtime);
			if(Db::query(query)) printf("[Debug] Банлист был обновлен! Удалено записей: %i", Db::affected_rows());
		}
	}
}


public: Checkprop() {
	SendLog("houses", "[Debug] Checkprop starting...");
	new count;
	for(new h = FIRST_HOUSE; h < TOTAL_HOUSES; h++) {
		if(HouseInfo[h][hOwned] && getday(gettime(), HouseInfo[h][hDate]) >= 15) {
			if(400 <= HouseInfo[h][hVeh] <= 611) {
				HouseInfo[h][hVeh] = 479;
				HouseInfo[h][hvCol1] = -1;
				HouseInfo[h][hvCol2] = -1;
			}

			HouseInfo[h][hTv] = 0;
			HouseInfo[h][hHel] = 0;
			HouseInfo[h][hArm] = 0;
			HouseInfo[h][hSafe] = 0;
			HouseInfo[h][hLock] = 1;
			HouseInfo[h][hOwned] = 0;
			HouseInfo[h][hMats] = 0;
			HouseInfo[h][hDrugs] = 0;

			format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `House` = '999' WHERE `Name` = '%s'", HouseInfo[h][hOwner]);
			Db::query(query);
			format(query, sizeof query, "[Debug] HouseID: %i; Owner: %s; Price: %i", HouseInfo[h][hID], HouseInfo[h][hOwner], HouseInfo[h][hPrice]);
			SendLog("houses", query);
			strmid(HouseInfo[h][hOwner], "The State", 0, strlen("The State"), 255);
			ResetTuning(HouseInfo[h][hAuto], 1, h);
			UpdateHouse(h);
			count++;
		}
	}
	format(query, sizeof query, "[Debug] Total sales of houses: %i", count);
	SendLog("houses", query);
	return 1;
}

public: onPayDay() {
	SendLog("debug", "[Debug] PayDay starting...");

	new
		tax,
		hkey,
		rent,
		bidx,
		ebill,
		interest,
		totaltax,
		tmpintrate = 1,
		totalebill,
		totalchecks
	;

	bidx = GetBizIndex(44);
	foreach(new i : Player) {
		if(Pl::isLogged(i)) {
			if(Pl::Info[i][pLevel] > 0) {
				hkey = Pl::Info[i][pHouseKey];
				GetPlayerName(i, plname, 24);
				if(IsValidHouse(hkey)) {
					rent = HouseInfo[hkey][hRentPrice];
					if(!strcmp(plname, HouseInfo[hkey][hOwner], false)) {
						rent = 0;
					} else {
						if(rent > Rac::GetPlayerMoney(i)) {
							Pl::Info[i][pHouseKey] = 999;
							Send(i, COLOR_WHITE, "* Вы были выселены.");
							rent = 0;
						}
					}
					
					if(rent) {
						HouseInfo[hkey][hSafe] += rent;
						Rac::GivePlayerMoney(i, -rent);
					}

					ebill = (HouseInfo[hkey][hPrice] / BizzInfo[bidx][bEntranceCost]);
					if(Pl::Info[i][pBank] > 0 || Rac::GetPlayerMoney(i) > 0) {
						totalebill += ebill;
						if(Pl::Info[i][pBank] >= ebill) GiveBankMoney(i, -ebill);
						else Rac::GivePlayerMoney(i, -ebill);
					} else ebill = 0;
				}
				
				if(Pl::Info[i][pVip] > 0) tmpintrate = 3;
				
				interest = (Pl::Info[i][pBank]/1000)*(tmpintrate);
				
				if(Pl::Info[i][pPayDay] >= 9) {
					Pl::Info[i][pPayCheck] += GetPayCheck(Pl::Info[i][pLevel]);
					tax = floatround(percent(Pl::Info[i][pPayCheck], StuffInfo[sTaxValue]));
					Pl::Info[i][pExp]++;
					Pl::Info[i][pTime]++;
					Send(i, 0x34c92400, "|________________ЗАРПЛАТА______________|");
					sendf(i, src, COLOR_GREY, "* Чек: $%i Налог: -$%i", Pl::Info[i][pPayCheck], tax);
					sendf(i, src, COLOR_GREY, "* Баланс: $%i", Pl::Info[i][pBank]-interest);
					sendf(i, src, COLOR_GREY, "* Вклад в банке под: 0.%i процентов",tmpintrate);
					if(hkey != 999) sendf(i, src, COLOR_GREY, "* Счет за электричество: -$%i", ebill);
					sendf(i, src, COLOR_GREY, "* Полученные средства по банковскому вкладу: $%i", interest);
					sendf(i, src, COLOR_GREY, "* Плата за аренду: -$%i", rent);
					Send(i, COLOR_GREY, "|--------------------------------------|");
					if(tax > 0) {
						totaltax += tax;
						Pl::Info[i][pPayCheck] -= tax;
					}
					totalchecks += Pl::Info[i][pPayCheck];
					GiveBankMoney(i, interest);
					GiveBankMoney(i, -StuffInfo[sTaxValue]);
					GiveBankMoney(i, Pl::Info[i][pPayCheck]);
					sendf(i, src, COLOR_GREY, "* Текущий баланс: $%i", Pl::Info[i][pBank]);
					GameTextForPlayer(i, "~y~Bank~n~~w~Paycheck", 5000, 1);
					PlayerPlayMusic(i);
					DEBUG[ TOTAL_PLAYER_PAID ] ++;
					
					Pl::Info[i][pPayDay] = 0;
					Pl::Info[i][pPayCheck] = 0;
					
					if(Pl::Info[i][pContractTime] != 0) {
						Pl::Info[i][pContractTime]--;
					}
					if(Pl::Info[i][pVip] > 0) {
						Pl::Info[i][pPayDayHad] += 1;
						if(Pl::Info[i][pPayDayHad] >= 5) {
							Pl::Info[i][pExp]++;
							Pl::Info[i][pPayDayHad] = 0;
						}
					}
					
					DateProp(i, 1);
					updatePlayerData(i);
				} else {
					Send(i, COLOR_LIGHTRED, "*[RP]GrandWorld: Вы играли слишком мало, поэтому сервер не выдал вам зарплату за прошлый час.");
				}
				if(MoneyMessage[i] && !(Rac::GetPlayerMoney(i) > 0 || Pl::Info[i][pBank] > 0)) {
					MoneyMessage[i] = false;
					Jailed(i, 300, 3);
					GameTextForPlayer(i, "~r~Busted!", 2000, 1);
					format(src, sizeof(src), "* Вы заключены в тюрьму на 10 минут! Причина: Задолжность");
					Send(i, COLOR_LIGHTBLUE, src);
				}
			}
		}
	}

	GiveFracMoney(7, totaltax);
	BizzInfo[bidx][bTill] += totalebill;
	
	SetTimer("Extortion", 100, false);
	
	format(src, sizeof(src), "PAYDAY STATS: Получивших зарплату: %i, Собрано налога: $%i, Ушло на зарплату: $%i, Счета за электричество: $%i", DEBUG[ TOTAL_PLAYER_PAID ], totaltax, totalchecks, totalebill);
	SendToAdmin(COLOR_YELLOW, src, 1, 4);
	format(src, sizeof(src), "PAYDAY STATS: Сохранений аккаунтов: %i, houses:%i/biznes:%i, MySQL-ошибок: %i, Сейчас играют: %i",
	DEBUG[ TOTAL_SAVE_ACCOUNT ], DEBUG[ TOTAL_SAVE_HOUSES ], DEBUG[ TOTAL_SAVE_BIZNES ], DEBUG[ TOTAL_QUERY_ERRORS ], Iter_Count(Player));
	SendToAdmin(COLOR_YELLOW, src, 1, 4);

	for(new i; i < sizeof(DEBUG); i++) DEBUG[ i ] = 0; // Clear debug
	
	return 1;
}

public: Extortion() {
	new playerid, cash[3];
	for(new biz; biz < TOTAL_BIZZ; biz++) {
		cash[0] = cash[1] = 0;
		if(BizzInfo[biz][bOwned] == 1 && BizzInfo[biz][bTill] > 100) {
			if(strfind(BizzInfo[biz][bExtortion], "No-one", false) != -1) {
				cash[0] = floatround(percent(BizzInfo[biz][bTill],30));
				if(cash[0] > 0) {
					sscanf(BizzInfo[biz][bExtortion], "u", playerid);
					if(Pl::isLogged(playerid)) {
						cash[1] += cash[0];
						Pl::Info[playerid][pBank] += cash[0];
						format(src, sizeof src, "* Доходы от бизнеса за прошедший час составили: $%i", cash[0]);
						Send(playerid, COLOR_GREEN, src);
					}
				} else {
					cash[0] = 0;
				}
			}
			
			if(cash[1] > 0) {
				BizzInfo[biz][bTill] -= cash[1];
				if(BizzInfo[biz][bTill] < 0) {
					BizzInfo[biz][bTill] = 0;
				}
			}
		}
	}
}

public: onPlayerRegister(playerid, password[]) {
	if(IsPlayerConnected(playerid)) {
		new hash[50]; keyProtect(password, hash); GetPlayerName(playerid, plname, 24);
		format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableUsers__"` (`Name`,`Key`,`Fightstyle`) VALUES ('%s', '%s', '%i')",
		plname, hash, FightStyles[random(sizeof(FightStyles))]);
		if(Db::query(query) && Db::affected_rows()) {
			Pl::Info[playerid][pID] = Db::insert_id();
			format(dialog, sizeof dialog, "Вы зашли как %s! Пожалуйста, авторизуйтесь!\n\
			Пароль необходимо вводить без команды /login", plname);
			SPD(playerid, D_AUTH, DIALOG_STYLE_PASSWORD, "[RP]GRANDWORLD AUTORISATION. Введите ваш пароль!", dialog, "LOGIN", "CANCEL");
		}
	}
	return 1;
}

public: updatePlayerData(playerid) {
	if(Pl::isLogged(playerid)) {
		new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
		new hidx = Pl::Info[playerid][pHouseKey];
		if(IsValidBiz(bidx)) UpdateBizz(bidx);
		if(IsValidHouse(hidx)) UpdateHouse(hidx);

		Pl::Info[playerid][pLastVisit] = gettime();
		format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET ");
		scf(query, src, "`Level`='%i',", Pl::Info[playerid][pLevel]);
		scf(query, src, "`Admin`='%i',", Pl::Info[playerid][pAdmin]);
		scf(query, src, "`Helper`='%i',", Pl::Info[playerid][pHelper]);
		scf(query, src, "`Vip`='%i',", Pl::Info[playerid][pVip]);
		scf(query, src, "`Reg`='%i',", Pl::Info[playerid][pReg]);
		scf(query, src, "`Sex`='%i',", Pl::Info[playerid][pSex]);
		scf(query, src, "`Age`='%i',", Pl::Info[playerid][pAge]);
		scf(query, src, "`Origin`='%i',", Pl::Info[playerid][pOrigin]);
		scf(query, src, "`Muted`='%i',", Pl::Info[playerid][pMuted]);
		scf(query, src, "`Exp`='%i',", Pl::Info[playerid][pExp]);
		scf(query, src, "`Money`='%i',", Rac::GetPlayerMoney(playerid));
		scf(query, src, "`Bank`='%i',", Pl::Info[playerid][pBank]);
		scf(query, src, "`Crimes`='%i',", Pl::Info[playerid][pCrimes]);
		scf(query, src, "`Kill`='%i',", Pl::Info[playerid][pKills]);
		scf(query, src, "`Time`='%i',", Pl::Info[playerid][pTime]);
		scf(query, src, "`Deaths`='%i',", Pl::Info[playerid][pDeaths]);
		scf(query, src, "`Arrested`='%i',", Pl::Info[playerid][pArrested]);
		scf(query, src, "`WLevel`='%i',", Pl::Info[playerid][pWantedL]);
		scf(query, src, "`WDeaths`='%i',", Pl::Info[playerid][pWantedD]);
		scf(query, src, "`PhoneBook`='%i',", Pl::Info[playerid][pPhoneBook]);
		scf(query, src, "`LottoNr`='%i',", Pl::Info[playerid][pLottoNr]);
		scf(query, src, "`Job`='%i',", Pl::Info[playerid][pJob]);
		scf(query, src, "`PayCheck`='%i',", Pl::Info[playerid][pPayCheck]);
		scf(query, src, "`Jailed`='%i',", Pl::Info[playerid][pJailed]);
		scf(query, src, "`JailTime`='%i',", Pl::Info[playerid][pJailTime]);
		scf(query, src, "`Mats`='%i',",Pl::Info[playerid][pMats] );
		scf(query, src, "`Drugs`='%i',", Pl::Info[playerid][pDrugs]);
		scf(query, src, "`Leader`='%i',", Pl::Info[playerid][pLeader]);
		scf(query, src, "`Member`='%i',", Pl::Info[playerid][pMember]);
		scf(query, src, "`Rank`='%i',", Pl::Info[playerid][pRank]);
		scf(query, src, "`Char`='%i',", Pl::Info[playerid][pChar]);
		scf(query, src, "`Contract`='%i',", Pl::Info[playerid][pContractTime]);
		scf(query, src, "`DetSkill`='%i',", Pl::Info[playerid][pDetSkill]);
		scf(query, src, "`SexSkill`='%i',", Pl::Info[playerid][pSexSkill]);
		scf(query, src, "`LawSkill`='%i',", Pl::Info[playerid][pLawSkill]);
		scf(query, src, "`MechSkill`='%i',", Pl::Info[playerid][pMechSkill]);
		scf(query, src, "`JackSkill`='%i',", Pl::Info[playerid][pJackSkill]);
		scf(query, src, "`CarSkill`='%i',", Pl::Info[playerid][pCarSkill]);
		scf(query, src, "`NewsSkill`='%i',", Pl::Info[playerid][pNewsSkill]);
		scf(query, src, "`DrugsSkill`='%i',", Pl::Info[playerid][pDrugsSkill]);
		scf(query, src, "`Local`='%i',", Pl::Info[playerid][pLocal]);
		scf(query, src, "`Number`='%i',", Pl::Info[playerid][pNumber]);
		scf(query, src, "`House`='%i',", Pl::Info[playerid][pHouseKey]);
		scf(query, src, "`busines`='%i',", Pl::Info[playerid][pBizKey]);
		scf(query, src, "`CarLic`='%i',", Pl::Info[playerid][pCarLic]);
		scf(query, src, "`FlyLic`='%i',", Pl::Info[playerid][pFlyLic]);
		scf(query, src, "`BoatLic`='%i',", Pl::Info[playerid][pBoatLic]);
		scf(query, src, "`GunLic`='%i',", Pl::Info[playerid][pGunLic]);
		scf(query, src, "`CarTime`='%i',", Pl::Info[playerid][pCarTime]);
		scf(query, src, "`PayDay`='%i',", Pl::Info[playerid][pPayDay]);
		scf(query, src, "`PayDayHad`='%i',", Pl::Info[playerid][pPayDayHad]);
		scf(query, src, "`CDPlayer`='%i',", Pl::Info[playerid][pCDPlayer]);
		scf(query, src, "`MutedTime`='%i',", Pl::Info[playerid][pMutedTime]);
		scf(query, src, "`Warns`='%i',", Pl::Info[playerid][pWarns]);
		scf(query, src, "`Fuel`='%i',", Pl::Info[playerid][pFuel]);
		scf(query, src, "`Fightstyle`='%i',", Pl::Info[playerid][pFightstyle]);
		scf(query, src, "`Banned`='%i',", Pl::Info[playerid][pBanned]);
		scf(query, src, "`Test`='%i',", Pl::Info[playerid][pTest]);
		scf(query, src, "`Rebuke`='%i',", Pl::Info[playerid][pRebuke]);
		scf(query, src, "`Passport`='%i,%i,%i',", Pl::Info[playerid][pPasport][0], Pl::Info[playerid][pPasport][1], Pl::Info[playerid][pPasport][2]);
		scf(query, src, "`Online`='%i'", Pl::Info[playerid][pLastVisit]);
		scf(query, src, " WHERE `ID`='%i'", Pl::Info[playerid][pID]);
		if(Db::query(query,playerid)) DEBUG[ TOTAL_SAVE_ACCOUNT ] ++;
	}
	return 1;
}

public: onPlayerLogin(playerid, password[]) {
	new pname[24], hash[50], playermoney; 
	keyProtect(password, hash);
	GetPlayerName(playerid, pname, 24);
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Name` = '%s' AND `Key` = '%s'", pname, hash);
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows() > 0) {
			if(Db::fetch_row(query) && Db::free_result()) {
				sscanf(query, "P<|,>i{s[24]s[64]}iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiia<i>[3]i",
				Pl::Info[playerid][pID],
				Pl::Info[playerid][pLevel],
				Pl::Info[playerid][pAdmin],
				Pl::Info[playerid][pHelper],
				Pl::Info[playerid][pVip],
				Pl::Info[playerid][pReg],
				Pl::Info[playerid][pSex],
				Pl::Info[playerid][pAge],
				Pl::Info[playerid][pOrigin],
				Pl::Info[playerid][pMuted],
				Pl::Info[playerid][pExp],
				playermoney,
				Pl::Info[playerid][pBank],
				Pl::Info[playerid][pCrimes],
				Pl::Info[playerid][pKills],
				Pl::Info[playerid][pTime],
				Pl::Info[playerid][pDeaths],
				Pl::Info[playerid][pArrested],
				Pl::Info[playerid][pWantedL],
				Pl::Info[playerid][pWantedD],
				Pl::Info[playerid][pPhoneBook],
				Pl::Info[playerid][pLottoNr],
				Pl::Info[playerid][pJob],
				Pl::Info[playerid][pPayCheck],
				Pl::Info[playerid][pJailed],
				Pl::Info[playerid][pJailTime],
				Pl::Info[playerid][pMats],
				Pl::Info[playerid][pDrugs],
				Pl::Info[playerid][pLeader],
				Pl::Info[playerid][pMember],
				Pl::Info[playerid][pRank],
				Pl::Info[playerid][pChar],
				Pl::Info[playerid][pContractTime],
				Pl::Info[playerid][pDetSkill],
				Pl::Info[playerid][pSexSkill],
				Pl::Info[playerid][pLawSkill],
				Pl::Info[playerid][pMechSkill],
				Pl::Info[playerid][pJackSkill],
				Pl::Info[playerid][pCarSkill],
				Pl::Info[playerid][pNewsSkill],
				Pl::Info[playerid][pDrugsSkill],
				Pl::Info[playerid][pLocal],
				Pl::Info[playerid][pNumber],
				Pl::Info[playerid][pHouseKey],
				Pl::Info[playerid][pBizKey],
				Pl::Info[playerid][pCarLic],
				Pl::Info[playerid][pFlyLic],
				Pl::Info[playerid][pBoatLic],
				Pl::Info[playerid][pGunLic],
				Pl::Info[playerid][pCarTime],
				Pl::Info[playerid][pPayDay],
				Pl::Info[playerid][pPayDayHad],
				Pl::Info[playerid][pCDPlayer],
				Pl::Info[playerid][pMutedTime],
				Pl::Info[playerid][pWarns],
				Pl::Info[playerid][pFuel],
				Pl::Info[playerid][pFightstyle],
				Pl::Info[playerid][pBanned],
				Pl::Info[playerid][pTest],
				Pl::Info[playerid][pRebuke],
				Pl::Info[playerid][pPasport],
				Pl::Info[playerid][pLastVisit]);
			}
		} else {
			WrongLogin[playerid]--;
			Send(playerid, COLOR_LIGHTRED, "*[RP]GrandWorld: Неверный пароль! В случае 3-х кратного неверного ввода выдается ВРЕМЕННЫЙ БАН!");
			format(dialog, sizeof dialog, "Вы зашли как %s! Пожалуйста, авторизуйтесь!\nВ случаии 3- кратного неверного ввода выдается ВРЕМЕННЫЙ БАН!\n\
			Оталось папыток ввода: %i\nПароль необходимо вводить без команды /login", pname, WrongLogin[playerid]);
			return SPD(playerid, D_AUTH, DIALOG_STYLE_PASSWORD, "[RP]GRANDWORLD AUTORISATION. Введите ваш пароль!", dialog, "LOGIN", "CANCEL");
		}

	} else {
		Send(playerid, COLOR_RED, "FATAL ERROR");
		return Kick(playerid);
	}
	
	if(Pl::Info[playerid][pBanned] == 1) {
		Send(playerid, COLOR_YELLOW, "{ffffff}Введите {e85209}/(q)uit {ffffff}чтобы выйти из игры");
		SPD(playerid, D_NONE, 0, "• ACCOUNT BLOCKED •", "Этот аккуант заблокирован!\nВведите /q чтобы выйти из игры", "Ок", "");
		return Kick(playerid);
	}
	
	Td::ShowForPlayer(playerid, Logo[0]);
	Td::ShowForPlayer(playerid, Time);
	Add_To_Iterator(playerid);
	ShowBizZones(playerid);
	
	if(Pl::Info[playerid][pReg] == 0) {
		SPD(playerid, D_REGG+3, 0, "Sex", "Выберете пол вашего персонажа.", "ЖЕН", "МУЖ");
	} else {
		if(Pl::Info[playerid][pAdmin] == DEV_ADMIN) {
			Iter_Add(ToglogPlayers, playerid);
			TogTP[playerid] = false;
			HidePM[playerid] = true;
		}
		
		sendf(playerid, temp, COLOR_WHITE, "*[RP]GrandWorld: Мы рады видеть тебя на сервере, %s!", pname);
		if(Pl::Info[playerid][pWantedL] > 0) {
			WantedTime[playerid] = 180;
			SetPlayerWL(playerid, Pl::Info[playerid][pWantedL]);
			sendf(playerid, temp, COLOR_YELLOW, "* Восстановление уровня розыска! Текущий уровень: %i зв.", Pl::Info[playerid][pWantedL]);
		}
		
		
		SetPColor(playerid);
		DateProp(playerid, 0, 1);
		Rac::SetPlayerMoney(playerid, playermoney);
		
		format(temp, sizeof(temp), "~w~Welcome ~n~~g~   %s", pname);
		GameTextForPlayer(playerid, temp, 6000, 1);
		Pl::setSpawnInfo(playerid);
		Rac::SpawnPlayer(playerid);
		Bl::Check(playerid);
		
		if(!Pl::Info[playerid][pAdmin]) {
			format(src, sizeof(src), "* %s (ID: %i) прокрался(ась) на ..::[RP]GrandWorld::.. [RUS]", pname, playerid);
			sendToLog(COLOR_GREY, src);
		}
		PlayerLogged{playerid} = true;
	}
	return 1;
}

stock UpdateHouse(idx) {
	new safe_info[28];
	Db::real_escape_string(HouseInfo[idx][hInfo], safe_info);
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableHouses__"` SET ");
	scf(query, src, "`Owned`='%i',", HouseInfo[idx][hOwned]);
	scf(query, src, "`Locked`='%i',", HouseInfo[idx][hLock]);
	scf(query, src, "`Owner`='%s',", HouseInfo[idx][hOwner]);
	scf(query, src, "`Info`='%s',", safe_info);
	scf(query, src, "`Price`='%i',", HouseInfo[idx][hPrice]);
	scf(query, src, "`Rent`='%i',", HouseInfo[idx][hRent]);
	scf(query, src, "`RentPrice`='%i',", HouseInfo[idx][hRentPrice]);
	scf(query, src, "`Safe`='%i',", HouseInfo[idx][hSafe]);
	scf(query, src, "`Lvl`='%i',", HouseInfo[idx][hLevel]);
	scf(query, src, "`Hel`='%i',", HouseInfo[idx][hHel]);
	scf(query, src, "`Arm`='%i',", HouseInfo[idx][hArm]);
	scf(query, src, "`Tv`='%i',", HouseInfo[idx][hTv]);
	scf(query, src, "`Int`='%i',", HouseInfo[idx][hInt]);
	scf(query, src, "`Date`='%i',", HouseInfo[idx][hDate]);
	scf(query, src, "`Veh`='%i',", HouseInfo[idx][hVeh]);
	scf(query, src, "`vCol1`='%i',", HouseInfo[idx][hvCol1]);
	scf(query, src, "`vCol2`='%i',", HouseInfo[idx][hvCol2]);
	scf(query, src, "`Mats`='%i',", HouseInfo[idx][hMats]);
	scf(query, src, "`Drugs`='%i',", HouseInfo[idx][hDrugs]);
	scf(query, src, "`Guns`='%i,%i,%i,%i,%i,%i',", HouseInfo[idx][hGuns][0], HouseInfo[idx][hGuns][1], HouseInfo[idx][hGuns][2],\
	HouseInfo[idx][hGuns][3], HouseInfo[idx][hGuns][4], HouseInfo[idx][hGuns][5]);
	scf(query, src, "`Ammos`='%i,%i,%i,%i,%i,%i',", HouseInfo[idx][hAmmos][0], HouseInfo[idx][hAmmos][1], HouseInfo[idx][hAmmos][2],\
	HouseInfo[idx][hAmmos][3], HouseInfo[idx][hAmmos][4], HouseInfo[idx][hAmmos][5]);
	scf(query, src, "`Enterx`='%f',", HouseInfo[idx][hEnterx]);
	scf(query, src, "`Entery`='%f',", HouseInfo[idx][hEntery]);
	scf(query, src, "`Enterz`='%f',", HouseInfo[idx][hEnterz]);
	scf(query, src, "`Exitx`='%f',", HouseInfo[idx][hExitx]);
	scf(query, src, "`Exity`='%f',", HouseInfo[idx][hExity]);
	scf(query, src, "`Exitz`='%f',", HouseInfo[idx][hExitz]);
	scf(query, src, "`vPosX`='%f',", HouseInfo[idx][hvX]);
	scf(query, src, "`vPosY`='%f',", HouseInfo[idx][hvY]);
	scf(query, src, "`vPosZ`='%f',", HouseInfo[idx][hvZ]);
	scf(query, src, "`vAngl`='%f',", HouseInfo[idx][hvA]);
	scf(query, src, "`Mileage`='%f' ", AutoInfo[HouseInfo[idx][hAuto]][aMileage]);
	scf(query, src, "WHERE `ID`='%i'", HouseInfo[idx][hID]);
	if(Db::query(query,idx)) DEBUG[TOTAL_SAVE_HOUSES]++;
	return 1;
}

stock Fc::Update(idx) {
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableFracVehicles__"` SET ");
	scf(query, src, "`model`='%i',", Fc::Info[idx][Fc::Model]);
	scf(query, src, "`frac`='%i',", Fc::Info[idx][Fc::FracId]);
	scf(query, src, "`rank`='%i',", Fc::Info[idx][Fc::RankId]);
	scf(query, src, "`colors`='%i,%i',", Fc::Info[idx][Fc::Color][0], Fc::Info[idx][Fc::Color][1]);
	scf(query, src, "`number`='%s',", Fc::Info[idx][Fc::Number]);
	scf(query, src, "`resp_pos`='%.3f,%.3f,%.3f,%.3f',", Fc::Info[idx][Fc::RespPos][0], Fc::Info[idx][Fc::RespPos][1], Fc::Info[idx][Fc::RespPos][2], Fc::Info[idx][Fc::RespPos][3]);
	scf(query, src, "`miles`='%f' ", AutoInfo[Fc::Info[idx][Fc::Id][1]][aMileage]);
	scf(query, src, "WHERE `ID`='%i'", Fc::Info[idx][Fc::Id][0]);
	return Db::query(query,idx);
}

stock UpdateBizz(bidx) {
	new safe_name[24], safe_extortion[24];
	Db::real_escape_string(BizzInfo[bidx][bName], safe_name);
	Db::real_escape_string(BizzInfo[bidx][bExtortion], safe_extortion);
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableBusines__"` SET ");
	scf(query, src, "`bType`='%i',", BizzInfo[bidx][bType]);
	scf(query, src, "`bOwned`='%i',", BizzInfo[bidx][bOwned]);
	scf(query, src, "`bOwner`='%s',", BizzInfo[bidx][bOwner]);
	scf(query, src, "`bName`='%s',", safe_name);
	scf(query, src, "`bExtortion`='%s',", safe_extortion);
	scf(query, src, "`bEnterX`='%f',", BizzInfo[bidx][bEnterX]);
	scf(query, src, "`bEnterY`='%f',", BizzInfo[bidx][bEnterY]);
	scf(query, src, "`bEnterZ`='%f',", BizzInfo[bidx][bEnterZ]);
	scf(query, src, "`bExitX`='%f',", BizzInfo[bidx][bExitX]);
	scf(query, src, "`bExitY`='%f',", BizzInfo[bidx][bExitY]);
	scf(query, src, "`bExitZ`='%f',", BizzInfo[bidx][bExitZ]);
	scf(query, src, "`bLevel`='%i',", BizzInfo[bidx][bLevelNeeded]);
	scf(query, src, "`bBuyPrice`='%i',", BizzInfo[bidx][bBuyPrice]);
	scf(query, src, "`bEnterCost`='%i',", BizzInfo[bidx][bEntranceCost]);
	scf(query, src, "`bTill`='%i',", BizzInfo[bidx][bTill]);
	scf(query, src, "`bLocked`='%i',", BizzInfo[bidx][bLocked]);
	scf(query, src, "`bInterior`='%i',", BizzInfo[bidx][bInterior]);
	scf(query, src, "`bProducts`='%i',", BizzInfo[bidx][bProducts]);
	scf(query, src, "`bMaxProducts`='%i',", BizzInfo[bidx][bMaxProducts]);
	scf(query, src, "`bPriceProd`='%i',", BizzInfo[bidx][bPriceProd]);
	scf(query, src, "`bGOwner`='%i' ", BizzInfo[bidx][bFrac]);
	scf(query, src, "WHERE `bID`='%i'", BizzInfo[bidx][bID]);
	if(Db::query(query,bidx)) DEBUG[ TOTAL_SAVE_BIZNES ]++;
	return 1;
}

stock RefreshBizz(b) {
	if(BizzInfo[b][bOwned]) {
		DestroyDynamicMapIcon(BizzInfo[b][bMapIcon]);
		DestroyDynamicPickup(BizzInfo[b][bPickupEnter]);
		if(BizzInfo[b][bType] != 2) BizzInfo[b][bMapIcon] = CreateDynamicMapIcon(BizzInfo[b][bEnterX],BizzInfo[b][bEnterY],BizzInfo[b][bEnterZ],36,0,-1,-1,-1,200.0);
		BizzInfo[b][bPickupEnter] = AddPickup(1239, 23, BizzInfo[b][bEnterX], BizzInfo[b][bEnterY], BizzInfo[b][bEnterZ],-1);
	} else {
		DestroyDynamicMapIcon(BizzInfo[b][bMapIcon]);
		DestroyDynamicPickup(BizzInfo[b][bPickupEnter]);
		if(BizzInfo[b][bType] != 2) BizzInfo[b][bMapIcon] = CreateDynamicMapIcon(BizzInfo[b][bEnterX],BizzInfo[b][bEnterY],BizzInfo[b][bEnterZ],52,0,-1,-1,-1,200.0);
		BizzInfo[b][bPickupEnter] = AddPickup(1272, 23, BizzInfo[b][bEnterX], BizzInfo[b][bEnterY], BizzInfo[b][bEnterZ],-1);
	}
	return 1;
}

stock SaveToSQL(idx, type = 1) {
	if(type == 2) {
		format(src, sizeof(src), "INSERT INTO `"#__DbPrefix__""#__TableVehicles__"` (");
		format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableVehicles__"` (`Model`,`pX`,`pY`,`pZ`,`pA`,");
		scf(query, temp, "`col1`,`col2`,`resp`) VALUES ('%i',", VehicleInfo[idx][vModel]);
		scf(query, temp, "'%f','%f','%f','%f',", VehicleInfo[idx][vPosX], VehicleInfo[idx][vPosY], VehicleInfo[idx][vPosZ], VehicleInfo[idx][vPosA]);
		scf(query, temp, "'%i','%i','%i')", VehicleInfo[idx][vColor1], VehicleInfo[idx][vColor2], VehicleInfo[idx][vRespTime]);

		if(Db::query(query) && Db::free_result()) {
			VehicleInfo[idx][vID] = Db::insert_id();
			print("Query successfull!");
		}
	}

	return;
}

stock UpdateToSQL(idx, type=0) {
	switch(type) {
		case 0 : {
			format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableVehicles__"` SET ");
			scf(query, src, "`Model`='%i',", VehicleInfo[idx][vModel]);
			scf(query, src, "`pX`='%f',", VehicleInfo[idx][vPosX]);
			scf(query, src, "`pY`='%f',", VehicleInfo[idx][vPosY]);
			scf(query, src, "`pZ`='%f',", VehicleInfo[idx][vPosZ]);
			scf(query, src, "`pA`='%f',", VehicleInfo[idx][vPosA]);
			scf(query, src, "`aM`='%f',", AutoInfo[VehicleInfo[idx][cID]][aMileage]);
			scf(query, src, "`col1`='%i',", VehicleInfo[idx][vColor1]);
			scf(query, src, "`col2`='%i',", VehicleInfo[idx][vColor2]);
			scf(query, src, "`resp`='%i',", VehicleInfo[idx][vRespTime]);
			scf(query, src, "`job`='%i' ", VehicleInfo[idx][vJob]);
			scf(query, src, "WHERE `ID`='%i'", VehicleInfo[idx][vID]);
			return (Db::query(query,idx));
		}
	}
	return 0;
}

stock RemoveInSQL(idx, type=1) {
	switch(type) {
		case 2 : {
			format(src, sizeof(src), "DELETE FROM `"#__DbPrefix__""#__TableVehicles__"` WHERE `ID` = '%i'", VehicleInfo[idx][vID]);
			if(Db::query(src) && Db::free_result()) return true;
		}
	}

	return false;
}

stock updatePickup( i ) {
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TablePickups__"` SET ");
	scf(query,src,"`models`='%i,%i',", Tp::Info[i][Tp::Model][0], Tp::Info[i][Tp::Model][1]);
	scf(query,src,"`types`='%i,%i',", Tp::Info[i][Tp::Type][0], Tp::Info[i][Tp::Type][1]);
	scf(query,src,"`interiors`='%i,%i',", Tp::Info[i][Tp::Inter][0], Tp::Info[i][Tp::Inter][1]);
	scf(query,src,"`worlds`='%i,%i',", Tp::Info[i][Tp::World][0], Tp::Info[i][Tp::World][1]);
	scf(query,src,"`portal1`='%.4f,%.4f,", Tp::Info[i][Tp::Portal1][0], Tp::Info[i][Tp::Portal1][1]);
	scf(query,src,"%.4f,%.4f',", Tp::Info[i][Tp::Portal1][2], Tp::Info[i][Tp::Portal1][3]);
	scf(query,src,"`portal2`='%.4f,%.4f,", Tp::Info[i][Tp::Portal2][0], Tp::Info[i][Tp::Portal2][1]);
	scf(query,src,"%.4f,%.4f',", Tp::Info[i][Tp::Portal2][2], Tp::Info[i][Tp::Portal2][3]);
	scf(query,src,"`allowed`='%i' ", arrayToBin(Tp::Info[i][Tp::Allowed], MAX_FRAC));
	scf(query,src,"WHERE `id`='%i'", Tp::Info[i][Tp::Id]);
	return Db::query(query, i);
}

stock updateAntiDmZone(zone) {
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableAntidmzones__"` SET ");
	scf(query,src,"`world`='%i',",AntiDmInfo[zone][e_AntiDmWorld]);
	scf(query,src,"`coord`='%.4f,",AntiDmInfo[zone][e_AntiDmCoord][0]);
	scf(query,src,"%.4f,",AntiDmInfo[zone][e_AntiDmCoord][1]);
	scf(query,src,"%.4f,",AntiDmInfo[zone][e_AntiDmCoord][2]);
	scf(query,src,"%.4f'",AntiDmInfo[zone][e_AntiDmCoord][3]);
	scf(query,src," WHERE `id`='%i'",AntiDmInfo[zone][e_AntiDmZoneId]);
	return Db::query(query, zone);
}


public OnPlayerCommandReceived(playerid, cmdtext[]) {
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не авторизованы!");
	return 1;
}


public OnPlayerCommandPerformed(playerid, cmdtext[], success) {
	switch(success) {
		case -1 : Send(playerid, COLOR_GRAD1, "* Такой команды не существует!");
	}
    return 1;
}


CMD:donate(playerid, params[]) {
	return ShowDonateMenu(playerid);
}

CMD:givedp(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_WHITE, "Введите: /givedp [id/name] [amount]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Pl::Info[playerid][pDonateMoney] += params[1];
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /givedp к игроку %s[%i][%idp]", sendername, playername, params[0], params[1]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Администратор %s дал вам %i Donate Points", sendername, params[1]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:setdp(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "s[24]i", params[1], params[0])) return Send(playerid, COLOR_WHITE, "Введите: /setdp [val] [amount]");
	if(!(0 <= params[0] <= cellmax)) return Send(playerid, COLOR_WHITE, "* Invalid value!");
	if(strcmp(params[1], "skin_price", false) == 0) {
		DonateInfo[dSkinPrice] = params[0];
	} else if(strcmp(params[1], "cash_price", false) == 0) {
		DonateInfo[dCashPrice] = params[0];
	} else if(strcmp(params[1], "invite_price", false) == 0) {
		DonateInfo[dInvitePrice] = params[0];
	} else if(strcmp(params[1], "warn_price", false) == 0) {
		DonateInfo[dWarnPrice] = params[0];
	} else if(strcmp(params[1], "vip_price", false) == 0) {
		DonateInfo[dVIPPrice] = params[0];
	} else {
		params[0] = -1;
	}
	if(params[0] != -1) {
		SaveDonateInfo();
		format(string, sizeof string, "* Новое значение для \"%s\" установлено на %i", params[1], params[0]);
		Send(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:put(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 4)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(GetPlayerVehicleID(playerid)) return Send(playerid, COLOR_GREY, "* Вы уже в транспорте!");
	new vehicleid = ClosestVeh(playerid, 3.0);
	if(vehicleid == INVALID_VEHICLE_ID) return Send(playerid, COLOR_GREY, "Нет машин поблизости");
	return Rac::PutPlayerInVehicle(playerid, vehicleid, 0);
}

CMD:setpayday(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /setpayday [ид/часть имени] [amount]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	Pl::Info[params[0]][pPayDay] = params[1];
	return 1;
}

CMD:fakekill(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /fakekill [ид/часть имени] [причина]");
	SyncInfo[playerid][sKillerID] = params[0];
	SyncInfo[playerid][sReasonID] = params[1];
	return Rac::SetPlayerHealth(playerid, 0.0);
}

CMD:loadmap(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "s[24]I(-1)I(-1)I(-1)", params[3], params[0], params[1], params[2]))
	return Send(playerid, COLOR_GREY, "Введите: /reloadmap [mapfile]");
	new mapid = map::Load(params[3], params[0], params[1], params[2]);
	if(mapid == INVALID_MAP_ID) return Send(playerid, COLOR_GREY, "* Invalid map id!");
	format(string, sizeof string, "* Карта загружена! [id:%i]", mapid);
	Send(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:unloadmap(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /unloadmap [mapfile]");
	if(!map::Destroy(params[0])) return Send(playerid, COLOR_GREY, "* Invalid map id!");
	format(string, sizeof string, "* Карта выгружена! [id:%i]", params[0]);
	Send(playerid, COLOR_YELLOW, string);
	return 1;
}
	
CMD:togglereg(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	switch(StuffInfo[sRegged]) {
		case 0 : {
			Send(playerid, COLOR_YELLOW, "* Регистрация включена!");
			StuffInfo[sRegged] = 1;
		}
		case 1 : {
			Send(playerid, COLOR_YELLOW, "* Регистрация отключена!");
			StuffInfo[sRegged] = 0;
		}
	}
	SaveStuff();
	return 1;
}

CMD:tune(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /tune [componentid]");
	new vehicle = GetPlayerVehicleID(playerid);
	if(vehicle && AddVehicleComponent(vehicle, params[0])) {
		Send(playerid, COLOR_YELLOW, "* You tune the car!");
	} else {
		Send(playerid, COLOR_GREY, "* Invalid component id!");
	}
	return 1;
}

CMD:sobcheck(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /sobcheck [id/part name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(AFKInfo[params[0]][afk_State]) return Send(playerid, COLOR_GREY, "* Игрок в AFK!");
	if(GetPlayerVehicleID(params[0])) return Send(playerid, COLOR_GREY, "* Игрок не должен быть в транспорте!");
	new Float:x, Float:y, Float:z;
	GetPlayerCameraPos(params[0], x, y, z);
	Rac::TogglePlayerControllable(params[0], false);
	SetTimerEx("onSobeitCheck", 3700, false, "if", params[0], z);
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /sobcheck к игроку %s[%s]", sendername, playername, FracInfo[GetFracID(params[0])][fName]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:ptmcheck(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(Rac::GetPlayerState(playerid) != 9) return Send(playerid, COLOR_GREY, "* Только в режиме спектирования!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "* Введите: /ptmcheck [id/part name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	new targetid = GetPlayerTargetPlayer(params[0]);
	if(targetid != INVALID_PLAYER_ID && Rac::GetPlayerState(params[0]) == 1) {
		new Float:x[2], Float:y[2], Float:z[2], Float:a;
		GetPlayerPos(params[0], x[0], y[0], z[0]);
		GetPlayerFacingAngle(params[0], a);
		GetXYInFrontOfPoint(x[0], y[0], a, -3.0);
		GetPlayerPos(targetid, x[1], y[1], z[1]);
		Rac::SetPlayerPos(targetid, x[0], y[0], z[0]);
		SetTimerEx("onPTMCheck", 2000, false, "iifff", params[0], targetid, x[1], y[1], z[1]);
		getname(playerid -> sendername, params[0] -> playername);
		format(string, sizeof string, "[AdmWarn] * %s применил команду /ptmpcheck к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
		SendToAdmin(COLOR_YELLOW, string, 3, 3);
	} else {
		Send(playerid, COLOR_GREY, "* Недостаточно условий!");
	}
	return 1;
}

CMD:payday(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	SetTimer("onPayDay", 100, false);
	return 1;
}

CMD:int(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return 1 ;
	if(sscanf(params, "I(-1)", params[0])) return 1;
	if(params[0] <= -1 || params[0] >= sizeof SAInteriors) {
		params[0] = GetPVarInt(playerid, "SelectedItem");
		if(params[0] <= -1) params[0] = 0;
	}
	Rac::SetPlayerPos(playerid, SAInteriors[params[0]][iX], SAInteriors[params[0]][iY], SAInteriors[params[0]][iZ]);
	Rac::SetPlayerInterior(playerid, SAInteriors[params[0]][iI]);
	Rac::SetPlayerVirtualWorld(playerid, 100+playerid);
	SetPVarInt(playerid, "SelectedItem", params[0]);
	ShowMenuForPlayer(SAInteriorsMenu, playerid);
	return 1;
}

CMD:cambehind(playerid, params[]) {
	return SetCameraBehindPlayer(playerid);
}

CMD:crash(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return 1 ;
	if(!sscanf(params, "u", params[0])) {
		if(IsPlayerConnected(params[0])) {
			for(new i; i != 6; ++i) {
				GameTextForPlayer(params[ 0 ], "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 1000, i);
			}
		}
	}
	return 1;
}

CMD:addskin(playerid, params[]) {
	if( !Pl::isAdmin(playerid, 5) ) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if( sscanf(params, "ii", params[0], params[1]) ) return Send(playerid, COLOR_GREY, "Введите: /fracname [fracid] [skinid]");
	if( skin::find( params[0], params[1] ) ) return Send(playerid, COLOR_GREY, "* Skin found!");
	if( !skin::add( params[0], params[1] ) ) return Send(playerid, COLOR_GREY, "* Unknown skin id!");
	format( query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableFracSkins__"` (`f_id`,`skin_id`) VALUES ('%i','%i')", params[0], params[1]);
	if( Db::query( query ) && Db::affected_rows() ) Send(playerid, COLOR_YELLOW, "* Скин добавлен!");
	else
	{
		skin::remove( params[0], params[1] );
		Send(playerid, COLOR_YELLOW, "* Ошибка при добавлении!");
	}
	return 1;
}

CMD:delskin(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "ii", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /fracname [fracid] [skinid]");
	if(!skin::find(params[0], params[1])) return Send(playerid, COLOR_GREY, "* Skin not found!");
	if(!skin::remove(params[0], params[1])) return Send(playerid, COLOR_GREY, "* Unknown skin id!");
	format(query, sizeof query, "DELETE FROM `"#__DbPrefix__""#__TableFracSkins__"` WHERE `f_id` = '%i' AND `skin_id` = '%i'", params[0], params[1]);
	if(Db::query(query) && Db::affected_rows()) Send(playerid, COLOR_YELLOW, "* Скин удален!");
	else Send(playerid, COLOR_YELLOW, "* Ошибка при удалении!");

	return 1;
}

CMD:fracname(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "is[36]", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /fracname [fracid] [name]");
	if(!regex_match_exid(params[1], ValidText)) return Send(playerid, COLOR_GREY, "* Недопустимое название!");
	if(!SetFracName(params[0], params[1])) return Send(playerid, COLOR_GREY, "* Unknown frac id!");
	Send(playerid, COLOR_YELLOW, "* Название фракции изменено!");
	return 1;
}

CMD:sqllog(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pAdmin] < 5 && !IsPlayerAdmin(playerid)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	Db::debug(bdlog = !bdlog);
	format(string, sizeof string, "* Debug %s", bdlog?("activated!"):("de-activated"));
	Send(playerid, COLOR_GREY, string);
	return 1;
}

CMD:netstat(playerid, params[]) {
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /netstat [playerid]");
	if(params[0] == 999) Pl::NetStats[playerid] = params[0];
	else if(params[0] == 1000) Pl::NetStats[playerid] = params[0];
	else if(Pl::isLogged(params[0])) Pl::NetStats[playerid] = params[0];
	else Send(playerid, COLOR_GREY, "* Этот игрок не подключен!");

	return 1;
}

CMD:atun(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /atun [componentid]");
	if(params[0] < 1000 || params[0] > 1193) return Send(playerid, COLOR_GREY, "Неверный компонент!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if( !vehicleid ) return Send(playerid, COLOR_GREY, "* Вы не в транспорте!");
	AutoInfo[vehicleid][aTuning][GetVehicleComponentType(params[0])] = params[0];
	AddVehicleComponent(vehicleid, params[0]);
	Send(playerid, COLOR_YELLOW, " * Комипонент был добавлен!");
	return 1;
}

CMD:savecam(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	new Float:player[4], Float:camera[3], Float:vector[3];
	GetPlayerPos(playerid, player[0], player[1], player[2]);
	GetPlayerFacingAngle(playerid, player[3]);
	GetPlayerCameraPos(playerid, camera[0], camera[1], camera[2]);
	GetPlayerCameraFrontVector(playerid, vector[0], vector[1], vector[2]);
	format(string, sizeof string, "Player:(%.4f, %.4f, %.4f, %.4f)", player[0], player[1], player[2], player[3]);
	writeFile("campos.txt", string);
	format(string, sizeof string, "Camera:(%.4f, %.4f, %.4f)", camera[0], camera[1], camera[2]);
	writeFile("campos.txt", string);
	format(string, sizeof string, "LookAt:(%.4f, %.4f, %.4f)", camera[0]+(vector[0]*4), camera[1]+(vector[1]*4), camera[2]+(vector[2]*4));
	writeFile("campos.txt", string);		
	Send(playerid, COLOR_YELLOW, "* Camera pos saved");
	return 1;
}

CMD:settime(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Use: /settime [id] [time]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	Pl::Info[params[0]][pTime] = params[1];
	return 1;
}

CMD:settest(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Use: /settime [id] [time]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	Pl::Info[params[0]][pTest] = params[1];
	return 1;
}

CMD:velocity(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "ucf", params[0], params[1], distance)) return Send(playerid, COLOR_GREY, "Used: /superjmp [id] [] [float]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(GetPlayerState(params[0]) == 2 || GetPlayerState(params[0]) == 3) {
		new v_id = GetPlayerVehicleID(params[0]);
		GetVehicleVelocity(v_id, posx, posy, posz);
		switch(params[1])
		{
			case 'x' : SetVehicleVelocity(v_id, distance, posy, posz);
			case 'y' : SetVehicleVelocity(v_id, posx, distance, posz);
			case 'z' : SetVehicleVelocity(v_id, posx, posy, distance);
			
		}
	}
	else
	{
		GetPlayerVelocity(params[0], posx, posy, posz);
		switch(params[1])
		{
			case 'x' : SetPlayerVelocity(params[0], distance, posy, posz);
			case 'y' : SetPlayerVelocity(params[0], posx, distance, posz);
			case 'z' : SetPlayerVelocity(params[0], posx, posy, distance);
		}
	}
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /velocity к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 3, 3);
	return 1;
}

CMD:angular(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "ucf", params[0], params[1], distance)) return Send(playerid, COLOR_GREY, "Used: /superjmp [id] [] [float]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	switch(GetPlayerState(params[0])) {
		case 2, 3 : {
			new veh = GetPlayerVehicleID(params[0]);
			switch(params[1]) {
				case 'x' : SetVehicleAngularVelocity(veh, distance, 0.0, 0.0);
				case 'y' : SetVehicleAngularVelocity(veh, 0.0, distance, 0.0);
				case 'z' : SetVehicleAngularVelocity(veh, 0.0, 0.0, distance);	
			}
			getname(playerid -> sendername, params[0] -> playername);
			format(string, sizeof string, "[AdmWarn] * %s применил команду /angular к игроку %s[%s]", sendername, playername, FracInfo[GetFracID(params[0])][fName]);
			SendToAdmin(COLOR_YELLOW, string, 3, 3);
		}
	}

	return 1;
}

CMD:addcar(playerid, params[]) { new string[144], sendername[24];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(IsPlayerInAnyVehicle(playerid)) return Send(playerid, COLOR_GREY, "* Вы не должны сидеть в машине!");
	if(sscanf(params, "iiii", params[0], params[1], params[2], params[3])) return Send(playerid, COLOR_GREY, "Введите: /addcar [model] [vColor1] [vColor2] [vRespTime time]");
	if(params[0] < 400 || params[0] > 611) return Send(playerid, COLOR_GREY, "* Неверный ID моднли!");
	if(params[1] < -1 || params[1] > 126) return Send(playerid, COLOR_GREY, "* ID цвета не может быть ниже 0 или выше 126!");
	if(params[2] < -1 || params[2] > 126) return Send(playerid, COLOR_GREY, "* ID цвета не может быть ниже 0 или выше 126 !");

	new idx = TOTAL_VEHICLES; TOTAL_VEHICLES++;
	GetPlayerPos(playerid, VehicleInfo[idx][vPosX], VehicleInfo[idx][vPosY], VehicleInfo[idx][vPosZ]);
	GetPlayerFacingAngle(playerid, VehicleInfo[idx][vPosA]);
	VehicleInfo[idx][vModel] = params[0]; VehicleInfo[idx][vColor1] = params[1];
	VehicleInfo[idx][vColor2] = params[2]; VehicleInfo[idx][vRespTime] = params[3];
	VehicleInfo[idx][cID] = CreateVeh (
		VehicleInfo[idx][vModel],
		VehicleInfo[idx][vPosX],
		VehicleInfo[idx][vPosY],
		VehicleInfo[idx][vPosZ],
		VehicleInfo[idx][vPosA],
		VehicleInfo[idx][vColor1],
		VehicleInfo[idx][vColor2],
		VehicleInfo[idx][vRespTime]
	);
	
	Iter_Add(JobVehicles[VehicleInfo[idx][vJob]], VehicleInfo[idx][cID]);
	SetVehicleNumber(VehicleInfo[idx][cID]);
	SaveToSQL(idx,2);
	
	Rac::PutPlayerInVehicle(playerid, VehicleInfo[idx][cID], 0);
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /addcar", sendername);
	SendToAdmin(COLOR_LIGHTBLUE, string, 4, 3);
	return 1;
}

CMD:parkcar(playerid, params[]) { new string[144], sendername[24];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(GetPlayerState(playerid) != 2) return Send(playerid, COLOR_GREY, "* Вы не сидите в машине!");

	for(new idx; idx < TOTAL_VEHICLES; idx++) {
		if(IsPlayerInVehicle(playerid, VehicleInfo[idx][cID])) {
			AutoInfo[0][aMileage] = AutoInfo[VehicleInfo[idx][cID]][aMileage];
			GetVehiclePos(VehicleInfo[idx][cID], VehicleInfo[idx][vPosX], VehicleInfo[idx][vPosY], VehicleInfo[idx][vPosZ]);
			GetVehicleZAngle(VehicleInfo[idx][cID], VehicleInfo[idx][vPosA]);
			DestroyVeh(VehicleInfo[idx][cID]);
			VehicleInfo[idx][cID] = CreateVeh(
				VehicleInfo[idx][vModel],
				VehicleInfo[idx][vPosX],
				VehicleInfo[idx][vPosY],
				VehicleInfo[idx][vPosZ],
				VehicleInfo[idx][vPosA],
				VehicleInfo[idx][vColor1],
				VehicleInfo[idx][vColor2],
				VehicleInfo[idx][vRespTime]
			);
			AutoInfo[VehicleInfo[idx][cID]][aMileage] = AutoInfo[0][aMileage];
			SetVehicleNumber(VehicleInfo[idx][cID]);
			UpdateToSQL(idx, 0);
			Rac::PutPlayerInVehicle(playerid, VehicleInfo[idx][cID], 0);
			return Send(playerid, COLOR_YELLOW, "* Машина была припаркована!");
		}
	}
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /parkcar.", sendername);
	SendToAdmin(COLOR_LIGHTBLUE, string, 4, 3); return 1;
}

CMD:destcar(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(GetPlayerState(playerid) != 2) return Send(playerid, COLOR_GREY, "* Вы не сидите в машине!");

	for(new i; i < TOTAL_VEHICLES; i++) {
		if(IsPlayerInVehicle(playerid, VehicleInfo[i][cID])) {
			AutoInfo[VehicleInfo[i][cID]][aMileage] = 0.0;
			DestroyVeh(VehicleInfo[i][cID]);
			RemoveInSQL(i, 2);
			TOTAL_VEHICLES --;
			Iter_Remove(JobVehicles[VehicleInfo[i][vJob]], VehicleInfo[i][cID]);
			VehicleInfo[i][vID] = VehicleInfo[TOTAL_VEHICLES][vID];
			VehicleInfo[i][cID] = VehicleInfo[TOTAL_VEHICLES][cID];
			VehicleInfo[i][vModel] = VehicleInfo[TOTAL_VEHICLES][vModel];
			VehicleInfo[i][vPosX] = VehicleInfo[TOTAL_VEHICLES][vPosX];
			VehicleInfo[i][vPosY] = VehicleInfo[TOTAL_VEHICLES][vPosY];
			VehicleInfo[i][vPosZ] = VehicleInfo[TOTAL_VEHICLES][vPosZ];
			VehicleInfo[i][vPosA] = VehicleInfo[TOTAL_VEHICLES][vPosA];
			VehicleInfo[i][vColor1] = VehicleInfo[TOTAL_VEHICLES][vColor1];
			VehicleInfo[i][vColor2] = VehicleInfo[TOTAL_VEHICLES][vColor2];
			VehicleInfo[i][vRespTime] = VehicleInfo[TOTAL_VEHICLES][vRespTime];
			return Send(playerid, COLOR_YELLOW, "* Машина была удалена!");
		}
	}

	return 1;
}

CMD:changehc(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "iiii", params[0], params[1], params[2], params[3])) return Send(playerid, COLOR_GREY, "Введите: /changehc [houseid] [model] [vColor1] [vColor2]");
	if(!IsValidHouse(params[0])) return Send(playerid, COLOR_GREY, "* Неверный ID дома!");
	if(params[1] < 400 || params[1] > 611) return Send(playerid, COLOR_GREY, "* Неверный ID моднли!");
	if(params[2] < 0 || params[2] > 126) return Send(playerid, COLOR_GREY, "* ID цвета не может быть ниже 0 или выше 126!");
	if(params[3] < 0 || params[3] > 126) return Send(playerid, COLOR_GREY, "* ID цвета не может быть ниже 0 или выше 126 !");
	if(HouseInfo[params[0]][hVeh] >= 400 && HouseInfo[params[0]][hVeh] <= 611) ResetTuning(HouseInfo[params[0]][hAuto], 1, params[0]);
	AutoInfo[0][aMileage] = AutoInfo[HouseInfo[params[0]][hAuto]][aMileage];
	GetPlayerPos(playerid, HouseInfo[params[0]][hvX], HouseInfo[params[0]][hvY], HouseInfo[params[0]][hvZ]);
	GetPlayerFacingAngle(playerid, HouseInfo[params[0]][hvA]);
	DestroyVeh(HouseInfo[params[0]][hAuto]);
	HouseInfo[params[0]][hVeh] = params[1];
	HouseInfo[params[0]][hvCol1] = params[2];
	HouseInfo[params[0]][hvCol1] = params[3];
	HouseInfo[params[0]][hAuto] = CreateVeh(HouseInfo[params[0]][hVeh],
	HouseInfo[params[0]][hvX], HouseInfo[params[0]][hvY],
	HouseInfo[params[0]][hvZ], HouseInfo[params[0]][hvA],
	HouseInfo[params[0]][hvCol1], HouseInfo[params[0]][hvCol2], 18000);
	AutoInfo[HouseInfo[params[0]][hAuto]][aMileage] = AutoInfo[0][aMileage];
	SetVehicleNumber(HouseInfo[params[0]][hAuto]);
	Rac::PutPlayerInVehicle(playerid, HouseInfo[params[0]][hAuto], 0);
	ToggleVehicleDoor(HouseInfo[params[0]][hAuto], false);
	UpdateHouse(params[0]);
	return Send(playerid, COLOR_YELLOW, "* Машина была создана!");
}

CMD:destroyhc(playerid, params[]) {
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не авторизованы!");
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /destroyhc [houseid]");
	if(!IsValidHouse(params[0])) return Send(playerid, COLOR_GREY, "* Неверный ID дома!");
	if(HouseInfo[params[0]][hVeh] < 400 || HouseInfo[params[0]][hVeh] > 611) return Send(playerid, COLOR_GREY, "* У этого дома нет машины!");
	AutoInfo[HouseInfo[params[0]][hAuto]][aMileage] = 0.0; HouseInfo[params[0]][hVeh] = 0;
	DestroyVeh(HouseInfo[params[0]][hAuto]); UpdateHouse(params[0]);
	return Send(playerid, COLOR_YELLOW, "* Машина была удалена!");
}

CMD:apark(playerid, params[]) {
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не авторизованы!");
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	new veh = GetPlayerVehicleID(playerid);
	for(new o = FIRST_HOUSE; o < TOTAL_HOUSES; o++) {
		if(HouseInfo[o][hAuto] == veh) {
			AutoInfo[0][aMileage] = AutoInfo[HouseInfo[o][hAuto]][aMileage];
			GetVehiclePos(HouseInfo[o][hAuto], HouseInfo[o][hvX], HouseInfo[o][hvY], HouseInfo[o][hvZ]);
			GetVehicleZAngle(HouseInfo[o][hAuto], HouseInfo[o][hvA]); DestroyVeh(HouseInfo[o][hAuto]);
			HouseInfo[o][hAuto] = CreateVeh(HouseInfo[o][hVeh],
			HouseInfo[o][hvX], HouseInfo[o][hvY],
			HouseInfo[o][hvZ], HouseInfo[o][hvA],
			HouseInfo[o][hvCol1], HouseInfo[o][hvCol2], 18000);
			AutoInfo[HouseInfo[o][hAuto]][aMileage] = AutoInfo[0][aMileage];
			SetVehicleNumber(HouseInfo[o][hAuto]);
			AddTuning(HouseInfo[o][hAuto]);
			Rac::PutPlayerInVehicle(playerid, HouseInfo[o][hAuto], 0);
			return Send(playerid, COLOR_YELLOW, "* Машина была припаркована в этом месте!");
		}
	}
	Send(playerid, COLOR_GREY, "* Это не домашная машина!");
	return 1;
}

CMD:park(playerid, params[]) { new sendername[24];
	new hid = Pl::Info[playerid][pHouseKey];
	GetPlayerName(playerid, sendername, 24);
	if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
	if(strcmp(sendername, HouseInfo[hid][hOwner], true) == 0)
	{
		new veh = GetPlayerVehicleID(playerid);
		if(HouseInfo[hid][hAuto] != veh) return Send(playerid, COLOR_GREY, "* Это не домашняя машина!");
		if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hid][hEnterx], HouseInfo[hid][hEntery], HouseInfo[hid][hEnterz])) {
			AutoInfo[0][aMileage] = AutoInfo[HouseInfo[hid][hAuto]][aMileage];
			GetVehiclePos(HouseInfo[hid][hAuto], HouseInfo[hid][hvX], HouseInfo[hid][hvY], HouseInfo[hid][hvZ]);
			GetVehicleZAngle(HouseInfo[hid][hAuto], HouseInfo[hid][hvA]); DestroyVeh(HouseInfo[hid][hAuto]);
			HouseInfo[hid][hAuto] = CreateVeh(HouseInfo[hid][hVeh], HouseInfo[hid][hvX], HouseInfo[hid][hvY], HouseInfo[hid][hvZ], HouseInfo[hid][hvA], HouseInfo[hid][hvCol1], HouseInfo[hid][hvCol2], 180000);
			AutoInfo[HouseInfo[hid][hAuto]][aMileage] = AutoInfo[0][aMileage];
			SetVehicleNumber(HouseInfo[hid][hAuto]);
			AddTuning(HouseInfo[hid][hAuto]);
			Rac::PutPlayerInVehicle(playerid, HouseInfo[hid][hAuto], 0);
			Send(playerid, COLOR_YELLOW, "* Машина была припаркована в этом месте!");
		}
		else Send(playerid, COLOR_GREY, "* Вы слишком далеко от дома!");
	}
	return 1;
}

CMD:bl(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsAGang(playerid) && !IsAMafia(playerid)) return Send(playerid, COLOR_GREY, "* Вы не член банды/мафии");
	new fracid = GetFracID(playerid);
	if(sscanf(params, "uS(none)[36]", params[0], params[1])) return Bl::Show(playerid, fracid);
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if((GetBRank(fracid) > Pl::Info[playerid][pRank]) && (Pl::Info[playerid][pLeader] < 1)) {
		format(string, sizeof string, "* Вам нужен как минимум %d-й ранг!", GetBRank(fracid));
		Send(playerid, COLOR_GREY, string);
	} else {
		if(strcmp(params[1], "none", false) == 0) {
			if(!Bl::Info[params[0]][Bl::onFrac][fracid]) return Send(playerid, COLOR_GREY, "* Этого игрока нет в вашем ЧС!");
			Bl::Remove(params[0], fracid);
			getname(playerid->sendername, params[0]->playername);
			format(string, sizeof string, "[BLACK LIST] %s %s вычеркнул Вас из черного списка %s", RankInfo[fracid][Pl::Info[playerid][pRank]], sendername, FracInfo[fracid][fName]);
			Send(params[0], COLOR_AZTECAS, string);
			format(string, sizeof string, "[BLACK LIST] %s %s вычеркнул %s из черного списка %s", RankInfo[fracid][Pl::Info[playerid][pRank]], sendername, playername, FracInfo[fracid][fName]);
			sendToFamily(fracid, COLOR_AZTECAS, string);
		} else {
			if(fracid == GetFracID(params[0])) return Send(playerid, COLOR_GREY, "* Это невозможно!");
			if(Bl::Info[params[0]][Bl::onFrac][fracid]) return Send(playerid, COLOR_GREY, "* Этот игрок уже есть в вашем ЧС!");
			if(strlen(params[1]) > 30) return Send(playerid, COLOR_GREY, "* Слишком длинная причина!");
			Bl::Add(params[0], playerid, params[1]);
			getname(playerid -> sendername, params[0] -> playername);
			format(string, sizeof string, "[BLACK LIST] %s %s внес Вас в черный список %s, причина: %s", RankInfo[fracid][Pl::Info[playerid][pRank]], sendername, FracInfo[fracid][fName],params[1]);
			Send(params[0], COLOR_AZTECAS, string);
			format(string, sizeof string, "[BLACK LIST] %s %s внес %s в черный список %s, причина: %s", RankInfo[fracid][Pl::Info[playerid][pRank]], sendername, playername, FracInfo[fracid][fName], params[1]);
			sendToFamily(fracid, COLOR_AZTECAS, string);
		}
	}
	return 1;
}
	
CMD:bmenu(playerid, params[]) { new sendername[24];
	new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
	GetPlayerName(playerid, sendername, 24);
	if(!IsValidBiz(bidx)) return Send(playerid, COLOR_GREY, "* У Вас нет бизнеса!");
	if(strcmp(sendername, BizzInfo[bidx][bOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет бизнеса!");
	return ShowDialog(playerid, D_BMENU, DIALOG_STYLE_LIST, "[Biz Menu] Выберете пункт", "list/bmenu.lst", "ENTER", "CANCLE");
}

CMD:hmenu(playerid, params[]) { new sendername[24];
	new hidx = Pl::Info[playerid][pHouseKey];
	GetPlayerName(playerid, sendername, 24);
	if(!IsValidHouse(hidx)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
	if(strcmp(sendername, HouseInfo[hidx][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
	return ShowDialog(playerid, D_HMENU, DIALOG_STYLE_LIST, "[House Menu]", "list/hmenu.lst", "ENTER", "CANCLE");
}

CMD:lmenu(playerid, params[]) {
	if(!Pl::Info[playerid][pLeader]) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	ShowLMenu(playerid);
	return 1;
}

CMD:antidmzone(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 5) ) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(TOTAL_ANTIDM_ZONES >= sizeof AntiDmInfo ) return Send(playerid, COLOR_GREY, "* Создано макс. кол-во зон!");
	if(sscanf(params, "F(20.0)", distance)) return Send(playerid, COLOR_GREY, "Введите: /antidmzone [radius]");
	format(string, sizeof string, "INSERT INTO `"#__DbPrefix__""#__TableAntidmzones__"` (`coord`) VALUES ('0.0,0.0,0.0,%.4f')", params[0]);
	if(Db::query(string,-1,-1,Db::handle) && Db::affected_rows(Db::handle)) {
		new zone = TOTAL_ANTIDM_ZONES++;
		AntiDmInfo[zone][e_AntiDmZoneId] = Db::insert_id(Db::handle);
		AntiDmInfo[zone][e_AntiDmWorld] = GetPlayerVirtualWorld(playerid);
		AntiDmInfo[zone][e_AntiDmCoord][3] = distance;
		GetPlayerPos (
			playerid,
			AntiDmInfo[zone][e_AntiDmCoord][0],
			AntiDmInfo[zone][e_AntiDmCoord][1],
			AntiDmInfo[zone][e_AntiDmCoord][2]
		);
		AntiDmInfo[zone][e_AntiDmZone] = CreateDynamicSphere(
			AntiDmInfo[zone][e_AntiDmCoord][0],
			AntiDmInfo[zone][e_AntiDmCoord][1],
			AntiDmInfo[zone][e_AntiDmCoord][2],
			AntiDmInfo[zone][e_AntiDmCoord][3],
			AntiDmInfo[zone][e_AntiDmWorld]
		);
		updateAntiDmZone(zone), Send(playerid, -1, "* Анти-дм зона создана!");
	}
	return 1;
}

CMD:addpic(playerid, params[]) { new string[144];
	if( !Pl::isAdmin(playerid, 5) ) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if( TOTAL_PORTAL >= sizeof Tp::Info ) return Send(playerid, COLOR_GREY, "* Создано макс. кол-во пикапов!");	
	if( sscanf(params, "I(1318)I(-1)I(23)", params[0],params[1],params[2]))
		return Send(playerid, COLOR_GREY, "Введите: /addpickup [modelid]");

	format(string, sizeof string, "INSERT INTO `"#__DbPrefix__""#__TablePickups__"` (`models`) VALUES ('%i,0')", params[0]);
	if( Db::query(string,-1,-1,Db::handle) && Db::affected_rows(Db::handle) ) 
	{
		if( params[1] == -1 ) params[1] = GetPlayerVirtualWorld(playerid);
		
		new i = TOTAL_PORTAL; TOTAL_PORTAL++;
		Tp::Info[ i ][ Tp::Id ] = Db::insert_id(Db::handle);
		Tp::Info[ i ][ Tp::Type ][ 0 ] = params[2];
		Tp::Info[ i ][ Tp::Model ][ 0 ] = params[0];
		Tp::Info[ i ][ Tp::Inter ][ 0 ] = GetPlayerInterior(playerid);
		Tp::Info[ i ][ Tp::World ][ 0 ] = params[1];
		GetPlayerPos
		(
			playerid,
			Tp::Info[ i ][ Tp::Portal1 ][ 0 ],
			Tp::Info[ i ][ Tp::Portal1 ][ 1 ],
			Tp::Info[ i ][ Tp::Portal1 ][ 2 ]
		);
		if(params[2] == 14) GetVehicleZAngle(GetPlayerVehicleID(playerid), Tp::Info[ i ][ Tp::Portal1 ][ 3 ]);
		else GetPlayerFacingAngle(playerid, Tp::Info[ i ][ Tp::Portal1 ][ 3 ]);
		Tp::Info[ i ][ Tp::Pickup ][ 0 ]=_AddPickup(Tp::Info[ i ][ Tp::Model ][ 0 ],Tp::Info[ i ][ Tp::Type ][ 0 ],Tp::Info[ i ][ Tp::Portal1 ],Tp::Info[ i ][ Tp::World ][ 0 ]);
		updatePickup( i ), Send(playerid, -1, "* Пикап входа создан!");
	}
	return 1;
}

CMD:setpic1(playerid, params[]) {
	if( !Pl::isAdmin(playerid, 5) ) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	new teleport = GetPVarInt(playerid, "selectTeleport");
	if( teleport == 0xffff ) return Send(playerid, COLOR_GREY, "* Вы не выбрали портал!");
	if( sscanf(params, "I(1318)I(-1)I(23)", params[0],params[1],params[2]))
		return Send(playerid, COLOR_GREY, "Введите: /setpic1 [modelid]");
		
	if( params[1] == -1 ) params[1] = GetPlayerVirtualWorld(playerid);
	Tp::Info[ teleport ][ Tp::Type ][ 0 ] = params[2];
	Tp::Info[ teleport ][ Tp::Model ][ 0 ] = params[0];
	Tp::Info[ teleport ][ Tp::Inter ][ 0 ] = GetPlayerInterior(playerid);
	Tp::Info[ teleport ][ Tp::World ][ 0 ] = params[1];
	GetPlayerPos
	(
		playerid,
		Tp::Info[ teleport ][ Tp::Portal1 ][ 0 ],
		Tp::Info[ teleport ][ Tp::Portal1 ][ 1 ],
		Tp::Info[ teleport ][ Tp::Portal1 ][ 2 ]
	);
	if(params[2] == 14) GetVehicleZAngle(GetPlayerVehicleID(playerid), Tp::Info[ teleport ][ Tp::Portal1 ][ 3 ]);
	else GetPlayerFacingAngle(playerid, Tp::Info[ teleport ][ Tp::Portal1 ][ 3 ]);
	DestroyDynamicPickup(Tp::Info[ teleport ][ Tp::Pickup ][ 0 ]);
	Tp::Info[ teleport ][ Tp::Pickup ][ 0 ]=_AddPickup(Tp::Info[ teleport ][ Tp::Model ][ 0 ],Tp::Info[ teleport ][ Tp::Type ][ 0 ],Tp::Info[ teleport ][ Tp::Portal1 ],Tp::Info[ teleport ][ Tp::World ][ 0 ]);
	updatePickup( teleport ), Rac::SetPlayerVirtualWorld(playerid,params[1]), SetPVarInt(playerid, "selectTeleport", 0xffff);
	Send(playerid, COLOR_GREY, "Позиция пикапа изменина!");

	return 1;
}

CMD:setpic2(playerid, params[]) {
	if( !Pl::isAdmin(playerid, 5) ) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	new teleport = GetPVarInt(playerid, "selectTeleport");
	if( teleport == 0xffff ) return Send(playerid, COLOR_GREY, "* Вы не выбрали портал!");
	if( sscanf(params, "I(1318)I(-1)I(23)", params[0],params[1],params[2]) )
		return Send(playerid, COLOR_GREY, "Введите: /setpic2 [modelid]");
	
	if( params[1] == -1 ) params[1] = GetPlayerVirtualWorld(playerid);
	Tp::Info[ teleport ][ Tp::Type ][ 1 ] = params[2];
	Tp::Info[ teleport ][ Tp::Model ][ 1 ] = params[0];
	Tp::Info[ teleport ][ Tp::Inter ][ 1 ] = GetPlayerInterior(playerid);
	Tp::Info[ teleport ][ Tp::World ][ 1 ] = params[1];
	GetPlayerPos
	(
		playerid,
		Tp::Info[ teleport ][ Tp::Portal2 ][ 0 ],
		Tp::Info[ teleport ][ Tp::Portal2 ][ 1 ],
		Tp::Info[ teleport ][ Tp::Portal2 ][ 2 ]
	);
	if(params[2] == 14) GetVehicleZAngle(GetPlayerVehicleID(playerid), Tp::Info[ teleport ][ Tp::Portal2 ][ 3 ]);
	else GetPlayerFacingAngle(playerid, Tp::Info[ teleport ][ Tp::Portal2 ][ 3 ]);
	DestroyDynamicPickup(Tp::Info[ teleport ][ Tp::Pickup ][ 1 ]);
	Tp::Info[ teleport ][ Tp::Pickup ][ 1 ]=_AddPickup(Tp::Info[ teleport ][ Tp::Model ][ 1 ],Tp::Info[ teleport ][ Tp::Type ][ 1 ],Tp::Info[ teleport ][ Tp::Portal2 ],Tp::Info[ teleport ][ Tp::World ][ 1 ]);
	updatePickup( teleport ), Rac::SetPlayerVirtualWorld(playerid,params[1]), SetPVarInt(playerid, "selectTeleport", 0xffff);
	Send(playerid, COLOR_GREY, "Позиция пикапа изменина!");

	return 1;
}

CMD:editmode(playerid, params[]) { new string[144];
	if( !Pl::isAdmin(playerid, 5) ) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	EditMode[playerid] = !EditMode[playerid];
	format(string, sizeof string, "Режим редактирования: %s", (EditMode[playerid])?("{00cc00}Вкл."):("{ff0000}Выкл."));
	Send(playerid, -1, string);
	return 1;
}

CMD:addfc(playerid, params[]) {
	if( !Pl::isAdmin(playerid, 5) ) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if( sscanf(params, "i", params[0]) ) return Send(playerid, COLOR_GREY, "Use: /addfc [fracid]");
	if( params[0] < 1 || params[0] > 20 ) return Send(playerid, COLOR_GREY, "* Неверный ID фракции!");
	if( Fc::TOTAL >= MAX_FC ) return Send(playerid, COLOR_GREY, "* Создано макс. кол-во транспорта!");
	Fc::ShowModel( playerid, params[0], D_ADD_FC );
	return 1;
}

CMD:delfc(playerid, params[]) {
	new vehid = GetPlayerVehicleID(playerid), idx, fracid;
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(!IsPlayerInAnyVehicle(playerid)) return Send(playerid, COLOR_GREY, "* Нужно быть в автомобиле!");
	if(!Fc::GetInfo(vehid, "if", idx, fracid)) return Send(playerid, COLOR_GREY, "* Это не фракционная машина!");
	Iter_Remove(TeamVehicles[fracid], vehid);
	Fc::Delete(idx);
	Send(playerid, COLOR_YELLOW, "* Машина была удалена!");
	return 1;
}

CMD:showmodel(playerid, params[]) {
	if( !Pl::isAdmin(playerid, 4) ) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if( sscanf(params, "i", params[0]) ) return Send(playerid, COLOR_GREY, "Use: /showmodel [fracid]");
	if( params[0] < 1 || params[0] > 20 ) return Send(playerid, COLOR_GREY, "* Неверный ID фракции!");
	Fc::ShowModel( playerid, params[0], D_SHOW_MODEL );
	return 1;
}

CMD:addburg(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return 1;
	if(sscanf(params, "s[24]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /addburg [name]");
	new i = TOTAL_BURGERS; TOTAL_BURGERS++;

	if(!strcmp(params[0], "burger", true)) {
		Burgers[i][Type] = 1;
		Burgers[i][bEX] = 363.3573;
		Burgers[i][bEY] = -74.8156;
		Burgers[i][bEZ] = 1001.5078;
		Burgers[i][Int] = 10;
	
	} else if(!strcmp(params[0], "pizza", true)) {
		Burgers[i][Type] = 2;
		Burgers[i][bEX] = 372.3026;
		Burgers[i][bEY] = -133.0486;
		Burgers[i][bEZ] = 1001.4922;
		Burgers[i][Int] = 5;
	
	} else if(!strcmp(params[0], "cluckin", true)) {
		Burgers[i][Type] = 3;
		Burgers[i][bEX] = 364.9013;
		Burgers[i][bEY] = -11.3341;
		Burgers[i][bEZ] = 1001.8516;
		Burgers[i][Int] = 9;

	} else if(!strcmp(params[0], "24-7", true)) {
		Burgers[i][Type] = 4;
		Burgers[i][bEX] = -30.9817;
		Burgers[i][bEY] = -92.0113;
		Burgers[i][bEZ] = 1003.5469;
		Burgers[i][Int] = 18;
	}
	else return Send(playerid, COLOR_GREY, "* Неверное название! Доступно: burger, pizza, cluckin, 24-7");

	GetPlayerPos(playerid, Burgers[i][bX], Burgers[i][bY], Burgers[i][bZ]);
	format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableBurgers__"` (`bX`,`bY`,`bZ`,`bEX`,`bEY`,`bEZ`,`bInt`,`bType`) VALUES ('%f','%f','%f','%f','%f','%f','%i','%i')",
	Burgers[i][bX], Burgers[i][bY], Burgers[i][bZ], Burgers[i][bEX], Burgers[i][bEY], Burgers[i][bEZ], Burgers[i][Int], Burgers[i][Type]);

	if(Db::query(query) && Db::free_result()) {
		Burgers[i][ID] = Db::insert_id();
		Burgers[i][vW] = Burgers[i][ID];
		Burgers[i][PickupEn] = AddPickup(1318, 23, Burgers[i][bX], Burgers[i][bY], Burgers[i][bZ], -1);
		Burgers[i][PickupEx] = AddPickup(1318, 23, Burgers[i][bEX], Burgers[i][bEY], Burgers[i][bEZ], Burgers[i][vW]);
		switch(Burgers[i][Type]) {
			case 1: Burgers[i][MapIcon] = CreateDynamicMapIcon(Burgers[i][bX], Burgers[i][bY], Burgers[i][bZ], 10, 0, -1, -1, -1, 250.0);
			case 2: Burgers[i][MapIcon] = CreateDynamicMapIcon(Burgers[i][bX], Burgers[i][bY], Burgers[i][bZ], 29, 0, -1, -1, -1, 250.0);
			case 3: Burgers[i][MapIcon] = CreateDynamicMapIcon(Burgers[i][bX], Burgers[i][bY], Burgers[i][bZ], 14, 0, -1,- 1, -1, 250.0);
		}
		return Send(playerid, COLOR_LIGHTBLUE, "* Бургер успешно создан!");
	}
	else Send(playerid, COLOR_LIGHTBLUE, "Error");

	return 1;
}

CMD:addgas(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 5)) return 1;
	new idx = TOTAL_GASS; TOTAL_GASS++;
	GetPlayerPos(playerid, GasStations[idx][pX], GasStations[idx][pY], GasStations[idx][pZ]);
	format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableGasstations__"` (`pos_x`,`pos_y`,`pos_z`) VALUES ('%f','%f','%f')",
	GasStations[idx][pX], GasStations[idx][pY], GasStations[idx][pZ]);
	if(Db::query(query) && Db::free_result()) {
		GasStations[idx][ID] = Db::insert_id();
		AddPickup(1650, 14, GasStations[idx][pX], GasStations[idx][pY], GasStations[idx][pZ]-0.2, 0, "* Заправочная Станция *\n /fill", 0xFF6347AA);
		format(string, sizeof string, "* Заправка была добавлена! [ID: %i]", GasStations[idx][ID]);
		return Send(playerid, COLOR_GREY, "* Заправка была добавлена! [ID: %i]");
	}
	return Send(playerid, COLOR_GREY, "Ошибка");
}

CMD:addbiz(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return 1;
	if(sscanf(params, "iiii", params[0], params[1], params[2], params[3])) return Send(playerid, COLOR_GREY, "ВВедите: /addbiz [frac] [int] [lvl] [type] [x,y,z]");
	new b = TOTAL_BIZZ++;
	GetPlayerPos(playerid, BizzInfo[b][bEnterX], BizzInfo[b][bEnterY], BizzInfo[b][bEnterZ]);
	format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableBusines__"` (`bEnterX`,`bEnterY`,`bEnterZ`) VALUES ('%f','%f','%f')", BizzInfo[b][bEnterX], BizzInfo[b][bEnterY], BizzInfo[b][bEnterZ]);
	if(Db::query(query) && Db::free_result()) {
		BizzInfo[b][bID] = Db::insert_id();
		BizzInfo[b][bType] = params[3]; BizzInfo[b][bOwned] = 0;
		strmid(BizzInfo[b][bOwner], "The State", 0, strlen("The State"), 255);
		strmid(BizzInfo[b][bName], "biznes", 0, strlen("biznes"), 255);
		strmid(BizzInfo[b][bExtortion], "No-one", 0, strlen("No-one"), 255);
		BizzInfo[b][bLevelNeeded] = params[2];
		BizzInfo[b][bBuyPrice] = 500000; BizzInfo[b][bEntranceCost] = 500;
		BizzInfo[b][bTill] = 300000; BizzInfo[b][bLocked] = 1;
		BizzInfo[b][bInterior] = params[1]; BizzInfo[b][bProducts] = 250;
		BizzInfo[b][bMaxProducts] = 500; BizzInfo[b][bPriceProd] = 100;
		BizzInfo[b][bVirtual] = BizzInfo[b][bID]; BizzInfo[b][bFrac] = params[0];
		BizzInfo[b][bPickupEnter] = AddPickup(1272, 23, BizzInfo[b][bEnterX], BizzInfo[b][bEnterY], BizzInfo[b][bEnterZ]);
		BizzInfo[b][bPickupExit] = AddPickup(1318, 23, BizzInfo[b][bExitX], BizzInfo[b][bExitY], BizzInfo[b][bExitZ], BizzInfo[b][bVirtual]);
		BizzInfo[b][bMapIcon] = CreateDynamicMapIcon(BizzInfo[b][bEnterX],BizzInfo[b][bEnterY],BizzInfo[b][bEnterZ],52,0,-1,-1,-1,350.0);
		GetSquarePos(BizzInfo[b][bEnterX], BizzInfo[b][bEnterY], MAX_ZONE_SIZE, BizzInfo[b][bzMinX], BizzInfo[b][bzMinY], BizzInfo[b][bzMaxX], BizzInfo[b][bzMaxY]);
		BizzInfo[b][bZone] = Gz::Create(BizzInfo[b][bzMinX], BizzInfo[b][bzMinY], BizzInfo[b][bzMaxX], BizzInfo[b][bzMaxY]);
		Gz::ShowForAll(BizzInfo[b][bZone], GetFracColor(BizzInfo[b][bFrac])); UpdateBizz(b); TOTAL_BIZZ++;
		return Send(playerid, COLOR_GREY, "* Бизнес создан!");
	}
	else return Send(playerid, COLOR_GREY, "* Ошибка при создании!");
}

CMD:biztype(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return 1;
	if(sscanf(params, "ii", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /setbiztype [bizid] [type]");
	if(params[1] < 0 || params[1] > 2) return Send(playerid, COLOR_GREY, "* Неверный тип!");
	new b = GetBizIndex(params[0]);
	if(!IsValidBiz(b)) return Send(playerid, COLOR_GREY, "* Неверный ID бизнеса!");
	BizzInfo[b][bType] = params[1]; RefreshBizz(b); UpdateBizz(b);
	format(string, sizeof string, "* Вы установили %i-й тип для бизнеса [ID: %i]", BizzInfo[b][bType], BizzInfo[b][bID]);
	return Send(playerid, COLOR_LIGHTBLUE, string);
}

CMD:saveme(playerid, params[]) {
	updatePlayerData(playerid);
	return Send(playerid, COLOR_GREY, "* Игра сохраненна");
}

CMD:online(playerid, params[]) {
	ShowDialog(playerid, D_ONLINE, 2, "[RP]GrandWorld Онлайн", "list/online.lst", "Выбор","Отмена");
	return 1;
}

CMD:offline(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 1) && !Pl::Info[playerid][pVip]) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	ShowDialog(playerid, D_OFFLINE, 2, "[RP]GrandWorld: OFFLINE", "dialog/offline.lst", "Выбор","Отмена");
	return 1;
}

CMD:leaders(playerid, params[]) {
	return ShowOnline(playerid,0);
}

CMD:licenzers(playerid, params[]) {
	ShowOnline(playerid,1);
}

CMD:members(playerid, params[]) {
	return ShowOnline(playerid,2);
}

CMD:advokats(playerid, params[]) {
	return ShowOnline(playerid,3);
}

CMD:admins(playerid, params[]) {
	return ShowOnline(playerid,4);
}

CMD:helpers(playerid, params[]) {
	ShowOnline(playerid,5);
}

CMD:lodgers(playerid, params[]) {
	return ShowOnline(playerid, 6);
}

CMD:iznas(playerid, params[]) {
	if(Pl::Info[playerid][pJailed]) return Send(playerid, COLOR_RED, "* Здесь нельзя ссасть и петушиться!");
	if(ReduceTime[playerid] == 3) return Send(playerid, COLOR_LIGHTRED, "Ваши силы исчерпаны.");
	if(sscanf(params, "u", params[0])) Send(playerid, COLOR_GREY, "Введите: /iznas [id/Name]");
	if(playerid == params[0]) return Send(playerid, COLOR_RED, "* Нельзя изнасиловать самого себя.");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pVip] > 0) return Send(playerid, COLOR_RED, "* Это стальная попа!");
	if(!IsPlayerInRangeOfPlayer(playerid, 2.0, params[0])) return Send(playerid, COLOR_GREY, "* Игрок слишком далеко!");
	
	ReduceTime[playerid] += 1;
	if(ReduceTime[playerid] >= 3) {
		SetTimerEx("ReduceTimer", 8000, false, "i", playerid);
		if(Pl::Info[playerid][pWantedL] < 3) {
			SetPlayerCriminal(playerid, params[0], "Изнасилование");
		}
	}
	ApplyAnimation(params[0],"SNM","SPANKINGW",4.1,0,1,1,1,1);
	ApplyAnimation(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,1);
	ApplyAnimation(params[0],"SNM","SPANKINGW",4.1,0,1,1,1,1,1);
	
	Send(playerid,COLOR_RED,"* Вы изнасиловали игрока!");
	Send(params[0],COLOR_RED,"* Вас изнасиловали!");
	return 1;
}

CMD:local(playerid, params[]) { new string[144];
	format(string, sizeof string, "Вы находитесь в локации - %d", Pl::Info[playerid][pLocal]);
	return Send(playerid, 0xFF0000AA, string);
}

CMD:switchkey(playerid, params[]) {
	if(!SwitchKey[playerid]) {
		if(HireCar[playerid] == INVALID_VEHICLE_ID) return GameTextForPlayer(playerid, "~w~You do not hire a car", 5000, 6);
		SwitchKey[playerid] = true;
		GameTextForPlayer(playerid, "~w~You control now your house car", 5000, 6);
	} else {
		SwitchKey[playerid] = false;
		GameTextForPlayer(playerid, "~w~You control now your hire car", 5000, 6);
	}
	return 1;
}

CMD:givekey(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /givekey [id/Name]");
	if(HireCar[playerid] == INVALID_VEHICLE_ID && !IsValidHouse(Pl::Info[playerid][pHouseKey])) Send(playerid, COLOR_GREY, "* Вы не можете дать ключ у вас его нет!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid, COLOR_GREY, "* Игрок слишком далеко!");
	
	new vehicleid;
	if(HireCar[playerid] != INVALID_VEHICLE_ID && !SwitchKey[playerid]) {
		vehicleid = HireCar[playerid];
		ToggleVehicleDoor(vehicleid, true);
		HireCar[playerid] = INVALID_VEHICLE_ID;
	}
	else vehicleid = HouseInfo[Pl::Info[playerid][pHouseKey]][hAuto];

	if(HireCar[params[0]] != INVALID_VEHICLE_ID) {
		ToggleVehicleDoor(HireCar[params[0]], true);
	}
	HireCar[params[0]] = vehicleid;
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "* Вы дали %s свои ключи от машины.", playername);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0); Send(playerid, COLOR_GRAD1, string);
	format(string, sizeof string, "* Вы получили ключи для машины от %s", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s вынимает набор ключей и передает их %s.", sendername, playername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:handsup(playerid, params[]) {
	if(!PlayerCuffed[playerid]) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:color(playerid, params[]) { new string[144];
	dialog[0]='\0';
	scf(dialog, string, "0. {%06h}Фракционный цвет\n", rgb<GetFracColor(GetFracID(playerid))>);
	for(new i; i < sizeof Colors; i++) {
		scf(dialog, string, "%i. {%06h}%s\n", i+1, rgb<Colors[i][e_color]>, Colors[i][e_name]);
	}
	SPD(playerid, D_COLORS, 2, "[RP]GrandWorld: Цвета", dialog, "Включить", "Закрыть");
	return 1;
}

CMD:mheal(playerid, params[]) {
	if(!IsPlayerInRangeOfPoint(playerid,4.0,366.3,158.9,1008.3)) return 1;
	if(GetFracID(playerid) == 7) Rac::SetPlayerHealth(playerid,100.0);
	return 1;
}

CMD:sit(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY,"* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY,"Введите: /sit [playerid]");
	if(!PlayerCuffed[params[0]]) return Send(playerid, COLOR_GREY,"* Игрок не в наручниках!");
	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(params[0])) return Send(playerid, COLOR_GREY,"* Вы или тот игрок находитесь уже в тачке!");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid, COLOR_GREY,"* Вы слишком далеко от игрока!");
	new vehid = ClosestVeh(playerid, 4.0);
	if(vehid != INVALID_VEHICLE_ID) {
		new seatid = GetVehicleFreeSeat(vehid);
		if(seatid) {
			Rac::PutPlayerInVehicle(params[0], vehid, seatid);
			getname(playerid -> sendername, params[0] -> playername);
			format(string, sizeof string, "* %s заломал руки %s, и посадил в машину.", sendername, playername);
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else Send(playerid, COLOR_GREY,"* В тачке нет свободных мест!");
	}
	else Send(playerid, COLOR_GREY, "* Вы не рядом с автомобилем!");
	
	return 1;
}

CMD:gotome(playerid, params[]) {
	if(!IsACop(playerid)) return Send(playerid,COLOR_GREY,"* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid,COLOR_GREY,"Введите: /gotome [playerid]");
	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(params[0])) return Send(playerid,COLOR_GREY, "* Вы или тот игрок находитесь в тачке!");
	if(!PlayerCuffed[params[0]]) return Send(playerid,COLOR_GREY,"* Игрок не в наручниках!");
	if(IsPlayerInRangeOfPlayer(playerid, 8.0, params[0])) return Send(playerid,COLOR_GREY,"* Вы слишком далеко от игрока!");
	GetPlayerPos(playerid, posx, posy, posz);
	Rac::SetPlayerPos(params[0],posx+0.5, posy+0.5, posz);
	return Send(params[0],COLOR_LIGHTRED,"* Вас насильно потащили за собой!");
}

CMD:animhelp(playerid, params[]) {
	return ShowDialog(playerid, D_NONE, 0, "Анимации", "help/anim.hlp", "OK", "");
}

CMD:dance(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY ,"Введите: /dance [1-3]");
		if(params[0] < 1 || params[0] > 3) return Send(playerid,COLOR_GREY ,"Введите: /dance [1-3]");
		switch(params[0]) {
			case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		}
	}
	return 1;
}

CMD:animbar(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY ,"Введите: /animbar [1-12]");
	if(params[0] < 1 || params[0] > 12) return Send(playerid,COLOR_GREY ,"Введите: /animbar [1-12]");
	switch(params[0]) {
		case 1: ApplyAnimation(playerid,"BAR","Barcustom_get",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BAR","Barcustom_loop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BAR","Barcustom_order",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BAR","Barserve_bottle",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BAR","Barserve_glass",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BAR","Barserve_in",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BAR","Barserve_loop",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BAR","Barserve_order",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BAR","dnk_stndF_loop",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BAR","dnk_stndM_loop",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BAR","BARman_idle",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animball(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"*{ffffff}Введите: /animball [1-11]");
	if(params[0] < 1 || params[0] > 11) return Send(playerid,COLOR_GREY,"*{ffffff}Введите: /animball [1-11]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BASEBALL","Bat_1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BASEBALL","Bat_block",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_1",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_2",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_3",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BASEBALL","Bat_IDLE",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BASEBALL","Bat_M",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BASEBALL","BAT_PART",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animfire(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY,"Введите: /animfire [1-13]");
	if(params[0] < 1 || params[0] > 13) return Send(playerid, COLOR_GREY,"Введите: /animfire [1-13]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BD_FIRE","BD_Fire1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BD_FIRE","BD_Fire2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BD_FIRE","BD_Fire3",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BD_FIRE","BD_GF_Wave",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_01",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_02",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_03",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_04",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_Loop",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BD_FIRE","M_smklean_loop",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BD_FIRE","M_smklean_loop",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BD_FIRE","Playa_Kiss_03",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animbeach(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY,"}Введите: /animbeach [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animbeach [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BEACH","bather",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BEACH","BD_Fire3",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animinf(playerid, params[]) {
	if(sscanf(params, "d", params[0])) Send(playerid,COLOR_GREY,"Введите: /animinf [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animinf [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BF_injection","BF_getin_LHS",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BF_injection","BF_getin_RHS",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BF_injection","BF_getout_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BF_injection","BF_getout_RHS",4.1,0,1,1,1,1);
	}
	return 1;
}


CMD:animbp(playerid, params[]) {
	if(sscanf(params, "d", params[0])) Send(playerid,COLOR_GREY,"Введите: /animbp [1-7]");
	if(params[0] < 1 || params[0] > 7) return Send(playerid,COLOR_GREY,"Введите: /animbp [1-7]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"benchpress","gym_bp_down",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"benchpress","gym_bp_geton",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"benchpress","gym_bp_up_A",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"benchpress","gym_bp_up_smooth",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animbh(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbh [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animbh [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BIKEH","BIKEh_Back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyFT",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyLHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyRHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BIKEH","BIKEh_Fwd",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BIKEH","BIKEh_getoffBACK",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BIKEH","BIKEh_getoffLHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BIKEH","BIKEh_getoffRHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BIKEH","BIKEh_hit",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BIKEH","BIKEh_jumponL",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BIKEH","BIKEh_jumponR",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BIKEH","BIKEh_kick",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"BIKEH","BIKEh_Left",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"BIKEH","BIKEh_passenger",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"BIKEH","BIKEh_pushes",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"BIKEH","BIKEh_Ride",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"BIKEH","BIKEh_Right",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"BIKEH","BIKEh_Still",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animfood(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfood [1-33]");
	if(params[0] < 1 || params[0] > 33) return Send(playerid,COLOR_GREY,"Введите: /animfood [1-33]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FOOD","EAT_Vomit_P",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"FOOD","EAT_Vomit_SK",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"FOOD","FF_Dam_Bkw",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"FOOD","FF_Dam_Fwd",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"FOOD","FF_Dam_Left",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"FOOD","FF_Dam_Right",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"FOOD","FF_Die_Bkw",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"FOOD","FF_Die_Fwd",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"FOOD","FF_Die_Left",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"FOOD","FF_Die_Right",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"FOOD","FF_Sit_Eat1",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"FOOD","FF_Sit_Eat2",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"FOOD","FF_Sit_Eat3",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"FOOD","FF_Sit_In",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"FOOD","FF_Sit_In_L",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"FOOD","FF_Sit_In_R",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"FOOD","FF_Sit_Look",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"FOOD","FF_Sit_Loop",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"FOOD","FF_Sit_Out_180",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"FOOD","FF_Sit_Out_L_180",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"FOOD","FF_Sit_Out_R_180",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"FOOD","SHP_Thank",4.1,0,1,1,1,1);
		case 26: ApplyAnimation(playerid,"FOOD","SHP_Tray_In",4.1,0,1,1,1,1);
		case 27: ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift",4.1,0,1,1,1,1);
		case 28: ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_In",4.1,0,1,1,1,1);
		case 29: ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_Loop",4.1,0,1,1,1,1);
		case 30: ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_Out",4.1,0,1,1,1,1);
		case 31: ApplyAnimation(playerid,"FOOD","SHP_Tray_Out",4.1,0,1,1,1,1);
		case 32: ApplyAnimation(playerid,"FOOD","SHP_Tray_Pose",4.1,0,1,1,1,1);
		case 33: ApplyAnimation(playerid,"FOOD","SHP_Tray_Return",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animms(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animms [1-41]");
	if(params[0] < 1 || params[0] > 33) return Send(playerid,COLOR_GREY,"Введите: /animms [1-41]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"MISC","bitchslap",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"MISC","BMX_celebrate",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"MISC","BMX_comeon",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"MISC","bmx_idleloop_01",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"MISC","bmx_idleloop_02",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"MISC","bmx_talkleft_in",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"MISC","bmx_talkleft_loop",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"MISC","bmx_talkleft_out",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"MISC","bmx_talkright_in",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"MISC","bmx_talkright_loop",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"MISC","bmx_talkright_out",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"MISC","bng_wndw",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"MISC","bng_wndw_02",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"MISC","Case_pickup",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"MISC","door_jet",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"MISC","GRAB_L",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"MISC","GRAB_R",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"MISC","Hiker_Pose",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"MISC","Hiker_Pose_L",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"MISC","Idle_Chat_02",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"MISC","KAT_Throw_K",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"MISC","KAT_Throw_O",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"MISC","KAT_Throw_P",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"MISC","PASS_Rifle_O",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"MISC","PASS_Rifle_Ped",4.1,0,1,1,1,1);
		case 26: ApplyAnimation(playerid,"MISC","PASS_Rifle_Ply",4.1,0,1,1,1,1);
		case 27: ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,1,1,1,1);
		case 28: ApplyAnimation(playerid,"MISC","Plane_door",4.1,0,1,1,1,1);
		case 29: ApplyAnimation(playerid,"MISC","Plane_exit",4.1,0,1,1,1,1);
		case 30: ApplyAnimation(playerid,"MISC","Plane_hijack",4.1,0,1,1,1,1);
		case 31: ApplyAnimation(playerid,"MISC","Plunger_01",4.1,0,1,1,1,1);
		case 32: ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.1,0,1,1,1,1);
		case 33: ApplyAnimation(playerid,"MISC","plyr_shkhead",4.1,0,1,1,1,1);
		case 34: ApplyAnimation(playerid,"MISC","Run_Dive",4.1,0,1,1,1,1);
		case 35: ApplyAnimation(playerid,"MISC","Scratchballs_01",4.1,0,1,1,1,1);
		case 36: ApplyAnimation(playerid,"MISC","SEAT_LR",4.1,0,1,1,1,1);
		case 37: ApplyAnimation(playerid,"MISC","Seat_talk_01",4.1,0,1,1,1,1);
		case 38: ApplyAnimation(playerid,"MISC","Seat_talk_02",4.1,0,1,1,1,1);
		case 39: ApplyAnimation(playerid,"MISC","SEAT_watch",4.1,0,1,1,1,1);
		case 40: ApplyAnimation(playerid,"MISC","smalplane_door",4.1,0,1,1,1,1);
		case 41: ApplyAnimation(playerid,"MISC","smlplane_door",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animbikelp(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbikelp [1-9]");
	if(params[0] < 1 || params[0] > 9) return Send(playerid,COLOR_GREY,"*{ffffff}Введите: /animbikelp [1-9]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BIKELEAP","bk_blnce_in",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BIKELEAP","bk_blnce_out",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BIKELEAP","bk_jmp",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BIKELEAP","bk_rdy_in",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BIKELEAP","bk_rdy_out",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BIKELEAP","struggle_cesar",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BIKELEAP","struggle_driver",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BIKELEAP","truck_driver",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BIKELEAP","truck_getin",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animbikes(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbikes [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animbikes [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BIKES","BIKEs_Back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BIKES","BIKEs_drivebyFT",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BIKES","BIKEs_drivebyLHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BIKES","BIKEs_drivebyRHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BIKES","BIKEs_Fwd",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BIKES","BIKEs_getoffBACK",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BIKES","BIKEs_getoffLHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BIKES","BIKEs_getoffRHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BIKES","BIKEs_hit",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BIKES","BIKEs_jumponL",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BIKES","BIKEs_jumponR",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BIKES","BIKEs_kick",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"BIKES","BIKEs_Left",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"BIKES","BIKEs_passenger",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"BIKES","BIKEs_pushes",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"BIKES","BIKEs_Ride",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"BIKES","BIKEs_Right",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"BIKES","BIKEs_Still",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbikev(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbikev [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"*{ffffff}Введите: /animbikev [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BIKEV","BIKEv_Back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyFT",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyLHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyRHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BIKEV","BIKEv_Fwd",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BIKEV","BIKEv_getoffBACK",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BIKEV","BIKEv_getoffLHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BIKEV","BIKEv_getoffRHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BIKEV","BIKEv_hit",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BIKEV","BIKEv_jumponL",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BIKEV","BIKEv_jumponR",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BIKEV","BIKEv_kick",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"BIKEV","BIKEv_Left",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"BIKEV","BIKEv_passenger",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"BIKEV","BIKEv_pushes",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"BIKEV","BIKEv_Ride",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"BIKEV","BIKEv_Right",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"BIKEV","BIKEv_Still",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbmx(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbmx [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animbmx [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BMX","BMX_back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BMX","BMX_bunnyhop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BMX","BMX_drivebyFT",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BMX","BMX_driveby_LHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BMX","BMX_driveby_RHS",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BMX","BMX_fwd",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BMX","BMX_getoffBACK",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BMX","BMX_pushes",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BMX","BMX_getoffLHS",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BMX","BMX_getoffRHS",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BMX","BMX_jumponL",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BMX","BMX_jumponR",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"BMX","BMX_Left",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"BMX","BMX_pedal",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"BMX","BMX_Ride",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"BMX","BMX_Right",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"BMX","BMX_sprint",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"BMX","BMX_still",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbikedbz(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbikedbz [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animbikedbz [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_BWD",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_FWD",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_RHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animchase(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animchase [1-25]");
	if(params[0] < 1 || params[0] > 25) return Send(playerid,COLOR_GREY,"Введите: /animchase [1-25]");
	switch(params[0])
	{
		case 1:	ApplyAnimation(playerid,"MD_CHASE","Carhit_Hangon",4.1,0,1,1,1,1);
		case 2:	ApplyAnimation(playerid,"MD_CHASE","Carhit_Tumble",4.1,0,1,1,1,1);
		case 3:	ApplyAnimation(playerid,"MD_CHASE","donutdrop",4.1,0,1,1,1,1);
		case 4:	ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L1",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L2",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L3",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R1",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R2",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R3",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"MD_CHASE","Hangon_Stun_loop",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"MD_CHASE","Hangon_Stun_Turn",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_2_HANG",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Jmp_BL",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Jmp_F",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_BL",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Die_BL",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Die_F",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_F",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll_F",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Punch",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Punch_F",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Shot_F",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Loop",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbox(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbox [1-10]");
	if(params[0] < 1 || params[0] > 10) Send(playerid,COLOR_GREY,"Введите: /animbox [1-10]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BOX","boxhipin",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BOX","boxhipup",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BOX","boxshdwn",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BOX","boxshup",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BOX","bxhipwlk",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BOX","bxhwlki",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BOX","bxshwlk",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BOX","bxshwlki",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BOX","bxwlko",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BOX","catch_box",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbomber(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbomber [1-6]");
	if(params[0] < 1 || params[0] > 6) return Send(playerid,COLOR_GREY,"Введите: /animbomber [1-6]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BOMBER","BOM_Plant_In",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbsp(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbsp [1-41]");
	if(params[0] < 1 || params[0] > 41) return Send(playerid,COLOR_GREY,"Введите: /animbsp [1-41]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_jump_shot",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_stepL",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_stepR",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Gli",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Gli_O",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnch",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnch_O",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnd",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_O",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BSKTBALL","BBALL_idle",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"BSKTBALL","BBALL_idle2",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"BSKTBALL","BBALL_idle2_O",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop_O",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"BSKTBALL","BBALL_idle_O",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Cancel",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Cancel_0",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_End",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot_O",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"BSKTBALL","BBALL_Net_Dnk_O",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup_O",4.1,0,1,1,1,1);
		case 26: ApplyAnimation(playerid,"BSKTBALL","BBALL_react_miss",4.1,0,1,1,1,1);
		case 27: ApplyAnimation(playerid,"BSKTBALL","BBALL_react_score",4.1,0,1,1,1,1);
		case 28: ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,0,1,1,1,1);
		case 29: ApplyAnimation(playerid,"BSKTBALL","BBALL_run_O",4.1,0,1,1,1,1);
		case 30: ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_L",4.1,0,1,1,1,1);
		case 31: ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_L_O",4.1,0,1,1,1,1);
		case 32: ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_R",4.1,0,1,1,1,1);
		case 33: ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_R_O",4.1,0,1,1,1,1);
		case 34: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,0,1,1,1,1);
		case 35: ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_L",4.1,0,1,1,1,1);
		case 36: ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_L_O",4.1,0,1,1,1,1);
		case 37: ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_R",4.1,0,1,1,1,1);
		case 38: ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_R_O",4.1,0,1,1,1,1);
		case 39: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_O",4.1,0,1,1,1,1);
		case 40: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_start",4.1,0,1,1,1,1);
		case 41: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_start_O",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcamera(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcamera [1-14]");
	if(params[0] < 1 || params[0] > 14) return Send(playerid,COLOR_GREY,"Введите: /animcamera [1-14]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CAMERA","camcrch_cmon",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CAMERA","camcrch_idleloop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CAMERA","camcrch_stay",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CAMERA","camcrch_to_camstnd",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CAMERA","camstnd_cmon",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CAMERA","camstnd_idleloop",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CAMERA","camstnd_lkabt",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"CAMERA","camstnd_to_camcrch",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CAMERA","piccrch_in",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"CAMERA","piccrch_out",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"CAMERA","piccrch_take",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"CAMERA","picstnd_in",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"CAMERA","picstnd_out",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"CAMERA","picstnd_take",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animgym(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"*{ffffff}Введите: /animgym [1-24]");
	if(params[0] < 1 || params[0] > 24) Send(playerid,COLOR_GREY,"Введите: /animgym [1-24]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_celebrate",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_fast",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_faster",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_getoff",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_geton",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_pedal",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_slow",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_still",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"GYMNASIUM","gym_jog_falloff",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"GYMNASIUM","gym_shadowbox",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_celebrate",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_falloff",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_getoff",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_geton",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_jog",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_tired",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_walk",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"GYMNASIUM","gym_walk_falloff",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"GYMNASIUM","Pedals_fast",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"GYMNASIUM","Pedals_med",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"GYMNASIUM","Pedals_slow",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"GYMNASIUM","Pedals_still",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animpara(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animpara [1-22]");
	if(params[0] < 1 || params[0] > 22) return Send(playerid,COLOR_GREY,"Введите: /animpara [1-22]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_Accel",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive_DIE",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_L",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_R",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PARACHUTE","PARA_decel",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PARACHUTE","PARA_decel_O",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PARACHUTE","PARA_float",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PARACHUTE","PARA_float_O",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PARACHUTE","PARA_Land",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PARACHUTE","PARA_Land_O",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water_O",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"PARACHUTE","PARA_open",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"PARACHUTE","PARA_open_O",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_Land_O",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_Loop_O",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_O",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"PARACHUTE","PARA_steerL",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"PARACHUTE","PARA_steerL_O",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"PARACHUTE","PARA_steerR",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"PARACHUTE","PARA_steerR_O",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animgangs(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animgangs [1-35]");
	if(params[0] < 1 || params[0] > 35) return Send(playerid,COLOR_GREY,"Введите: /animgangs [1-35]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"GANGS","DEALER_DEAL",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"GANGS","DEALER_IDLE",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"GANGS","drnkbr_prtl",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"GANGS","drnkbr_prtl_F",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"GANGS","DRUGS_BUY",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"GANGS","hndshkda",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"GANGS","hndshkfa",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"GANGS","leanIDLE",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"GANGS","leanIN",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"GANGS","leanOUT",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"GANGS","prtial_gngtlkCt",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.1,0,1,1,1,1);
		case 26: ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.1,0,1,1,1,1);
		case 27: ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.1,0,1,1,1,1);
		case 28: ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.1,0,1,1,1,1);
		case 29: ApplyAnimation(playerid,"GANGS","prtial_hndshk_01",4.1,0,1,1,1,1);
		case 30: ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.1,0,1,1,1,1);
		case 31: ApplyAnimation(playerid,"GANGS","shake_cara",4.1,0,1,1,1,1);
		case 32: ApplyAnimation(playerid,"GANGS","shake_carK",4.1,0,1,1,1,1);
		case 33: ApplyAnimation(playerid,"GANGS","shake_carSH",4.1,0,1,1,1,1);
		case 34: ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1,0,1,1,1,1);
		case 35: ApplyAnimation(playerid,"GANGS","smkcig_prtl_F",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animlowrider(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY,"Введите: /animlowrider [1-39]");
	if(params[0] < 1 || params[0] > 39) return Send(playerid, COLOR_GREY,"Введите: /animlowrider [1-39]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"LOWRIDER","F_smklean_loop",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"LOWRIDER","lrgirl_bdbnce",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"LOWRIDER","lrgirl_hair",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"LOWRIDER","lrgirl_hurry",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"LOWRIDER","lrgirl_idleloop",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"LOWRIDER","lrgirl_idle_to_l0",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_bnce",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_loop",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_to_l1",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l12_to_l0",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_bnce",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_loop",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_to_l2",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_bnce",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_loop",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_to_l3",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l345_to_l1",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_bnce",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_loop",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_to_l4",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_bnce",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_loop",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_to_l5",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l5_bnce",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l5_loop",4.1,0,1,1,1,1);
		case 26: ApplyAnimation(playerid,"LOWRIDER","M_smklean_loop",4.1,0,1,1,1,1);
		case 27: ApplyAnimation(playerid,"LOWRIDER","M_smkstnd_loop",4.1,0,1,1,1,1);
		case 28: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkB",4.1,0,1,1,1,1);
		case 29: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkC",4.1,0,1,1,1,1);
		case 30: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkD",4.1,0,1,1,1,1);
		case 31: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkE",4.1,0,1,1,1,1);
		case 32: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkF",4.1,0,1,1,1,1);
		case 33: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
		case 34: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkH",4.1,0,1,1,1,1);
		case 35: ApplyAnimation(playerid,"LOWRIDER","RAP_A_Loop",4.1,0,1,1,1,1);
		case 36: ApplyAnimation(playerid,"LOWRIDER","RAP_B_Loop",4.1,0,1,1,1,1);
		case 37: ApplyAnimation(playerid,"LOWRIDER","RAP_C_Loop",4.1,0,1,1,1,1);
		case 38: ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed",4.1,0,1,1,1,1);
		case 39: ApplyAnimation(playerid,"LOWRIDER","Tap_hand",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animlookers(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animlookers [1-29]");
	if(params[0] < 1 || params[0] > 29) return Send(playerid,COLOR_GREY,"Введите: /animlookers [1-29]");

	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"ON_LOOKERS","lkaround_in",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"ON_LOOKERS","lkaround_loop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"ON_LOOKERS","lkaround_out",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"ON_LOOKERS","lkup_in",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"ON_LOOKERS","lkup_out",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"ON_LOOKERS","lkup_point",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"ON_LOOKERS","panic_cower",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"ON_LOOKERS","panic_hide",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"ON_LOOKERS","panic_in",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"ON_LOOKERS","panic_loop",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"ON_LOOKERS","panic_out",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"ON_LOOKERS","panic_point",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"ON_LOOKERS","panic_shout",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"ON_LOOKERS","Pointup_in",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"ON_LOOKERS","Pointup_loop",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"ON_LOOKERS","Pointup_out",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"ON_LOOKERS","Pointup_shout",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"ON_LOOKERS","point_in",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"ON_LOOKERS","point_loop",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"ON_LOOKERS","point_out",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"ON_LOOKERS","shout_01",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"ON_LOOKERS","shout_in",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"ON_LOOKERS","shout_loop",4.1,0,1,1,1,1);
		case 26: ApplyAnimation(playerid,"ON_LOOKERS","shout_out",4.1,0,1,1,1,1);
		case 27: ApplyAnimation(playerid,"ON_LOOKERS","wave_in",4.1,0,1,1,1,1);
		case 28: ApplyAnimation(playerid,"ON_LOOKERS","wave_loop",4.1,0,1,1,1,1);
		case 29: ApplyAnimation(playerid,"ON_LOOKERS","wave_out",4.1,0,1,1,1,1);
	}

	return 1;
}
CMD:animcarchat(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcarchat [1-20]");
	if(params[0] < 1 || params[0] > 20) return Send(playerid,COLOR_GREY,"Введите: /animcarchat [1-20]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CAR_CHAT","carfone_in",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA_to_B",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopB",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopB_to_A",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CAR_CHAT","carfone_out",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_BR",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_FL",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_FR",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc2_FL",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_BR",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_FL",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_FR",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_BL",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_BR",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_FL",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_FR",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"CAR_CHAT","car_talkm_in",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"CAR_CHAT","car_talkm_loop",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"CAR_CHAT","car_talkm_out",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcasino(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcasino [1-23]");
	if(params[0] < 1 || params[0] > 23) return Send(playerid,COLOR_GREY,"Введите: /animcasino [1-23]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CASINO","cards_in",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CASINO","cards_loop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CASINO","cards_lose",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CASINO","cards_out",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CASINO","cards_pick_01",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CASINO","cards_pick_02",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CASINO","cards_raise",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"CASINO","cards_win",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CASINO","manwinb",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"CASINO","manwind",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"CASINO","Roulette_bet",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"CASINO","Roulette_in",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"CASINO","Roulette_loop",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"CASINO","Roulette_lose",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"CASINO","Roulette_out",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"CASINO","Roulette_win",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"CASINO","Slot_bet_02",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"CASINO","Slot_in",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"CASINO","Slot_lose_out",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"CASINO","Slot_Plyr",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"CASINO","Slot_wait",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"CASINO","Slot_win_out",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"CASINO","wof",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbuddy(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbuddy [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"*{ffffff}Введите: /animbuddy [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BUDDY","buddy_crouchfire",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BUDDY","buddy_crouchreload",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BUDDY","buddy_fire",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BUDDY","buddy_fire_poor",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BUDDY","buddy_reload",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbus(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbus [1-9]");
	if(params[0] < 1 || params[0] > 9) return Send(playerid,COLOR_GREY,"Введите: /animbus [1-9]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BUS","BUS_close",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BUS","BUS_getin_LHS",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BUS","BUS_getin_RHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BUS","BUS_getout_LHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BUS","BUS_getout_RHS",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BUS","BUS_jacked_LHS",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BUS","BUS_open",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BUS","BUS_open_RHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BUS","BUS_pullout_LHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcar(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcar [1-11]");
	if(params[0] < 1 || params[0] > 11) return Send(playerid,COLOR_GREY,"Введите: /animcar [1-11]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CAR","Fixn_Car_Loop",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CAR","Fixn_Car_Out",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CAR","flag_drop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CAR","Sit_relaxed",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CAR","Tap_hand",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CAR","Tyd2car_bump",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CAR","Tyd2car_high",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"CAR","Tyd2car_low",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CAR","Tyd2car_med",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"CAR","Tyd2car_TurnL",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"CAR","Tyd2car_TurnR",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcarry(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcarry [1-7]");
	if(params[0] < 1 || params[0] > 7) return Send(playerid,COLOR_GREY,"Введите: /animcarry [1-7]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CARRY","liftup",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CARRY","liftup05",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CARRY","liftup105",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CARRY","putdwn",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CARRY","putdwn05",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CARRY","putdwn105",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animintshop(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animintshop [1-8]");
	if(params[0] < 1 || params[0] > 8) return Send(playerid,COLOR_GREY,"Введите: /animintshop [1-8]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"INT_SHOP","shop_cashier",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"INT_SHOP","shop_in",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"INT_SHOP","shop_lookA",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"INT_SHOP","shop_lookB",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"INT_SHOP","shop_loop",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"INT_SHOP","shop_out",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"INT_SHOP","shop_pay",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"INT_SHOP","shop_shelf",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animjst(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animjst [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animjst [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"JST_BUISNESS","girl_01",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"JST_BUISNESS","girl_02",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"JST_BUISNESS","player_01",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"JST_BUISNESS","smoke_01",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animkart(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animkart [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animkart [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"KART","KART_getin_LHS",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"KART","KART_getin_RHS",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"KART","KART_getout_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"KART","KART_getout_RHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animkissing(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animkissing [1-14]");
	if(params[0] < 1 || params[0] > 14) return Send(playerid,COLOR_GREY,"Введите: /animkissing [1-14]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"KISSING","BD_GF_Wave",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"KISSING","gfwave2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"KISSING","GF_CarArgue_01",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"KISSING","GF_CarArgue_02",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"KISSING","GF_CarSpot",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"KISSING","GF_StreetArgue_01",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"KISSING","GF_StreetArgue_02",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"KISSING","gift_give",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_01",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_02",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"KISSING","Playa_Kiss_02",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"KISSING","Playa_Kiss_03",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animknife(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animknife [1-14]");
	if(params[0] < 1 || params[0] > 14) return Send(playerid,COLOR_GREY,"Введите: /animknife [1-14]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Player",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"KNIFE","KILL_Partial",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"KNIFE","knife_2",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"KNIFE","knife_4",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"KNIFE","Knife_G",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"KNIFE","knife_hit_1",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"KNIFE","knife_hit_2",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"KNIFE","knife_IDLE",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"KNIFE","knife_hit_3",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"KNIFE","knife_part",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"KNIFE","WEAPON_knifeidle",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animlapdan(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animlapdan [1-6]");
	if(params[0] < 1 || params[0] > 6) return Send(playerid,COLOR_GREY,"Введите: /animlapdan [1-6]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"LAPDAN1","LAPDAN_D",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"LAPDAN1","LAPDAN_P",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"LAPDAN2","LAPDAN_D",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"LAPDAN2","LAPDAN_P",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"LAPDAN3","LAPDAN_D",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"LAPDAN3","LAPDAN_P",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animdend(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animdend [1-8]");
	if(params[0] < 1 || params[0] > 8) return Send(playerid,COLOR_GREY,"Введите: /animdend [1-8]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"MD_END","END_SC1_PLY",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"MD_END","END_SC1_RYD",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"MD_END","END_SC1_SMO",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"MD_END","END_SC1_SWE",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"MD_END","END_SC2_PLY",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"MD_END","END_SC2_RYD",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"MD_END","END_SC2_SMO",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"MD_END","END_SC2_SWE",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animmedic(playerid, params[]) {
	ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
	return 1;
}
CMD:animmtb(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animmtb [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animmtb [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"MTB","MTB_back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"MTB","MTB_bunnyhop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"MTB","MTB_drivebyFT",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"MTB","MTB_driveby_LHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"MTB","MTB_driveby_RHS",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"MTB","MTB_fwd",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"MTB","MTB_getoffBACK",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"MTB","MTB_pushes",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"MTB","MTB_getoffLHS",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"MTB","MTB_getoffRHS",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"MTB","MTB_jumponL",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"MTB","MTB_jumponR",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"MTB","MTB_Left",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"MTB","MTB_pedal",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"MTB","MTB_Ride",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"MTB","MTB_Right",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"MTB","MTB_sprint",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"MTB","MTB_still",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animmusc(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animmusc [1-17]");
	if(params[0] < 1 || params[0] > 17) return Send(playerid,COLOR_GREY,"Введите: /animmtb [1-17]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"MUSCULAR","MscleWalkst_armed",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"MUSCULAR","MscleWalkst_Csaw",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"MUSCULAR","Mscle_rckt_run",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"MUSCULAR","Mscle_rckt_walkst",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"MUSCULAR","Mscle_run_Csaw",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"MUSCULAR","MuscleIdle",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_armed",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_Csaw",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_rocket",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"MUSCULAR","MuscleRun",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"MUSCULAR","MuscleRun_armed",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"MUSCULAR","MuscleSprint",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"MUSCULAR","MuscleWalk",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"MUSCULAR","MuscleWalkstart",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"MUSCULAR","MuscleWalk_armed",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"MUSCULAR","Musclewalk_Csaw",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"MUSCULAR","Musclewalk_rocket",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animotb(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animotb [1-17]");
	if(params[0] < 1 || params[0] > 17) return Send(playerid,COLOR_GREY,"Введите: /animotb [1-17]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"OTB","betslp_in",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"OTB","betslp_lkabt",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"OTB","betslp_loop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"OTB","betslp_out",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"OTB","betslp_tnk",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"OTB","wtchrace_cmon",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"OTB","wtchrace_in",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"OTB","wtchrace_loop",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"OTB","wtchrace_lose",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"OTB","wtchrace_out",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"OTB","wtchrace_win",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animpark(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animpark [1-3]");
		if(params[0] < 1 || params[0] > 3) return Send(playerid,COLOR_GREY,"Введите: /animpark [1-3]");
		switch(params[0])
		{
			case 1: ApplyAnimation(playerid,"PARK","Tai_Chi_in",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.1,0,1,1,1,1);
			case 3: ApplyAnimation(playerid,"PARK","Tai_Chi_Out",4.1,0,1,1,1,1);
		}
	}
	return 1;
}

CMD:animpaul(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animpaul [1-12]");
	if(params[0] < 1 || params[0] > 12) return Send(playerid,COLOR_GREY,"Введите: /animpaul [1-12]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"PAULNMAC","Piss_in",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PAULNMAC","Piss_loop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PAULNMAC","Piss_out",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PAULNMAC","PnM_Argue1_A",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PAULNMAC","PnM_Argue1_B",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PAULNMAC","PnM_Argue2_A",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PAULNMAC","PnM_Argue2_B",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PAULNMAC","PnM_Loop_A",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PAULNMAC","PnM_Loop_B",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PAULNMAC","wank_in",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PAULNMAC","wank_out",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animsaw(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animsaw [1-12]");
	if(params[0] < 1 || params[0] > 12) return Send(playerid,COLOR_GREY,"Введите: /animsaw [1-12]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CHAINSAW","CSAW_2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CHAINSAW","CSAW_3",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CHAINSAW","CSAW_G",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_1",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_2",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_3",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"CHAINSAW","IDLE_csaw",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"CHAINSAW","WEAPON_csawlo",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animchoppa(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animchoppa [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animchoppa [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CHOPPA","CHOPPA_back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CHOPPA","CHOPPA_bunnyhop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CHOPPA","CHOPPA_drivebyFT",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CHOPPA","CHOPPA_driveby_LHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CHOPPA","CHOPPA_driveby_RHS",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CHOPPA","CHOPPA_fwd",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffBACK",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffLHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffRHS",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"CHOPPA","CHOPPA_jumponL",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"CHOPPA","CHOPPA_jumponR",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"CHOPPA","CHOPPA_Left",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"CHOPPA","CHOPPA_pedal",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"CHOPPA","CHOPPA_Pushes",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"CHOPPA","CHOPPA_ride",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"CHOPPA","CHOPPA_Right",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"CHOPPA","CHOPPA_sprint",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"CHOPPA","CHOPPA_Still",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animclothes(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animclothes [1-13]");
	if(params[0] < 1 || params[0] > 13) return Send(playerid,COLOR_GREY,"Введите: /animclothes [1-13]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CLOTHES","CLO_Buy",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CLOTHES","CLO_In",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CLOTHES","CLO_Out",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Hat",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_In",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_In_O",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Legs",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Loop",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Out",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Out_O",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Shoes",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Torso",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Watch",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcoach(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcoach [1-6]");
	if(params[0] < 1 || params[0] > 6) return Send(playerid,COLOR_GREY,"Введите: /animcoach [1-6]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"COACH","COACH_inL",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"COACH","COACH_inR",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"COACH","COACH_opnL",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"COACH","COACH_opnR",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"COACH","COACH_outL",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"COACH","COACH_outR",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:animcolt(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcolt [1-7]");
	if(params[0] < 1 || params[0] > 7) return Send(playerid,COLOR_GREY,"Введите: /animcolt [1-7]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"COLT45","2guns_crouchfire",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"COLT45","colt45_crouchfire",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"COLT45","colt45_crouchreload",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"COLT45","colt45_fire",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"COLT45","colt45_fire_2hands",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"COLT45","colt45_reload",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"COLT45","sawnoff_reload",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcopa(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcopa [1-12]");
	if(params[0] < 1 || params[0] > 12) return Send(playerid,COLOR_GREY,"Введите: /animcopa [1-12]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_in",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_loop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_nod",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_out",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_shake",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_in",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_loop",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_nod",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_out",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_think",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcod(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcod [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animcod [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_B",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_FT",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_L",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_R",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcrack(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcrack [1-9]");
	if(params[0] < 1 || params[0] > 9) return Send(playerid,COLOR_GREY,"Введите: /animcrack [1-9]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_01",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_02",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"CRACK","crckidle1",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"CRACK","crckidle2",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animcrib(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animcrib [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animcrib [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"CRIB","CRIB_Console_Loop",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CRIB","CRIB_Use_Switch",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CRIB","PED_Console_Loop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CRIB","PED_Console_Loose",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CRIB","PED_Console_Win",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animdance(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animdance [1-13]");
	if(params[0] < 1 || params[0] > 13) return Send(playerid,COLOR_GREY,"Введите: /animdance [1-13]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"DANCING","bd_clap",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"DANCING","dance_loop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animdealer(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animdealer [1-7]");
	if(params[0] < 1 || params[0] > 7) return Send(playerid,COLOR_GREY,"Введите: /animdealer [1-7]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"DEALER","DEALER_DEAL",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_01",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_02",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_03",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"DEALER","DRUGS_BUY",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"DEALER","shop_pay",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animdildo(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animdildo [1-9]");
	if(params[0] < 1 || params[0] > 9) return Send(playerid,COLOR_GREY,"Введите: /animdildo [1-9]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"DILDO","DILDO_1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"DILDO","DILDO_2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"DILDO","DILDO_3",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"DILDO","DILDO_block",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"DILDO","DILDO_G",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"DILDO","DILDO_Hit_1",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"DILDO","DILDO_Hit_2",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"DILDO","DILDO_Hit_3",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"DILDO","DILDO_IDLE",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animdozer(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animdozer [1-9]");
	if(params[0] < 1 || params[0] > 9) return Send(playerid,COLOR_GREY,"Введите: /animdozer [1-9]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"DOZER","DOZER_Align_LHS",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"DOZER","DOZER_Align_RHS",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"DOZER","DOZER_getin_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"DOZER","DOZER_getin_RHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"DOZER","DOZER_getout_LHS",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"DOZER","DOZER_getout_RHS",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"DOZER","DOZER_Jacked_LHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"DOZER","DOZER_Jacked_RHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"DOZER","DOZER_pullout_LHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animdrivebys(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animdrivebys [1-8]");
	if(params[0] < 1 || params[0] > 8) return Send(playerid,COLOR_GREY,"Введите: /animdrivebys [1-8]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS_Bwd",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS_Fwd",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS_Bwd",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS_Fwd",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyTop_LHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyTop_RHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animfat(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfat [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animfat [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"FAT","FatIdle",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"FAT","FatIdle_armed",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FAT","FatIdle_Csaw",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FAT","FatIdle_Rocket",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"FAT","FatRun",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"FAT","FatRun_armed",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"FAT","FatRun_Csaw",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"FAT","FatRun_Rocket",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"FAT","FatSprint",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"FAT","FatWalk",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"FAT","FatWalkstart",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"FAT","FatWalkstart_Csaw",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"FAT","FatWalkSt_armed",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"FAT","FatWalkSt_Rocket",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"FAT","FatWalk_armed",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"FAT","FatWalk_Csaw",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"FAT","FatWalk_Rocket",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"FAT","IDLE_tired",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animfightb(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfightb [1-10]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animfightb [1-10]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"FIGHT_B","FightB_1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"FIGHT_B","FightB_2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FIGHT_B","FightB_3",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FIGHT_B","FightB_block",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"FIGHT_B","FightB_IDLE",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"FIGHT_B","FightB_M",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"FIGHT_B","HitB_1",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"FIGHT_B","HitB_2",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"FIGHT_B","HitB_3",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animfightc(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfightc [1-12]");
	if(params[0] < 1 || params[0] > 12) return Send(playerid,COLOR_GREY,"Введите: /animfightc [1-12]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"FIGHT_C","FightC_1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"FIGHT_C","FightC_2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FIGHT_C","FightC_3",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FIGHT_C","FightC_block",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"FIGHT_C","FightC_blocking",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"FIGHT_C","FightC_G",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"FIGHT_C","FightC_IDLE",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"FIGHT_C","FightC_Spar",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"FIGHT_C","HitC_1",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"FIGHT_C","HitC_2",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animfightd(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfightd [1-10]");
	if(params[0] < 1 || params[0] > 10) return Send(playerid,COLOR_GREY,"Введите: /animfightd [1-10]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"FIGHT_D","FightD_2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FIGHT_D","FightD_block",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"FIGHT_D","FightD_IDLE",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"FIGHT_D","FightD_M",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"FIGHT_D","HitD_1",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"FIGHT_D","HitD_2",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"FIGHT_D","HitD_3",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animfighte(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfighte [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animfighte [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"FIGHT_E","FightKick",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick_B",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animfinale(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfinale [1-16]");
	if(params[0] < 1 || params[0] > 16) return Send(playerid,COLOR_GREY,"Введите: /animfinale [1-16]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"FINALE","FIN_Climb_In",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"FINALE","FIN_Cop1_ClimbOut2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FINALE","FIN_Cop1_Loop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FINALE","FIN_Cop1_Stomp",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"FINALE","FIN_Hang_L",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"FINALE","FIN_Hang_Loop",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"FINALE","FIN_Hang_R",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"FINALE","FIN_Hang_L",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"FINALE","FIN_Jump_On",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"FINALE","FIN_Land_Car",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"FINALE","FIN_Land_Die",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"FINALE","FIN_LegsUp",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"FINALE","FIN_LegsUp_L",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"FINALE","FIN_LegsUp_Loop",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"FINALE","FIN_LegsUp_R",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"FINALE","FIN_Let_Go",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animfinale2(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfinale2 [1-8]");
	if(params[0] < 1 || params[0] > 8) return Send(playerid,COLOR_GREY,"Введите: /animfinale2 [1-8]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_ClimbOut",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Fall",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Loop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Shot",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Swing",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"FINALE2","FIN_Cop2_ClimbOut",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"FINALE2","FIN_Switch_P",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"FINALE2","FIN_Switch_S",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animflamef(playerid, params[]) {
	ApplyAnimation(playerid,"FLAME","FLAME_fire",4.1,0,1,1,1,1);
	return 1;
}
CMD:animflowers(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animflowers [1-3]");
		if(params[0] < 1 || params[0] > 3) return Send(playerid,COLOR_GREY,"Введите: /animflowers [1-3]");
		switch(params[0])
		{
			case 1: ApplyAnimation(playerid,"Flowers","Flower_attack",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"Flowers","Flower_attack_M",4.1,0,1,1,1,1);
			case 3: ApplyAnimation(playerid,"Flowers","Flower_Hit",4.1,0,1,1,1,1);
		}
	}
	return 1;
}
CMD:animghands(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animghands [1-20]");
	if(params[0] < 1 || params[0] > 20) return Send(playerid,COLOR_GREY,"Введите: /animghands [1-20]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"GHANDS","gsign1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"GHANDS","LHGsign1",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"GHANDS","LHGsign2",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"GHANDS","LHGsign3",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"GHANDS","LHGsign4",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"GHANDS","LHGsign5",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"GHANDS","RHGsign1",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"GHANDS","RHGsign2",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"GHANDS","RHGsign3",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"GHANDS","RHGsign4",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"GHANDS","RHGsign5",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animfw(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animfw [1-9]");
	if(params[0] < 1 || params[0] > 9) return Send(playerid,COLOR_GREY,"Введите: /animfw [1-9]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"Freeweights","gym_barbell",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"Freeweights","gym_free_A",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"Freeweights","gym_free_B",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"Freeweights","gym_free_celebrate",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"Freeweights","gym_free_down",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"Freeweights","gym_free_loop",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"Freeweights","gym_free_pickup",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"Freeweights","gym_free_putdown",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"Freeweights","gym_free_up_smooth",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animghetto(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animghetto [1-7]");
	if(params[0] < 1 || params[0] > 7) return Send(playerid,COLOR_GREY,"Введите: /animghetto [1-7]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"GHETTO_DB","Gbd_Car2_PLY",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"GHETTO_DB","Gbd_Car2_SMO",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"GHETTO_DB","Gbd_Car2_SWE",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"GHETTO_DB","Gbd_Car_PLY",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"GHETTO_DB","Gbd_Car_RYD",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"GHETTO_DB","Gbd_Car_SMO",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"GHETTO_DB","Gbd_Car_SWE",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animgog(playerid, params[]) {
	ApplyAnimation(playerid,"goggles","goggles_put_on",4.1,0,1,1,1,1);
	return 1;
}
CMD:animgraffity(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animgraffity [1-2]");
		if(params[0] < 1 || params[0] > 2) return Send(playerid,COLOR_GREY,"Введите: /animgraffity [1-2]");
		switch(params[0])
		{
			case 1: ApplyAnimation(playerid,"GRAFFITI","graffiti_Chkout",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"GRAFFITI","spraycan_fire",4.1,0,1,1,1,1);
		}
	}
	return 1;
}
CMD:animgreya(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animgreya [1-3]");
		if(params[0] < 1 || params[0] > 3) return Send(playerid,COLOR_GREY,"Введите: /animgreya [1-3]");
		switch(params[0])
		{
			case 1: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop",4.1,0,1,1,1,1);
			case 3: ApplyAnimation(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1);
		}
	}
	return 1;
}
CMD:animgren(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animgren [1-3]");
		if(params[0] < 1 || params[0] > 3) return Send(playerid,COLOR_GREY,"Введите: /animgren [1-3]");
		switch(params[0])
		{
			case 1: ApplyAnimation(playerid,"GRENADE","WEAPON_start_throw",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"GRENADE","WEAPON_throw",4.1,0,1,1,1,1);
			case 3: ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",4.1,0,1,1,1,1);
		}
	}
	return 1;
}
CMD:animhaircut(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animhaircut [1-13]");
	if(params[0] < 1 || params[0] > 13) return Send(playerid,COLOR_GREY,"Введите: /animhaircut [1-13]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"HAIRCUTS","BRB_Beard_01",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"HAIRCUTS","BRB_Buy",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut_In",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut_Out",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"HAIRCUTS","BRB_Hair_01",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"HAIRCUTS","BRB_Hair_02",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"HAIRCUTS","BRB_In",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"HAIRCUTS","BRB_Out",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"HAIRCUTS","BRB_Loop",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_In",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_Loop",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_Out",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animheist(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animheist [1-10]");
	if(params[0] < 1 || params[0] > 10) return Send(playerid,COLOR_GREY,"Введите: /animheist [1-10]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"HEIST9","CAS_G2_GasKO",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"HEIST9","swt_wllpk_L",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"HEIST9","swt_wllpk_L_back",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"HEIST9","swt_wllpk_R",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"HEIST9","swt_wllpk_R_back",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"HEIST9","swt_wllshoot_in_L",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"HEIST9","swt_wllshoot_in_R",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"HEIST9","swt_wllshoot_out_L",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"HEIST9","swt_wllshoot_out_R",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"HEIST9","Use_SwipeCard",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animinthouse(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animinthouse [1-10]");
	if(params[0] < 1 || params[0] > 10) return Send(playerid,COLOR_GREY,"Введите: /animinthouse [1-10]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"INT_HOUSE","BED_In_L",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"INT_HOUSE","BED_Out_L",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"INT_HOUSE","BED_Out_R",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"INT_HOUSE","LOU_Loop",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"INT_HOUSE","LOU_Out",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animintoffice(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animintoffice [1-10]");
	if(params[0] < 1 || params[0] > 10) return Send(playerid,COLOR_GREY,"Введите: /animintoffice [1-10]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"INT_OFFICE","FF_Dam_Fwd",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_2Idle_180",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Bored_Loop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Crash",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Drink",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Idle_Loop",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_In",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Read",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Type_Loop",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Watch",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animplayerdbf(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animplayerdbf [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animplayerdbf [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyBwd",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyFwd",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyLHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyRHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animplayidles(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animplayidles [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animplayidles [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"PLAYIDLES","shift",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PLAYIDLES","shldr",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PLAYIDLES","stretch",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PLAYIDLES","strleg",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PLAYIDLES","time",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animpolice(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animpolice [1-10]");
	if(params[0] < 1 || params[0] > 10) return Send(playerid,COLOR_GREY,"Введите: /animpolice [1-10]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"POLICE","CopTraf_Away",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"POLICE","CopTraf_Come",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"POLICE","CopTraf_Left",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"POLICE","COP_getoutcar_LHS",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"POLICE","Cop_move_FWD",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"POLICE","crm_drgbst_01",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"POLICE","Door_Kick",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"POLICE","plc_drgbst_01",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"POLICE","plc_drgbst_02",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animpool(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animpool [1-21]");
	if(params[0] < 1 || params[0] > 21) return Send(playerid,COLOR_GREY,"Введите: /animpool [1-21]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"POOL","POOL_Idle_Stance",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"POOL","POOL_Long_Shot",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"POOL","POOL_Long_Shot_O",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"POOL","POOL_Long_Start",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"POOL","POOL_Long_Start_O",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"POOL","POOL_Med_Shot",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"POOL","POOL_Med_Shot_O",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"POOL","POOL_Med_Start",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"POOL","POOL_Med_Start_O",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"POOL","POOL_Place_White",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"POOL","POOL_Short_Shot",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"POOL","POOL_Short_Shot_O",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"POOL","POOL_Short_Start",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"POOL","POOL_Short_Start_O",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"POOL","POOL_Walk",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"POOL","POOL_Walk_Start",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"POOL","POOL_XLong_Shot",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"POOL","POOL_XLong_Shot_O",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"POOL","POOL_XLong_Start",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"POOL","POOL_XLong_Start_O",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animpoor(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animpoor [1-2]");
	if(params[0] < 1 || params[0] > 2) return Send(playerid,COLOR_GREY,"Введите: /animpoor [1-2]");
	switch( params[0] )
	{
		case 1: ApplyAnimation(playerid,"POOR","WINWASH_Start",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"POOR","WINWASH_Wash2Beg",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animpython(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animpython [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animpython [1-5]");
	switch(params[0])
	{
		case 1:ApplyAnimation(playerid,"PYTHON","python_crouchfire",4.1,0,1,1,1,1);
		case 2:ApplyAnimation(playerid,"PYTHON","python_crouchreload",4.1,0,1,1,1,1);
		case 3:ApplyAnimation(playerid,"PYTHON","python_fire",4.1,0,1,1,1,1);
		case 4:ApplyAnimation(playerid,"PYTHON","python_fire_poor",4.1,0,1,1,1,1);
		case 5:ApplyAnimation(playerid,"PYTHON","python_reload",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animquad(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animquad [1-17]");
	if(params[0] < 1 || params[0] > 17) return Send(playerid,COLOR_GREY,"Введите: /animquad [1-17]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"QUAD","QUAD_back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"QUAD","QUAD_driveby_FT",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"QUAD","QUAD_driveby_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"QUAD","QUAD_driveby_RHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"QUAD","QUAD_FWD",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"QUAD","QUAD_getoff_B",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"QUAD","QUAD_getoff_LHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"QUAD","QUAD_getoff_RHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"QUAD","QUAD_geton_LHS",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"QUAD","QUAD_geton_RHS",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"QUAD","QUAD_hit",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"QUAD","QUAD_kick",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"QUAD","QUAD_Left",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"QUAD","QUAD_passenger",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"QUAD","QUAD_reverse",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"QUAD","QUAD_ride",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"QUAD","QUAD_Right",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animquadbz(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animquadbz [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animquadbz [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_BWD",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_FWD",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_RHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animrapping(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animrapping [1-8]");
	if(params[0] < 1 || params[0] > 8) return Send(playerid,COLOR_GREY,"Введите: /animrapping [1-8]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"RAPPING","Laugh_01",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"RAPPING","RAP_A_IN",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"RAPPING","RAP_A_OUT",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"RAPPING","RAP_B_IN",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"RAPPING","RAP_B_OUT",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animrifle(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animrifle [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animrifle [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"RIFLE","RIFLE_crouchfire",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"RIFLE","RIFLE_crouchload",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"RIFLE","RIFLE_fire",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"RIFLE","RIFLE_fire_poor",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"RIFLE","RIFLE_load",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animriot(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animrifle [1-7]");
	if(params[0] < 1 || params[0] > 7) return Send(playerid,COLOR_GREY,"Введите: /animrifle [1-7]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"RIOT","RIOT_ANGRY_B",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"RIOT","RIOT_challenge",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"RIOT","RIOT_CHANT",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"RIOT","RIOT_FUKU",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"RIOT","RIOT_PUNCHES",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"RIOT","RIOT_shout",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animrobbank(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animrobbank [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animrobbank [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_End",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open_O",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"ROB_BANK","SHP_HandsUp_Scr",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animrocket(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animrocket [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animrocket [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"ROCKET","RocketFire",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"ROCKET","run_rocket",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"ROCKET","walk_rocket",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"ROCKET","WALK_start_rocket",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animrustler(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animrustler [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animrustler [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"RUSTLER","Plane_align_LHS",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"RUSTLER","Plane_close",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"RUSTLER","Plane_getin",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"RUSTLER","Plane_getout",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"RUSTLER","Plane_open",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbiked(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbiked [1-19]");
	if(params[0] < 1 || params[0] > 19) return Send(playerid,COLOR_GREY,"Введите: /animbiked [1-19]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"BIKED","BIKEd_Back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BIKED","BIKEd_drivebyFT",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BIKED","BIKEd_drivebyLHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BIKED","BIKEd_drivebyRHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BIKED","BIKEd_Fwd",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BIKED","BIKEd_getoffBACK",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BIKED","BIKEd_getoffLHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BIKED","BIKEd_getoffRHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BIKED","BIKEd_hit",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BIKED","BIKEd_jumponL",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BIKED","BIKEd_jumponR",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BIKED","BIKEd_kick",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"BIKED","BIKEd_Left",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"BIKED","BIKEd_passenger",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"BIKED","BIKEd_pushes",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"BIKED","BIKEd_Ride",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"BIKED","BIKEd_Right",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"BIKED","BIKEd_shuffle",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"BIKED","BIKEd_Still",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animryder(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animryder [1-15]");
	if(params[0] < 1 || params[0] > 15) return Send(playerid,COLOR_GREY,"Введите: /animryder [1-15]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"RYDER","RYD_Beckon_01",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"RYDER","RYD_Beckon_02",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"RYDER","RYD_Beckon_03",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"RYDER","RYD_Die_PT1",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"RYDER","RYD_Die_PT2",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"RYDER","Van_Crate_L",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"RYDER","Van_Crate_R",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"RYDER","Van_Fall_L",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"RYDER","Van_Fall_R",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"RYDER","Van_Lean_L",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"RYDER","Van_Lean_R",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"RYDER","VAN_PickUp_S",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"RYDER","Van_Stand",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"RYDER","Van_Stand_Crate",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"RYDER","Van_Throw",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animscrat(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animscrat [1-12]");
	if(params[0] < 1 || params[0] > 12) return Send(playerid,COLOR_GREY,"Введите: /animscrat [1-12]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SCRATCHING","scdldlp",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SCRATCHING","scdlulp",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SCRATCHING","scdrdlp",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"SCRATCHING","scdrulp",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"SCRATCHING","sclng_l",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"SCRATCHING","sclng_r",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"SCRATCHING","scmid_l",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"SCRATCHING","scmid_r",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"SCRATCHING","scshrtl",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"SCRATCHING","scshrtr",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"SCRATCHING","sc_ltor",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"SCRATCHING","sc_rtol",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animshamal(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animshamal [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animshamal [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SHAMAL","SHAMAL_align",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SHAMAL","SHAMAL_getin_LHS",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SHAMAL","SHAMAL_getout_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"SHAMAL","SHAMAL_open",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animshop(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animshop [1-24]");
	if(params[0] < 1 || params[0] > 24) return Send(playerid,COLOR_GREY,"Введите: /animshop [1-24]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SHOP","ROB_2Idle",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SHOP","ROB_Loop",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SHOP","donutdrop",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"SHOP","ROB_Loop_Threat",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"SHOP","ROB_Shifty",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"SHOP","ROB_StickUp_In",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"SHOP","SHP_Duck_Fire",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"SHOP","SHP_Gun_Aim",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"SHOP","SHP_Gun_Duck",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"SHOP","SHP_Gun_Fire",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"SHOP","SHP_Gun_Grab",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"SHOP","SHP_HandsUp_Scr",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"SHOP","SHP_Jump_Glide",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"SHOP","SHP_Jump_Land",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"SHOP","SHP_Jump_Launch",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"SHOP","SHP_Rob_GiveCash",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"SHOP","SHP_Rob_HandsUp",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"SHOP","SHP_Rob_React",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"SHOP","SHP_Serve_End",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"SHOP","SHP_Serve_Idle",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"SHOP","SHP_Serve_Loop",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"SHOP","SHP_Serve_Start",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"SHOP","Smoke_RYD",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animshotgun(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animshotgun [1-3]");
		if(params[0] < 1 || params[0] > 3) return Send(playerid,COLOR_GREY,"Введите: /animshotgun [1-3]");
		switch(params[0])
		{
			case 1: ApplyAnimation(playerid,"SHOTGUN","shotgun_crouchfire",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"SHOTGUN","shotgun_fire",4.1,0,1,1,1,1);
			case 3: ApplyAnimation(playerid,"SHOTGUN","shotgun_fire_poor",4.1,0,1,1,1,1);
		}
	}
	return 1;
}
CMD:animskate(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animskate [1-3]");
		if(params[0] < 1 || params[0] > 3) return Send(playerid,COLOR_GREY,"Введите: /animskate [1-3]");
		switch(params[0])
		{
			case 1: ApplyAnimation(playerid,"SKATE","skate_idle",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"SKATE","skate_run",4.1,0,1,1,1,1);
			case 3: ApplyAnimation(playerid,"SKATE","skate_sprint",4.1,0,1,1,1,1);
		}
	}
	return 1;
}
CMD:animvortex(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animvortex [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animvortex [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"VORTEX","CAR_jumpin_LHS",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"VORTEX","CAR_jumpin_RHS",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"VORTEX","vortex_getout_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"VORTEX","vortex_getout_RHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animtec(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animtec [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animtec [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"TEC","TEC_crouchfire",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"TEC","TEC_crouchreload",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"TEC","TEC_fire",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"TEC","TEC_reload",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animtrain(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animtrain [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animtrain [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"TRAIN","tran_gtup",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"TRAIN","tran_hng",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"TRAIN","tran_ouch",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"TRAIN","tran_stmb",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animsil(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animsil [1-4]");
	if(params[0] < 1 || params[0] > 4) return Send(playerid,COLOR_GREY,"Введите: /animsil [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SILENCED","CrouchReload",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SILENCED","SilenceCrouchfire",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SILENCED","Silence_fire",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animtattoo(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animtattoo [1-57]");
	if(params[0] < 1 || params[0] > 57) return Send(playerid,COLOR_GREY,"Введите: /animtattoo [1-57]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_O",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_P",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_T",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_O",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"TATTOOS","TA_ArmL_Out_P",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_T",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_O",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_P",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_T",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_O",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_P",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_T",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_O",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_P",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_T",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_O",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_P",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_T",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_O",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_P",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_T",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_O",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_P",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_T",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_O",4.1,0,1,1,1,1);
		case 26: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_P",4.1,0,1,1,1,1);
		case 27: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_T",4.1,0,1,1,1,1);
		case 28: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_In_P",4.1,0,1,1,1,1);
		case 29: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_Loop_P",4.1,0,1,1,1,1);
		case 30: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_Out_P",4.1,0,1,1,1,1);
		case 31: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_In_O",4.1,0,1,1,1,1);
		case 32: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_In_T",4.1,0,1,1,1,1);
		case 33: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Out_O",4.1,0,1,1,1,1);
		case 34: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Out_T",4.1,0,1,1,1,1);
		case 35: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Pose_O",4.1,0,1,1,1,1);
		case 36: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Pose_T",4.1,0,1,1,1,1);
		case 37: ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_O",4.1,0,1,1,1,1);
		case 38: ApplyAnimation(playerid,"TATTOOS","Sit_relaxed",4.1,0,1,1,1,1);
		case 39: ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_P",4.1,0,1,1,1,1);
		case 40: ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_T",4.1,0,1,1,1,1);
		case 41: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_O",4.1,0,1,1,1,1);
		case 42: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_P",4.1,0,1,1,1,1);
		case 43: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_T",4.1,0,1,1,1,1);
		case 44: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_O",4.1,0,1,1,1,1);
		case 45: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_P",4.1,0,1,1,1,1);
		case 46: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_T",4.1,0,1,1,1,1);
		case 47: ApplyAnimation(playerid,"TATTOOS","TAT_Idle_Loop_O",4.1,0,1,1,1,1);
		case 48: ApplyAnimation(playerid,"TATTOOS","TAT_Idle_Loop_T",4.1,0,1,1,1,1);
		case 49: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_O",4.1,0,1,1,1,1);
		case 50: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_P",4.1,0,1,1,1,1);
		case 51: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_T",4.1,0,1,1,1,1);
		case 52: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_O",4.1,0,1,1,1,1);
		case 53: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_P",4.1,0,1,1,1,1);
		case 54: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_T",4.1,0,1,1,1,1);
		case 55: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_O",4.1,0,1,1,1,1);
		case 56: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_P",4.1,0,1,1,1,1);
		case 57: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_T",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animsmoking(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animtattoo [1-8]");
	if(params[0] < 1 || params[0] > 8) return Send(playerid,COLOR_GREY,"Введите: /animtattoo [1-8]");
	switch(params[0])
	{
		case 1:ApplyAnimation(playerid,"SMOKING","F_smklean_loop",4.1,0,1,1,1,1);
		case 2:ApplyAnimation(playerid,"SMOKING","M_smklean_loop",4.1,0,1,1,1,1);
		case 3:ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",4.1,0,1,1,1,1);
		case 4:ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,1,1,1,1);
		case 5:ApplyAnimation(playerid,"SMOKING","M_smk_in",4.1,0,1,1,1,1);
		case 6:ApplyAnimation(playerid,"SMOKING","M_smk_loop",4.1,0,1,1,1,1);
		case 7:ApplyAnimation(playerid,"SMOKING","M_smk_out",4.1,0,1,1,1,1);
		case 8:ApplyAnimation(playerid,"SMOKING","M_smk_tap",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animsniper(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animsniper [1-2]");
	if(params[0] < 1 || params[0] > 2) return Send(playerid,COLOR_GREY,"Введите: /animsniper [1-2]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SPRAYCAN","spraycan_fire",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animstrip(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animstrip [1-20]");
	if(params[0] < 1 || params[0] > 20) return Send(playerid,COLOR_GREY,"Введите: /animstrip [1-20]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"STRIP","PLY_CASH",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"STRIP","PUN_CASH",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"STRIP","PUN_LOOP",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"STRIP","strip_A",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"STRIP","strip_B",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"STRIP","strip_C",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"STRIP","strip_D",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"STRIP","strip_E",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"STRIP","strip_F",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"STRIP","strip_G",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"STRIP","STR_A2B",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"STRIP","STR_B2A",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"STRIP","STR_B2C",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"STRIP","STR_C1",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"STRIP","STR_C2",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"STRIP","STR_C2B",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"STRIP","STR_Loop_B",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"STRIP","STR_Loop_C",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animbath(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animbath [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animbath [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SUNBATHE","batherdown",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SUNBATHE","batherup",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_in",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_out",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleA",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleB",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleC",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_in",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_out",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleB",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleC",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_in",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_out",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"SUNBATHE","SBATHE_F_LieB2Sit",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"SUNBATHE","SBATHE_F_Out",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"SUNBATHE","SitnWait_out_W",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animsweet(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animsweet [1-7]");
	if(params[0] < 1 || params[0] > 7) return Send(playerid,COLOR_GREY,"Введите: /animsweet [1-7]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SWEET","LaFin_Player",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SWEET","LaFin_Sweet",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"SWEET","plyr_hndshldr_01",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"SWEET","sweet_hndshldr_01",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"SWEET","Sweet_injuredloop",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animswim(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animswim [1-7]");
	if(params[0] < 1 || params[0] > 7) return Send(playerid,COLOR_GREY,"Введите: /animswim [1-7]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SWIM","Swim_Breast",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SWIM","SWIM_crawl",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SWIM","Swim_Dive_Under",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"SWIM","Swim_Glide",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"SWIM","Swim_jumpout",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"SWIM","Swim_Tread",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"SWIM","Swim_Under",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animsword(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animsword [1-10]");
	if(params[0] < 1 || params[0] > 10) return Send(playerid,COLOR_GREY,"Введите: /animsword [1-10]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SWORD","sword_1",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"SWORD","sword_2",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SWORD","sword_3",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"SWORD","sword_4",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"SWORD","sword_block",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"SWORD","Sword_Hit_1",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"SWORD","Sword_Hit_2",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"SWORD","Sword_Hit_3",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"SWORD","sword_IDLE",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"SWORD","sword_part",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animtank(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animtank [1-6]");
	if(params[0] < 1 || params[0] > 6) return Send(playerid,COLOR_GREY,"Введите: /animtank [1-6]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"TANK","TANK_align_LHS",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"TANK","TANK_close_LHS",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"TANK","TANK_doorlocked",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"TANK","TANK_getin_LHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"TANK","TANK_getout_LHS",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"TANK","TANK_open_LHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animtruck(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animtruck [1-17]");
	if(params[0] < 1 || params[0] > 17) return Send(playerid,COLOR_GREY,"Введите: /animtruck [1-17]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"TRUCK","TRUCK_ALIGN_LHS",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"TRUCK","TRUCK_ALIGN_RHS",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"TRUCK","TRUCK_closedoor_LHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"TRUCK","TRUCK_closedoor_RHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"TRUCK","TRUCK_close_LHS",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"TRUCK","TRUCK_close_RHS",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"TRUCK","TRUCK_getin_LHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"TRUCK","TRUCK_getin_RHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"TRUCK","TRUCK_getout_LHS",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"TRUCK","TRUCK_getout_RHS",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"TRUCK","TRUCK_jackedLHS",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"TRUCK","TRUCK_jackedRHS",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"TRUCK","TRUCK_open_LHS",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"TRUCK","TRUCK_open_RHS",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"TRUCK","TRUCK_pullout_LHS",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"TRUCK","TRUCK_pullout_RHS",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"TRUCK","TRUCK_Shuffle",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animuzi(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animuzi [1-5]");
	if(params[0] < 1 || params[0] > 5) return Send(playerid,COLOR_GREY,"Введите: /animuzi [1-5]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"UZI","UZI_crouchfire",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"UZI","UZI_crouchreload",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"UZI","UZI_fire",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"UZI","UZI_fire_poor",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"UZI","UZI_reload",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animvan(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animvan [1-8]");
	if(params[0] < 1 || params[0] > 8) return Send(playerid,COLOR_GREY,"Введите: /animvan [1-8]");
	switch(params[0])
	{
		case 1:ApplyAnimation(playerid,"VAN","VAN_close_back_LHS",4.1,0,1,1,1,1);
		case 2:ApplyAnimation(playerid,"VAN","VAN_close_back_RHS",4.1,0,1,1,1,1);
		case 3:ApplyAnimation(playerid,"VAN","VAN_getin_Back_LHS",4.1,0,1,1,1,1);
		case 4:ApplyAnimation(playerid,"VAN","VAN_getin_Back_RHS",4.1,0,1,1,1,1);
		case 5:ApplyAnimation(playerid,"VAN","VAN_getout_back_LHS",4.1,0,1,1,1,1);
		case 6:ApplyAnimation(playerid,"VAN","VAN_getout_back_RHS",4.1,0,1,1,1,1);
		case 7:ApplyAnimation(playerid,"VAN","VAN_open_back_LHS",4.1,0,1,1,1,1);
		case 8:ApplyAnimation(playerid,"VAN","VAN_open_back_RHS",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animvending(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animsword [1-10]");
	if(params[0] < 1 || params[0] > 10) return Send(playerid,COLOR_GREY,"Введите: /animsword [1-10]");
	switch(params[0])
	{
		case 1:ApplyAnimation(playerid,"VENDING","VEND_Drink2_P",4.1,0,1,1,1,1);
		case 2:ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,1,1);
		case 3:ApplyAnimation(playerid,"VENDING","vend_eat1_P",4.1,0,1,1,1,1);
		case 4:ApplyAnimation(playerid,"VENDING","VEND_Eat_P",4.1,0,1,1,1,1);
		case 5:ApplyAnimation(playerid,"VENDING","VEND_Use",4.1,0,1,1,1,1);
		case 6:ApplyAnimation(playerid,"VENDING","VEND_Use_pt2",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animway(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animway [1-18]");
	if(params[0] < 1 || params[0] > 18) return Send(playerid,COLOR_GREY,"Введите: /animway [1-18]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"WAYFARER","WF_Back",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"WAYFARER","WF_drivebyFT",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"WAYFARER","WF_drivebyLHS",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"WAYFARER","WF_drivebyRHS",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"WAYFARER","WF_getoffBACK",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"WAYFARER","WF_getoffLHS",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"WAYFARER","WF_getoffRHS",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"WAYFARER","WF_hit",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"WAYFARER","WF_jumponL",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"WAYFARER","WF_jumponR",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"WAYFARER","WF_kick",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"WAYFARER","WF_Left",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"WAYFARER","WF_passenger",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"WAYFARER","WF_pushes",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"WAYFARER","WF_Ride",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"WAYFARER","WF_Right",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"WAYFARER","WF_Still",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animweap(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animweap [1-17]");
	if(params[0] < 1 || params[0] > 17) return Send(playerid,COLOR_GREY,"Введите: /animweap [1-17]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"WEAPONS","SHP_1H_Lift",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"WEAPONS","SHP_1H_Lift_End",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"WEAPONS","SHP_1H_Ret",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"WEAPONS","SHP_1H_Ret_S",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"WEAPONS","SHP_2H_Lift",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"WEAPONS","SHP_2H_Lift_End",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"WEAPONS","SHP_2H_Ret",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"WEAPONS","SHP_2H_Ret_S",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Lift",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Lift_End",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Ret",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Ret_S",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"WEAPONS","SHP_G_Lift_In",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"WEAPONS","SHP_G_Lift_Out",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"WEAPONS","SHP_Tray_In",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"WEAPONS","SHP_Tray_Out",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"WEAPONS","SHP_Tray_Pose",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animwuzi(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animwuzi [1-12]");
	if(params[0] < 1 || params[0] > 12) return Send(playerid,COLOR_GREY,"Введите: /animwuzi [1-12]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"WUZI","CS_Plyr_pt1",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"WUZI","CS_Plyr_pt2",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt1",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt2",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"WUZI","Walkstart_Idle_01",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Plyr",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"WUZI","Wuzi_grnd_chk",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"WUZI","Wuzi_stand_loop",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"WUZI","Wuzi_Walk",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:animat(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animat [1-3]");
		if(params[0] < 1 || params[0] > 10) return Send(playerid,COLOR_GREY,"Введите: /animat [1-3]");
		switch(params[0])
		{
			case 1: ApplyAnimation(playerid,"Attractors","Stepsit_in",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"Attractors","Stepsit_loop",4.1,0,1,1,1,1);
			case 3: ApplyAnimation(playerid,"Attractors","Stepsit_out",4.1,0,1,1,1,1);
		}
	}
	return 1;
}
CMD:animairport(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"AIRPORT","thrw_barl_thrw",4.1,0,1,1,1,1);
	return 1;
}
CMD:animped(playerid, params[]) {
	if(sscanf(params, "d", params[0])) return Send(playerid,COLOR_GREY,"Введите: /animped [1-301]");
	if(params[0] < 1 || params[0] > 301) return Send(playerid,COLOR_GREY,"Введите: /animped [1-301]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","abseil",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PED","BIKE_elbowL",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED","BIKE_fallR",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PED","BIKE_fall_off",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","BIKE_pickupL",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","BIKE_pickupR",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","BIKE_pullupL",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PED","BIKE_pullupR",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"PED","bomber",4.1,0,1,1,1,1);
		case 14: ApplyAnimation(playerid,"PED","CAR_alignHI_LHS",4.1,0,1,1,1,1);
		case 15: ApplyAnimation(playerid,"PED","CAR_alignHI_RHS",4.1,0,1,1,1,1);
		case 16: ApplyAnimation(playerid,"PED","CAR_align_LHS",4.1,0,1,1,1,1);
		case 17: ApplyAnimation(playerid,"PED","CAR_align_RHS",4.1,0,1,1,1,1);
		case 18: ApplyAnimation(playerid,"PED","CAR_closedoorL_LHS",4.1,0,1,1,1,1);
		case 19: ApplyAnimation(playerid,"PED","CAR_closedoorL_RHS",4.1,0,1,1,1,1);
		case 20: ApplyAnimation(playerid,"PED","CAR_closedoor_LHS",4.1,0,1,1,1,1);
		case 21: ApplyAnimation(playerid,"PED","CAR_closedoor_RHS",4.1,0,1,1,1,1);
		case 22: ApplyAnimation(playerid,"PED","CAR_close_LHS",4.1,0,1,1,1,1);
		case 23: ApplyAnimation(playerid,"PED","CAR_crawloutRHS",4.1,0,1,1,1,1);
		case 24: ApplyAnimation(playerid,"PED","CAR_dead_LHS",4.1,0,1,1,1,1);
		case 25: ApplyAnimation(playerid,"PED","CAR_dead_RHS",4.1,0,1,1,1,1);
		case 26: ApplyAnimation(playerid,"PED","CAR_doorlocked_LHS",4.1,0,1,1,1,1);
		case 27: ApplyAnimation(playerid,"PED","CAR_fallout_LHS",4.1,0,1,1,1,1);
		case 28: ApplyAnimation(playerid,"PED","CAR_fallout_RHS",4.1,0,1,1,1,1);
		case 29: ApplyAnimation(playerid,"PED","CAR_getinL_LHS",4.1,0,1,1,1,1);
		case 30: ApplyAnimation(playerid,"PED","CAR_getinL_RHS",4.1,0,1,1,1,1);
		case 31: ApplyAnimation(playerid,"PED","CAR_getin_LHS",4.1,0,1,1,1,1);
		case 32: ApplyAnimation(playerid,"PED","CAR_getin_RHS",4.1,0,1,1,1,1);
		case 33: ApplyAnimation(playerid,"PED","CAR_getoutL_LHS",4.1,0,1,1,1,1);
		case 34: ApplyAnimation(playerid,"PED","CAR_getout_LHS",4.1,0,1,1,1,1);
		case 35: ApplyAnimation(playerid,"PED","CAR_getout_RHS",4.1,0,1,1,1,1);
		case 36: ApplyAnimation(playerid,"PED","car_hookertalk",4.1,0,1,1,1,1);
		case 37: ApplyAnimation(playerid,"PED","CAR_jackedLHS",4.1,0,1,1,1,1);
		case 38: ApplyAnimation(playerid,"PED","CAR_jackedRHS",4.1,0,1,1,1,1);
		case 39: ApplyAnimation(playerid,"PED","CAR_jumpin_LHS",4.1,0,1,1,1,1);
		case 302: ApplyAnimation(playerid,"PED","CAR_LB",4.1,0,1,1,1,1);
		case 303: ApplyAnimation(playerid,"PED","CAR_LB_pro",4.1,0,1,1,1,1);
		case 40: ApplyAnimation(playerid,"PED","CAR_LB_weak",4.1,0,1,1,1,1);
		case 41: ApplyAnimation(playerid,"PED","CAR_LjackedLHS",4.1,0,1,1,1,1);
		case 42: ApplyAnimation(playerid,"PED","CAR_Lshuffle_RHS",4.1,0,1,1,1,1);
		case 43: ApplyAnimation(playerid,"PED","CAR_Lsit",4.1,0,1,1,1,1);
		case 44: ApplyAnimation(playerid,"PED","CAR_open_LHS",4.1,0,1,1,1,1);
		case 45: ApplyAnimation(playerid,"PED","CAR_open_RHS",4.1,0,1,1,1,1);
		case 46: ApplyAnimation(playerid,"PED","CAR_pulloutL_LHS",4.1,0,1,1,1,1);
		case 47: ApplyAnimation(playerid,"PED","CAR_pulloutL_RHS",4.1,0,1,1,1,1);
		case 48: ApplyAnimation(playerid,"PED","CAR_pullout_LHS",4.1,0,1,1,1,1);
		case 49: ApplyAnimation(playerid,"PED","CAR_pullout_RHS",4.1,0,1,1,1,1);
		case 305: ApplyAnimation(playerid,"PED","CAR_Qjacked",4.1,0,1,1,1,1);
		case 50: ApplyAnimation(playerid,"PED","CAR_rolldoor",4.1,0,1,1,1,1);
		case 51: ApplyAnimation(playerid,"PED","CAR_rolldoorLO",4.1,0,1,1,1,1);
		case 52: ApplyAnimation(playerid,"PED","CAR_rollout_LHS",4.1,0,1,1,1,1);
		case 53: ApplyAnimation(playerid,"PED","CAR_rollout_RHS",4.1,0,1,1,1,1);
		case 54: ApplyAnimation(playerid,"PED","CAR_shuffle_RHS",4.1,0,1,1,1,1);
		case 55: ApplyAnimation(playerid,"PED","CAR_sit",4.1,0,1,1,1,1);
		case 56: ApplyAnimation(playerid,"PED","CAR_sitp",4.1,0,1,1,1,1);
		case 57: ApplyAnimation(playerid,"PED","CAR_sitpLO",4.1,0,1,1,1,1);
		case 58: ApplyAnimation(playerid,"PED","CAR_sit_pro",4.1,0,1,1,1,1);
		case 59: ApplyAnimation(playerid,"PED","CAR_sit_weak",4.1,0,1,1,1,1);
		case 60: ApplyAnimation(playerid,"PED","CAR_tune_radio",4.1,0,1,1,1,1);
		case 61: ApplyAnimation(playerid,"PED","CLIMB_idle",4.1,0,1,1,1,1);
		case 62: ApplyAnimation(playerid,"PED","CLIMB_jump",4.1,0,1,1,1,1);
		case 63: ApplyAnimation(playerid,"PED","CLIMB_jump2fall",4.1,0,1,1,1,1);
		case 64: ApplyAnimation(playerid,"PED","CLIMB_jump_B",4.1,0,1,1,1,1);
		case 65: ApplyAnimation(playerid,"PED","CLIMB_Pull",4.1,0,1,1,1,1);
		case 66: ApplyAnimation(playerid,"PED","CLIMB_Stand",4.1,0,1,1,1,1);
		case 67: ApplyAnimation(playerid,"PED","CLIMB_Stand_finish",4.1,0,1,1,1,1);
		case 68: ApplyAnimation(playerid,"PED","cower",4.1,0,1,1,1,1);
		case 69: ApplyAnimation(playerid,"PED","Crouch_Roll_L",4.1,0,1,1,1,1);
		case 70: ApplyAnimation(playerid,"PED","Crouch_Roll_R",4.1,0,1,1,1,1);
		case 71: ApplyAnimation(playerid,"PED","DAM_armL_frmBK",4.1,0,1,1,1,1);
		case 72: ApplyAnimation(playerid,"PED","DAM_armL_frmFT",4.1,0,1,1,1,1);
		case 73: ApplyAnimation(playerid,"PED","DAM_armL_frmLT",4.1,0,1,1,1,1);
		case 74: ApplyAnimation(playerid,"PED","DAM_armR_frmBK",4.1,0,1,1,1,1);
		case 75: ApplyAnimation(playerid,"PED","DAM_armR_frmFT",4.1,0,1,1,1,1);
		case 76: ApplyAnimation(playerid,"PED","DAM_armR_frmRT",4.1,0,1,1,1,1);
		case 77: ApplyAnimation(playerid,"PED","DAM_LegL_frmBK",4.1,0,1,1,1,1);
		case 78: ApplyAnimation(playerid,"PED","DAM_LegL_frmFT",4.1,0,1,1,1,1);
		case 79: ApplyAnimation(playerid,"PED","DAM_LegL_frmLT",4.1,0,1,1,1,1);
		case 80: ApplyAnimation(playerid,"PED","DAM_LegR_frmBK",4.1,0,1,1,1,1);
		case 81: ApplyAnimation(playerid,"PED","DAM_LegR_frmFT",4.1,0,1,1,1,1);
		case 82: ApplyAnimation(playerid,"PED","DAM_LegR_frmRT",4.1,0,1,1,1,1);
		case 83: ApplyAnimation(playerid,"PED","DAM_stomach_frmBK",4.1,0,1,1,1,1);
		case 84: ApplyAnimation(playerid,"PED","DAM_stomach_frmFT",4.1,0,1,1,1,1);
		case 85: ApplyAnimation(playerid,"PED","DAM_stomach_frmLT",4.1,0,1,1,1,1);
		case 86: ApplyAnimation(playerid,"PED","DAM_stomach_frmRT",4.1,0,1,1,1,1);
		case 87: ApplyAnimation(playerid,"PED","DOOR_LHinge_O",4.1,0,1,1,1,1);
		case 88: ApplyAnimation(playerid,"PED","DOOR_RHinge_O",4.1,0,1,1,1,1);
		case 89: ApplyAnimation(playerid,"PED","DrivebyL_L",4.1,0,1,1,1,1);
		case 90: ApplyAnimation(playerid,"PED","DrivebyL_R",4.1,0,1,1,1,1);
		case 91: ApplyAnimation(playerid,"PED","Driveby_L",4.1,0,1,1,1,1);
		case 92: ApplyAnimation(playerid,"PED","Driveby_R",4.1,0,1,1,1,1);
		case 93: ApplyAnimation(playerid,"PED","DRIVE_BOAT",4.1,0,1,1,1,1);
		case 94: ApplyAnimation(playerid,"PED","DRIVE_BOAT_back",4.1,0,1,1,1,1);
		case 95: ApplyAnimation(playerid,"PED","DRIVE_BOAT_L",4.1,0,1,1,1,1);
		case 96: ApplyAnimation(playerid,"PED","DRIVE_BOAT_R",4.1,0,1,1,1,1);
		case 97: ApplyAnimation(playerid,"PED","Drive_L",4.1,0,1,1,1,1);
		case 98: ApplyAnimation(playerid,"PED","Drive_LO_l",4.1,0,1,1,1,1);
		case 99: ApplyAnimation(playerid,"PED","Drive_LO_R",4.1,0,1,1,1,1);
		case 100: ApplyAnimation(playerid,"PED","Drive_L_pro",4.1,0,1,1,1,1);
		case 101: ApplyAnimation(playerid,"PED","Drive_L_pro_slow",4.1,0,1,1,1,1);
		case 102: ApplyAnimation(playerid,"PED","Drive_L_slow",4.1,0,1,1,1,1);
		case 103: ApplyAnimation(playerid,"PED","Drive_L_weak",4.1,0,1,1,1,1);
		case 105: ApplyAnimation(playerid,"PED","Drive_L_weak_slow",4.1,0,1,1,1,1);
		case 106: ApplyAnimation(playerid,"PED","Drive_R",4.1,0,1,1,1,1);
		case 107: ApplyAnimation(playerid,"PED","Drive_R_pro",4.1,0,1,1,1,1);
		case 108: ApplyAnimation(playerid,"PED","Drive_R_pro_slow",4.1,0,1,1,1,1);
		case 109: ApplyAnimation(playerid,"PED","Drive_R_slow",4.1,0,1,1,1,1);
		case 110: ApplyAnimation(playerid,"PED","Drive_R_weak",4.1,0,1,1,1,1);
		case 111: ApplyAnimation(playerid,"PED","Drive_R_weak_slow",4.1,0,1,1,1,1);
		case 112: ApplyAnimation(playerid,"PED","Drive_truck",4.1,0,1,1,1,1);
		case 113: ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
		case 114: ApplyAnimation(playerid,"PED","DRIVE_truck_L",4.1,0,1,1,1,1);
		case 115: ApplyAnimation(playerid,"PED","DRIVE_truck_R",4.1,0,1,1,1,1);
		case 116: ApplyAnimation(playerid,"PED","Drown",4.1,0,1,1,1,1);
		case 117: ApplyAnimation(playerid,"PED","DUCK_cower",4.1,0,1,1,1,1);
		case 118: ApplyAnimation(playerid,"PED","endchat_01",4.1,0,1,1,1,1);
		case 119: ApplyAnimation(playerid,"PED","endchat_02",4.1,0,1,1,1,1);
		case 120: ApplyAnimation(playerid,"PED","endchat_03",4.1,0,1,1,1,1);
		case 121: ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
		case 123: ApplyAnimation(playerid,"PED","EV_dive",4.1,0,1,1,1,1);
		case 124: ApplyAnimation(playerid,"PED","EV_step",4.1,0,1,1,1,1);
		case 125: ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
		case 127: ApplyAnimation(playerid,"PED","facgum",4.1,0,1,1,1,1);
		case 128: ApplyAnimation(playerid,"PED","facsurp",4.1,0,1,1,1,1);
		case 129: ApplyAnimation(playerid,"PED","facsurpm",4.1,0,1,1,1,1);
		case 130: ApplyAnimation(playerid,"PED","factalk",4.1,0,1,1,1,1);
		case 131: ApplyAnimation(playerid,"PED","facurios",4.1,0,1,1,1,1);
		case 132: ApplyAnimation(playerid,"PED","FALL_back",4.1,0,1,1,1,1);
		case 133: ApplyAnimation(playerid,"PED","FALL_collapse",4.1,0,1,1,1,1);
		case 134: ApplyAnimation(playerid,"PED","FALL_fall",4.1,0,1,1,1,1);
		case 135: ApplyAnimation(playerid,"PED","FALL_front",4.1,0,1,1,1,1);
		case 136: ApplyAnimation(playerid,"PED","FALL_glide",4.1,0,1,1,1,1);
		case 137: ApplyAnimation(playerid,"PED","FALL_land",4.1,0,1,1,1,1);
		case 138: ApplyAnimation(playerid,"PED","FALL_skyDive",4.1,0,1,1,1,1);
		case 139: ApplyAnimation(playerid,"PED","Fight2Idle",4.1,0,1,1,1,1);
		case 140: ApplyAnimation(playerid,"PED","FightA_1",4.1,0,1,1,1,1);
		case 141: ApplyAnimation(playerid,"PED","FightA_2",4.1,0,1,1,1,1);
		case 142: ApplyAnimation(playerid,"PED","FightA_3",4.1,0,1,1,1,1);
		case 143: ApplyAnimation(playerid,"PED","FightA_block",4.1,0,1,1,1,1);
		case 144: ApplyAnimation(playerid,"PED","FightA_G",4.1,0,1,1,1,1);
		case 145: ApplyAnimation(playerid,"PED","FightA_M",4.1,0,1,1,1,1);
		case 146: ApplyAnimation(playerid,"PED","FIGHTIDLE",4.1,0,1,1,1,1);
		case 147: ApplyAnimation(playerid,"PED","FightShB",4.1,0,1,1,1,1);
		case 148: ApplyAnimation(playerid,"PED","FightShF",4.1,0,1,1,1,1);
		case 149: ApplyAnimation(playerid,"PED","FightSh_BWD",4.1,0,1,1,1,1);
		case 150: ApplyAnimation(playerid,"PED","FightSh_FWD",4.1,0,1,1,1,1);
		case 151: ApplyAnimation(playerid,"PED","FightSh_Left",4.1,0,1,1,1,1);
		case 152: ApplyAnimation(playerid,"PED","FightSh_Right",4.1,0,1,1,1,1);
		case 153: ApplyAnimation(playerid,"PED","flee_lkaround_01",4.1,0,1,1,1,1);
		case 154: ApplyAnimation(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1);
		case 155: ApplyAnimation(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,1);
		case 156: ApplyAnimation(playerid,"PED","fucku",4.1,0,1,1,1,1);
		case 157: ApplyAnimation(playerid,"PED","gang_gunstand",4.1,0,1,1,1,1);
		case 158: ApplyAnimation(playerid,"PED","gas_cwr",4.1,0,1,1,1,1);
		case 159: ApplyAnimation(playerid,"PED","getup",4.1,0,1,1,1,1);
		case 160: ApplyAnimation(playerid,"PED","getup_front",4.1,0,1,1,1,1);
		case 161: ApplyAnimation(playerid,"PED","gum_eat",4.1,0,1,1,1,1);
		case 162: ApplyAnimation(playerid,"PED","GunCrouchBwd",4.1,0,1,1,1,1);
		case 163: ApplyAnimation(playerid,"PED","GunCrouchFwd",4.1,0,1,1,1,1);
		case 164: ApplyAnimation(playerid,"PED","GunMove_BWD",4.1,0,1,1,1,1);
		case 165: ApplyAnimation(playerid,"PED","GunMove_FWD",4.1,0,1,1,1,1);
		case 166: ApplyAnimation(playerid,"PED","GunMove_L",4.1,0,1,1,1,1);
		case 167: ApplyAnimation(playerid,"PED","GunMove_R",4.1,0,1,1,1,1);
		case 168: ApplyAnimation(playerid,"PED","Gun_2_IDLE",4.1,0,1,1,1,1);
		case 169: ApplyAnimation(playerid,"PED","GUN_BUTT",4.1,0,1,1,1,1);
		case 170: ApplyAnimation(playerid,"PED","GUN_BUTT_crouch",4.1,0,1,1,1,1);
		case 171: ApplyAnimation(playerid,"PED","Gun_stand",4.1,0,1,1,1,1);
		case 172: ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,1,1);
		case 173: ApplyAnimation(playerid,"PED","handsup",4.1,0,1,1,1,1);
		case 174: ApplyAnimation(playerid,"PED","HitA_1",4.1,0,1,1,1,1);
		case 175: ApplyAnimation(playerid,"PED","HitA_2",4.1,0,1,1,1,1);
		case 176: ApplyAnimation(playerid,"PED","HitA_3",4.1,0,1,1,1,1);
		case 177: ApplyAnimation(playerid,"PED","HIT_back",4.1,0,1,1,1,1);
		case 178: ApplyAnimation(playerid,"PED","HIT_behind",4.1,0,1,1,1,1);
		case 179: ApplyAnimation(playerid,"PED","HIT_front",4.1,0,1,1,1,1);
		case 180: ApplyAnimation(playerid,"PED","HIT_GUN_BUTT",4.1,0,1,1,1,1);
		case 181: ApplyAnimation(playerid,"PED","HIT_L",4.1,0,1,1,1,1);
		case 182: ApplyAnimation(playerid,"PED","HIT_R",4.1,0,1,1,1,1);
		case 183: ApplyAnimation(playerid,"PED","HIT_walk",4.1,0,1,1,1,1);
		case 184: ApplyAnimation(playerid,"PED","HIT_wall",4.1,0,1,1,1,1);
		case 185: ApplyAnimation(playerid,"PED","Idlestance_fat",4.1,0,1,1,1,1);
		case 186: ApplyAnimation(playerid,"PED","idlestance_old",4.1,0,1,1,1,1);
		case 187: ApplyAnimation(playerid,"PED","IDLE_armed",4.1,0,1,1,1,1);
		case 188: ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1);
		case 189: ApplyAnimation(playerid,"PED","IDLE_csaw",4.1,0,1,1,1,1);
		case 190: ApplyAnimation(playerid,"PED","Idle_Gang1",4.1,0,1,1,1,1);
		case 191: ApplyAnimation(playerid,"PED","IDLE_HBHB",4.1,0,1,1,1,1);
		case 192: ApplyAnimation(playerid,"PED","IDLE_ROCKET",4.1,0,1,1,1,1);
		case 193: ApplyAnimation(playerid,"PED","IDLE_stance",4.1,0,1,1,1,1);
		case 194: ApplyAnimation(playerid,"PED","IDLE_taxi",4.1,0,1,1,1,1);
		case 195: ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,1,1);
		case 196: ApplyAnimation(playerid,"PED","Jetpack_Idle",4.1,0,1,1,1,1);
		case 197: ApplyAnimation(playerid,"PED","JOG_femaleA",4.1,0,1,1,1,1);
		case 198: ApplyAnimation(playerid,"PED","JOG_maleA",4.1,0,1,1,1,1);
		case 199: ApplyAnimation(playerid,"PED","JUMP_glide",4.1,0,1,1,1,1);
		case 200: ApplyAnimation(playerid,"PED","JUMP_land",4.1,0,1,1,1,1);
		case 201: ApplyAnimation(playerid,"PED","JUMP_launch",4.1,0,1,1,1,1);
		case 202: ApplyAnimation(playerid,"PED","JUMP_launch_R",4.1,0,1,1,1,1);
		case 203: ApplyAnimation(playerid,"PED","KART_drive",4.1,0,1,1,1,1);
		case 204: ApplyAnimation(playerid,"PED","KART_L",4.1,0,1,1,1,1);
		case 205: ApplyAnimation(playerid,"PED","KART_LB",4.1,0,1,1,1,1);
		case 206: ApplyAnimation(playerid,"PED","KART_R",4.1,0,1,1,1,1);
		case 207: ApplyAnimation(playerid,"PED","KD_left",4.1,0,1,1,1,1);
		case 208: ApplyAnimation(playerid,"PED","KD_right",4.1,0,1,1,1,1);
		case 209: ApplyAnimation(playerid,"PED","KO_shot_face",4.1,0,1,1,1,1);
		case 210: ApplyAnimation(playerid,"PED","KO_shot_front",4.1,0,1,1,1,1);
		case 211: ApplyAnimation(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
		case 212: ApplyAnimation(playerid,"PED","KO_skid_back",4.1,0,1,1,1,1);
		case 213: ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,1);
		case 214: ApplyAnimation(playerid,"PED","KO_spin_L",4.1,0,1,1,1,1);
		case 215: ApplyAnimation(playerid,"PED","KO_spin_R",4.1,0,1,1,1,1);
		case 216: ApplyAnimation(playerid,"PED","pass_Smoke_in_car",4.1,0,1,1,1,1);
		case 217: ApplyAnimation(playerid,"PED","phone_in",4.1,0,1,1,1,1);
		case 218: ApplyAnimation(playerid,"PED","phone_out",4.1,0,1,1,1,1);
		case 219: ApplyAnimation(playerid,"PED","phone_talk",4.1,0,1,1,1,1);
		case 220: ApplyAnimation(playerid,"PED","Player_Sneak",4.1,0,1,1,1,1);
		case 221: ApplyAnimation(playerid,"PED","Player_Sneak_walkstart",4.1,0,1,1,1,1);
		case 222: ApplyAnimation(playerid,"PED","roadcross",4.1,0,1,1,1,1);
		case 223: ApplyAnimation(playerid,"PED","roadcross_female",4.1,0,1,1,1,1);
		case 224: ApplyAnimation(playerid,"PED","roadcross_gang",4.1,0,1,1,1,1);
		case 225: ApplyAnimation(playerid,"PED","roadcross_old",4.1,0,1,1,1,1);
		case 226: ApplyAnimation(playerid,"PED","run_1armed",4.1,0,1,1,1,1);
		case 227: ApplyAnimation(playerid,"PED","run_armed",4.1,0,1,1,1,1);
		case 228: ApplyAnimation(playerid,"PED","run_civi",4.1,0,1,1,1,1);
		case 229: ApplyAnimation(playerid,"PED","run_csaw",4.1,0,1,1,1,1);
		case 230: ApplyAnimation(playerid,"PED","run_fat",4.1,0,1,1,1,1);
		case 240: ApplyAnimation(playerid,"PED","run_fatold",4.1,0,1,1,1,1);
		case 241: ApplyAnimation(playerid,"PED","run_gang1",4.1,0,1,1,1,1);
		case 242: ApplyAnimation(playerid,"PED","run_left",4.1,0,1,1,1,1);
		case 243: ApplyAnimation(playerid,"PED","run_old",4.1,0,1,1,1,1);
		case 244: ApplyAnimation(playerid,"PED","run_player",4.1,0,1,1,1,1);
		case 245: ApplyAnimation(playerid,"PED","run_right",4.1,0,1,1,1,1);
		case 246: ApplyAnimation(playerid,"PED","run_rocket",4.1,0,1,1,1,1);
		case 247: ApplyAnimation(playerid,"PED","Run_stop",4.1,0,1,1,1,1);
		case 248: ApplyAnimation(playerid,"PED","Run_stopR",4.1,0,1,1,1,1);
		case 249: ApplyAnimation(playerid,"PED","Run_Wuzi",4.1,0,1,1,1,1);
		case 250: ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,1,1,1,1);
		case 251: ApplyAnimation(playerid,"PED","SEAT_idle",4.1,0,1,1,1,1);
		case 252: ApplyAnimation(playerid,"PED","SEAT_up",4.1,0,1,1,1,1);
		case 253: ApplyAnimation(playerid,"PED","SHOT_leftP",4.1,0,1,1,1,1);
		case 254: ApplyAnimation(playerid,"PED","SHOT_partial",4.1,0,1,1,1,1);
		case 255: ApplyAnimation(playerid,"PED","SHOT_partial_B",4.1,0,1,1,1,1);
		case 256: ApplyAnimation(playerid,"PED","SHOT_rightP",4.1,0,1,1,1,1);
		case 257: ApplyAnimation(playerid,"PED","Shove_Partial",4.1,0,1,1,1,1);
		case 258: ApplyAnimation(playerid,"PED","Smoke_in_car",4.1,0,1,1,1,1);
		case 259: ApplyAnimation(playerid,"PED","sprint_civi",4.1,0,1,1,1,1);
		case 260: ApplyAnimation(playerid,"PED","sprint_panic",4.1,0,1,1,1,1);
		case 261: ApplyAnimation(playerid,"PED","Sprint_Wuzi",4.1,0,1,1,1,1);
		case 262: ApplyAnimation(playerid,"PED","swat_run",4.1,0,1,1,1,1);
		case 263: ApplyAnimation(playerid,"PED","Swim_Tread",4.1,0,1,1,1,1);
		case 264: ApplyAnimation(playerid,"PED","Tap_hand",4.1,0,1,1,1,1);
		case 265: ApplyAnimation(playerid,"PED","Tap_handP",4.1,0,1,1,1,1);
		case 266: ApplyAnimation(playerid,"PED","turn_180",4.1,0,1,1,1,1);
		case 267: ApplyAnimation(playerid,"PED","Turn_L",4.1,0,1,1,1,1);
		case 268: ApplyAnimation(playerid,"PED","Turn_R",4.1,0,1,1,1,1);
		case 269: ApplyAnimation(playerid,"PED","WALK_armed",4.1,0,1,1,1,1);
		case 270: ApplyAnimation(playerid,"PED","WALK_civi",4.1,0,1,1,1,1);
		case 271: ApplyAnimation(playerid,"PED","WALK_csaw",4.1,0,1,1,1,1);
		case 272: ApplyAnimation(playerid,"PED","Walk_DoorPartial",4.1,0,1,1,1,1);
		case 273: ApplyAnimation(playerid,"PED","WALK_drunk",4.1,0,1,1,1,1);
		case 274: ApplyAnimation(playerid,"PED","WALK_fat",4.1,0,1,1,1,1);
		case 275: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,0,1,1,1,1);
		case 276: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,0,1,1,1,1);
		case 277: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,0,1,1,1,1);
		case 278: ApplyAnimation(playerid,"PED","WALK_old",4.1,0,1,1,1,1);
		case 279: ApplyAnimation(playerid,"PED","WALK_player",4.1,0,1,1,1,1);
		case 280: ApplyAnimation(playerid,"PED","WALK_rocket",4.1,0,1,1,1,1);
		case 281: ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,0,1,1,1,1);
		case 282: ApplyAnimation(playerid,"PED","WALK_start",4.1,0,1,1,1,1);
		case 283: ApplyAnimation(playerid,"PED","WALK_start_armed",4.1,0,1,1,1,1);
		case 284: ApplyAnimation(playerid,"PED","WALK_start_csaw",4.1,0,1,1,1,1);
		case 285: ApplyAnimation(playerid,"PED","WALK_start_rocket",4.1,0,1,1,1,1);
		case 286: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,0,1,1,1,1);
		case 287: ApplyAnimation(playerid,"PED","WEAPON_crouch",4.1,0,1,1,1,1);
		case 288: ApplyAnimation(playerid,"PED","woman_idlestance",4.1,0,1,1,1,1);
		case 289: ApplyAnimation(playerid,"PED","woman_run",4.1,0,1,1,1,1);
		case 290: ApplyAnimation(playerid,"PED","WOMAN_runbusy",4.1,0,1,1,1,1);
		case 291: ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,0,1,1,1,1);
		case 292: ApplyAnimation(playerid,"PED","woman_runpanic",4.1,0,1,1,1,1);
		case 293: ApplyAnimation(playerid,"PED","WOMAN_runsexy",4.1,0,1,1,1,1);
		case 294: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,0,1,1,1,1);
		case 295: ApplyAnimation(playerid,"PED","WOMAN_walkfatold",4.1,0,1,1,1,1);
		case 296: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,0,1,1,1,1);
		case 297: ApplyAnimation(playerid,"PED","WOMAN_walkold",4.1,0,1,1,1,1);
		case 298: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,0,1,1,1,1);
		case 299: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,0,1,1,1,1);
		case 300: ApplyAnimation(playerid,"PED","WOMAN_walkshop",4.1,0,1,1,1,1);
		case 301: ApplyAnimation(playerid,"PED","XPRESSscratch",4.1,0,1,1,1,1);
	}
	return 1;
}

CMD:meropen(playerid, params[]) {
	if(!GateInfo[E_GATE_GOVBARRIER][E_GATE_STATUS] && (IsACop(playerid) || GetFracID(playerid) == 7)) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_GOVBARRIER][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_GOVBARRIER][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_GOVBARRIER][E_GATE_OBJECT], 1544.00305176,-1848.04101562,15.31999969, 3.0);
			SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_GOVBARRIER][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 7 секунд!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:gopen(playerid, params[]) {
	if(!GateInfo[E_GATE_GROVE_1][E_GATE_STATUS] && GetFracID(playerid) == 14) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_GROVE_1][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_GROVE_1][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_GROVE_1][E_GATE_OBJECT],2439.3210449219,-1668.0817871094,14.108180999756, 2.0);
			MoveDynamicObject(GateInfo[E_GATE_GROVE_2][E_GATE_OBJECT],2439.31640625,-1649.9501953125,14.104577064514, 2.0);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_GROVE_1][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:copen(playerid, params[]) {
	if(!GateInfo[E_GATE_CORONOS_1][E_GATE_STATUS] && GetFracID(playerid) == 15) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_CORONOS_1][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_CORONOS_1][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_CORONOS_1][E_GATE_OBJECT],1810.3319091797,-1880.7103271484,14.41153717041, 2.0);
			MoveDynamicObject(GateInfo[E_GATE_CORONOS_2][E_GATE_OBJECT],1810.3541259766,-1898.8791503906,14.405469894409, 2.0);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_CORONOS_1][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:cnnopen(playerid, params[]) {
	if(!GateInfo[E_GATE_CNN][E_GATE_STATUS] && GetFracID(playerid) == 9) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_CNN][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_CNN][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_CNN][E_GATE_OBJECT], 765.56298828,-1329.99401855,13.92199993, 2.0,0.00000000,0.00000000,268.75000000);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_CNN][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:topen(playerid, params[]) {
	if(!GateInfo[E_GATE_TAXI][E_GATE_STATUS] && GetFracID(playerid) == 10) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_TAXI][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_TAXI][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_TAXI][E_GATE_OBJECT], -1771.3575439453, 985.03479003906, 32.24254989624, 2.0);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_TAXI][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:ropen(playerid, params[]) {
	if(!GateInfo[E_GATE_RIFA][E_GATE_STATUS] && GetFracID(playerid) == 17) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_RIFA][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_RIFA][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_RIFA][E_GATE_OBJECT],-2127.4970703125, -80.3525390625, 30.093704223633, 2.0);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_RIFA][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:rmopen(playerid, params[]) {
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /rmopen (1-2)");
	if(params[0] < 1 || params[0] > 2) return Send(playerid, COLOR_GREY, "* Нету таких ворот!");
	if(GetFracID(playerid) == 13) {
		switch(params[0]) {
			case 1 : {
				if(!GateInfo[E_GATE_RM_1][E_GATE_STATUS]) {
					if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_RM_1][E_GATE_OBJECT], true)) {
						GateInfo[E_GATE_RM_1][E_GATE_STATUS] = 1;
						MoveDynamicObject(GateInfo[E_GATE_RM_1][E_GATE_OBJECT],-2655.4502,-226.9722,-2.0665, 2.0);
						SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_RM_1][E_GATE_OBJECT]);
						Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
					} else {
						Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
					}
				}
			}
			
			case 2 : {
				if(!GateInfo[E_GATE_RM_2][E_GATE_STATUS]) {
					if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_RM_2][E_GATE_OBJECT], true)) {
						GateInfo[E_GATE_RM_2][E_GATE_STATUS] = 1;
						MoveDynamicObject(GateInfo[E_GATE_RM_2][E_GATE_OBJECT],-2800.2183,-330.0354,-1.0900, 2.0);
						SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_RM_2][E_GATE_OBJECT]);
						Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
					} else {
						Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
					}
				}
			}
		}
	}
	return 1;
}

CMD:lcnopen(playerid, params[]) {
	if(!GateInfo[E_GATE_LCN][E_GATE_STATUS] && GetFracID(playerid) == 5) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_LCN][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_LCN][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_LCN][E_GATE_OBJECT], 1264.04602051,-2048.85009766,65.87000275, 2.0);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_LCN][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:sfopen(playerid, params[]) {
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /sfopen (1-2)");
	if(params[0] < 1 || params[0] > 2) return Send(playerid, COLOR_GREY, "* Нету таких ворот!");
	if(IsACop(playerid) || GetFracID(playerid) == 7) {
		switch(params[0]) {
			case 1 : {
				if(!GateInfo[E_GATE_FBI_1][E_GATE_STATUS]) {
					if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_FBI_1][E_GATE_OBJECT], true)) {
						GateInfo[E_GATE_FBI_1][E_GATE_STATUS] = 1;
						MoveDynamicObject(GateInfo[E_GATE_FBI_1][E_GATE_OBJECT],-1644.6865234375, 682.3408203125, 1.9969673156738, 2.0);
						SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_FBI_1][E_GATE_OBJECT]);
						Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
					} else {
						Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
					}
				}
			}
			
			case 2 : {
				if(!GateInfo[E_GATE_FBI_2][E_GATE_STATUS]) {
					if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_FBI_2][E_GATE_OBJECT], true)) {
						GateInfo[E_GATE_FBI_2][E_GATE_STATUS] = 1;
						MoveDynamicObject(GateInfo[E_GATE_FBI_2][E_GATE_OBJECT],-1571.8798828125, 661.4853515625, 1.7108917236328, 2.0);
						SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_FBI_2][E_GATE_OBJECT]);
						Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
					} else {
						Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
					}
				}
			}
		}
	}
	return 1;
}

CMD:setname(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_LIGHTRED2, "* Ники не меняем!");
	if(sscanf(params, "us[24]", params[0], params[1])) return Send(playerid, COLOR_GRAD1, "Введите: /setname [playerid] [newname]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD1, "* Этот игрок не залогинен!");
	if(!regex_match_exid(params[1], ValidText)) return Send(playerid, COLOR_GRAD1, "* Недопустимый ник!");
	if(NameChange{params[0]}) return Send(playerid, COLOR_GREY, "* Этому игроку уже изменили ник!");
	if(Pl::Info[params[0]][pAdmin] > Pl::Info[playerid][pAdmin]) return Send(playerid, COLOR_LIGHTRED, "Введите: Вы не можете изминить имя админу который старше вас!");
	format(string, sizeof string, "SELECT * FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Name`='%s'", params[1]);
	if(Db::query(string) && Db::store_result() && Db::num_rows()) return Send(playerid,COLOR_GREY,"* Такое имя уже есть на сервере!");
	SetPVarString(params[0], "NewName", params[1]);
	NameChange{params[0]}=5;
	Send(params[0],COLOR_LIGHTBLUE,"Админ сменил вам ник. В течении пяти секунд изменения вступят в силу");
	Send(playerid,COLOR_LIGHTBLUE,"Вы сменили ник игроку. В течении пяти секунд изменения всупят в силу");
	return 1;
}

CMD:setskin(playerid, params[]) {
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GRAD1, "Используйте: /setskin [ид игрока/часть ника] [ид скина]");
	if(params[1] < 0 || params[1] > 299) return Send(playerid, COLOR_GRAD1, "* Последний скин 299, не больше.");
	Pl::Info[params[0]][pChar] = params[1]; SetPlayerSkin(params[0], Pl::Info[params[0]][pChar]);
	return 1;
}

CMD:pdd(playerid, params[]) {
	return ShowDialog(playerid, D_NONE, 0, "Правила дорожного движения", "help/pdd.hlp", "ENTER", "");
}

CMD:pay(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GRAD1, "Введите: /pay [playerid] [amount]");
	if(params[1] > 1000 && Pl::Info[playerid][pLevel] < 2) return Send(playerid, COLOR_GRAD1, "* Вы должны быть 2 уровнем, чтобы довать больше $1000");
	if(params[1] < 1 || params[1] > 100000) return Send(playerid, COLOR_GRAD1, "* Не ниже 1, и не выше 100000 сразу.");
	if(params[1] > Rac::GetPlayerMoney(playerid)) return  Send(playerid,COLOR_GREY,"* У Вас нет столько денег!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsPlayerInRangeOfPlayer(playerid, 4.0, params[0])) return Send(playerid, COLOR_GREY, "* Вы слишком далеко!");
	if(params[1] > 0 && Rac::GetPlayerMoney(playerid) >= params[1]) {
		getname(playerid -> sendername, params[0] -> playername);
		Rac::GivePlayerMoney(playerid, -params[1]);
		Rac::GivePlayerMoney(params[0], params[1]);
		format(string, sizeof string, "* Вы передали $%i %s (ID: %i)", params[1], playername, params[0]);
		Send(playerid, COLOR_GRAD1, string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlaySound(params[0], 1052, 0.0, 0.0, 0.0);
		format(string, sizeof string, "* Вы получили $%d от %s (игрока: %d).", params[1], sendername, playerid);
		Send(params[0], COLOR_GRAD1, string);
		format(string, sizeof string, "%s заплатил $%d %s", sendername, params[1], playername);
		SendLog("pay", string);
	}
	else Send(playerid, COLOR_GRAD1, "* Недействительное операционное количество.");
	
	return 1;
}

CMD:charity(playerid, params[]) { new string[144], sendername[24];
	if(sscanf(params, "d", params[0])) Send(playerid, COLOR_GRAD1, "* Введите: /charity [amount]");
	if(params[0] < 0) return Send(playerid, COLOR_GRAD1, "* У Вас нет денег!");
	if(Rac::GetPlayerMoney(playerid) < params[0]) return Send(playerid, COLOR_GRAD1, "* У Вас нет такова большого количества денег.");
	Rac::GivePlayerMoney(playerid, -params[0]); GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "* %s спасибо вам за пожертвование, $%d.", sendername, params[0]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	Send(playerid, COLOR_GRAD1, string), SendLog("pay",string);
	return 1;
}

CMD:givepas(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD2, "* Недостачточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /givepas [id/Name] [days 5-60]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD2, "* Этот игрок не залогинен!");
	if(params[1] < 5 || params[1] > 60) return Send(playerid, COLOR_GRAD2, "Введите: /givepasport [id/Name] [days 5-60]");
	
	new currtime = gettime();
	Pl::Info[params[0]][pPasport][0] = 1;
	Pl::Info[params[0]][pPasport][1] = currtime;
	Pl::Info[params[0]][pPasport][2] = ( (params[1] * 86400) + currtime );
	format(string, sizeof string, "* Вам был выдан паспорт. Чтобы посмотреть его введите: /pasport");
	Send(params[0], COLOR_YELLOW, string);
	
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s выдал паспорт игроку %s[%i] на %i дней!", sendername, playername, playerid, params[1]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	
	return 1;
}

CMD:takepas(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD2, "* Недостачточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /takepas [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD2, "* Этот игрок не залогинен!");
	if(!Pl::Info[params[0]][pPasport][0]) return Send(playerid, COLOR_GRAD2, "* У этого инрока нет паспорта!");
	for(new i; i < 3; i++) Pl::Info[params[0]][pPasport][i] = 0;
	
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "* Администратор %s забрал ваш паспорт!", sendername);
	Send(params[0], COLOR_YELLOW, string);
	format(string, sizeof string, "[AdmWarn] * %s забрал паспорт у игрока %s[%i]", sendername, playername, playerid);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:agl(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GRAD2, "* Недостачточно прав!");
	if(sscanf(params, "s[15]u", params[1], params[0])) {
		Send(playerid, COLOR_WHITE, "Введите: /agl [лицензия] [id/Name]");
		Send(playerid, COLOR_WHITE, "* Доступные лицензии: Driving, Pilots, Sailing, Weapon.");
		return 1;
	}
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD2, "* Этот игрок не залогинен!");
	getname(playerid -> sendername, params[0] -> playername);
	
	if(strcmp(params[1], "all", true) == 0) {
		AshQueue(playerid, 1);
		Pl::Info[params[0]][pTest] = 0;
		Pl::Info[params[0]][pCarLic] = 1;
		Pl::Info[params[0]][pFlyLic] = 1;
		Pl::Info[params[0]][pGunLic] = 1;
		Pl::Info[params[0]][pBoatLic] = 1;
		
		format(string, sizeof string, "[AdmWarn] * %s применил команду /agl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], params[1]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s дал вам все лицензии.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	
	} else if(strcmp(params[1], "driving",true) == 0) {
		AshQueue(playerid, 1);
		
		Pl::Info[params[0]][pTest] = 0;
		Pl::Info[params[0]][pCarLic] = 1;
		
		format(string, sizeof string, "[AdmWarn] * %s применил команду /agl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], params[1]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s Дал вам лицензию на вождение.", sendername);
		Send(params[1], COLOR_LIGHTBLUE, string);
	
	} else if(strcmp(params[1],"pilots",true) == 0) {
		Pl::Info[params[0]][pFlyLic] = 1;
		format(string, sizeof string, "[AdmWarn] * %s применил команду /agl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], params[1]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s Дал вам лицензию на управление воздушным транспортом.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	
	} else if(strcmp(params[1],"sailing",true) == 0) {
		Pl::Info[params[1]][pBoatLic] = 1;
		format(string, sizeof string, "[AdmWarn] * %s применил команду /agl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], params[1]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s Дал вам лицензию на управление водным транспортом.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	
	} else if(strcmp(params[1],"weapon",true) == 0) {
		Pl::Info[params[0]][pGunLic] = 1;
		format(string, sizeof string, "[AdmWarn] * %s применил команду /agl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], params[1]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s Дал вам лицензию на оружие.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:atl(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GRAD2, "* Недостачточно прав!");
	if(sscanf(params, "s[15]u", params[1], params[0])) {
		Send(playerid, COLOR_WHITE, "Введите: /atl [лицензия] [playerid]");
		Send(playerid, COLOR_WHITE, "* Доступные лицензии: Driving, Pilots, Sailing, Weapon.");
		return 1;
	}
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD2, "* Этот игрок не залогинен!");
	
	getname(playerid -> sendername, params[0] -> playername);
	
	if(strcmp(params[1], "all", true) == 0) {
		Pl::Info[params[0]][pCarLic] = 0;
		Pl::Info[params[0]][pFlyLic] = 0;
		Pl::Info[params[0]][pGunLic] = 0;
		Pl::Info[params[0]][pBoatLic] = 0;
		format(string, sizeof string, "[AdmWarn] * %s применил команду /atl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], params[1]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s забрал у Вас все лицензии.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	
	} else if(strcmp(params[1], "driving",true) == 0) {
		Pl::Info[params[0]][pCarLic] = 0;
		format(string, sizeof string, "[AdmWarn] * %s применил команду /atl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], params[1]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s забрал у вас лицензию на вождение.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	
	} else if(strcmp(params[1], "pilots",true) == 0) {
		Pl::Info[params[0]][pFlyLic] = 0;
		format(string, sizeof string, "[AdmWarn] * %s применил команду /atl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], params[1]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s забрал у вас лицензию на управление воздушным транспортом.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	
	} else if(strcmp(temp,"sailing",true) == 0) {
		Pl::Info[params[0]][pBoatLic] = 0;
		format(string, sizeof string, "[AdmWarn] * %s применил команду /atl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], temp);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s забрал у вас лицензию на управление водным транспортом.", sendername);
		Send(params[1], COLOR_LIGHTBLUE, string);
	
	} else if(strcmp(temp, "weapon",true) == 0) {
		Pl::Info[params[0]][pGunLic] = 0;
		format(string, sizeof string, "[AdmWarn] * %s применил команду /atl к игроку %s[%s]. Тип: %s",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], temp);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
		format(string, sizeof string, "* Администратор %s забрал у вас лицензию на оружие.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:stats(playerid, params[]) {
	return ShowStats(playerid, playerid, 0);
}

CMD:delivery(playerid, params[]) {
	if(Pl::Info[playerid][pJob] != 10) return Send(playerid,COLOR_GREY,"Вы не дальнобойщик!");
	if(GetPlayerState(playerid) != 2) return Send(playerid,COLOR_GREY,"* Вы не в транспорте!");
	new veh = GetPlayerVehicleID(playerid);
	if(!IsATruckCar(veh)) return Send(playerid,COLOR_GREY,"Вы не в тачке дальнобойщика!");
	if(!IsAnyTrailerAttachedToVehicle(veh)) return Send(playerid,COLOR_GREY,"* У Вас не прицеплен прицеп!");
	if(acceptgruz{playerid} > 0) return Send(playerid,COLOR_GREY,"* Вы уже взяли груз");
	new rnd; do { rnd = random(sizeof(CargoInfo)); } while(!rnd);
	DestroyDynamicPickup(pickupd[playerid][0]); DestroyDynamicMapIcon(pickupd[playerid][1]); acceptgruz{playerid} = rnd;
	pickupd[playerid][0] = CreateDynamicPickup(1239, 14, CargoInfo[rnd][0], CargoInfo[rnd][1], CargoInfo[rnd][2], 0, 0, playerid, 50.0);
	pickupd[playerid][1] = CreateDynamicMapIcon(CargoInfo[rnd][0], CargoInfo[rnd][1], CargoInfo[rnd][2], 51, 0, 0, 0, playerid, 99999.9);
	streamer::SetIntData(4, pickupd[playerid][1], E_STREAMER_STYLE, MAPICON_GLOBAL_CHECKPOINT);
	Send(playerid,COLOR_LIGHTBLUE,"Груз загружен! Отвезите груз на маркер!");
	return 1;
}

CMD:skydive(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(GetPlayerInterior(playerid) > 0) return Send(playerid, COLOR_GREY, "*  Вы не можете прыгать с парашютом в помещении!");
	GetPlayerPos(playerid, posx, posy, posz);
	Rac::SetPlayerPos(playerid, posx, posy, posz+1000);
	Rac::GivePlayerWeapon(playerid, 46, 1);
	return 1;
}

CMD:check(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /check [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::isAdmin(params[0], 5) && !Pl::isAdmin(playerid,5)) return Send(playerid, COLOR_RED, "* Вы не может выполнить это действие!");
	return ShowStats(playerid, params[0], 1);
}

CMD:checkw(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /checkw [id/Name]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_RED, "* Этот игрок не залогинен!");
	new isw, weapon, ammo, wname[24]; dialog[0]='\0';
	for(new i; i < 13; i++) {
		GetPlayerWeaponData(params[0], i, weapon, ammo);
		if(weapon != 0 && ammo != 0) {
			isw ++;
			GetWeaponName(weapon, wname, 24);
			if(Rac::GetPlayerAmmo(params[0], weapon) < ammo && !Rac::IsGreenWeapon(weapon)) {
				format(string, sizeof string, "{ffffff}Оружие[ID: %d]: %s | Патроны: %d  {AA3333}[X]{ffffff}\n", weapon, wname, ammo);
				strcat(dialog, string);
			} else {
				format(string, sizeof string, "{ffffff}Оружие[ID: %d]: %s | Патроны: %d  {33AA33}[X]{ffffff}\n", weapon, wname, ammo);
				strcat(dialog, string);
			}
		}
	}
	format(string, sizeof string, "%s имеет следующие оружие:", GetName(params[0]));
	if(isw > 0) SPD(playerid, D_NONE, 0, string, dialog, "OK", "");
	else SPD(playerid, D_NONE, 0, string, "У этого игрока нет оружия!", "OK", "");

	return 1;
}

CMD:number(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pPhoneBook] != 1) return Send(playerid, COLOR_GREY, "* У Вас нет телефонной книги!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD1, "Введите: /number [playerid]");
	if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GRAD2, "* Этот игрок не подключен!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD2, "* Этот игрок не залогинен!");
	format(string, sizeof string, "Name: %s, Ph: %d", GetName(params[0]), Pl::Info[params[0]][pNumber]);
	Send(playerid, COLOR_GRAD1, string);
	return 1;
}

CMD:buylevel(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pLevel]) {
		if(Rac::GetPlayerMoney(playerid) < costlvl(playerid)) {
			format(string, sizeof string, "* У Вас нет достаточного количества наличных денег ($%d) !", costlvl(playerid));
			Send(playerid, COLOR_GRAD1, string);
		} else if (Pl::Info[playerid][pExp] < exp(playerid)) {
			format(string, sizeof string, "* Нужно %d респектов, У Вас всего [%d] !", exp(playerid), Pl::Info[playerid][pExp]);
			Send(playerid, COLOR_GRAD1, string);
		} else {
			Pl::Info[playerid][pAge] ++; GameTextForPlayer(playerid, string, 5000, 1);
			format(string, sizeof string, "* Вы купили уровень %d за ($%d)", (Pl::Info[playerid][pLevel]+1), costlvl(playerid));
			Send(playerid, COLOR_LIGHTBLUE, string);
			
			format(string, sizeof string, "~g~LEVEL UP~n~~w~You Are Now Level %d", (Pl::Info[playerid][pLevel] + 1));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0); PlayerPlayMusic(playerid);
			Rac::GivePlayerMoney(playerid, -costlvl(playerid)); GiveFracMoney(7, costlvl(playerid));
			Pl::Info[playerid][pLevel]++;

			if(Pl::Info[playerid][pVip] > 0) {
				Pl::Info[playerid][pExp] -= exp(playerid);
				if(Pl::Info[playerid][pExp] <= 0) Pl::Info[playerid][pExp] = 0;
			}
			else Pl::Info[playerid][pExp] = 0;
		}
	}
	return 1;
}

CMD:savetun(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(GetPlayerState(playerid) != 2) return Send(playerid, COLOR_GREY,"* Вы должны сидеть в машине!");
	if(sscanf(params, "s[10]", params[0])) return Send(playerid, COLOR_GREY,"/savetun [name]");
	new vehid = GetPlayerVehicleID(playerid);
	if(strcmp(params[0], "house", true) == 0) {
		for(new i; i < TOTAL_HOUSES; i++) {
			if(HouseInfo[i][hAuto] == vehid) {
				UpdateTuning(HouseInfo[i][hAuto], 1, i);
				return Send ( playerid, COLOR_YELLOW, "* Тюниг домашней машины был сохранен!");
			}
		}
	
	} else if(strcmp(params[0], "veh", true) == 0) {
		for(new i; i < TOTAL_VEHICLES; i++) {
			if(VehicleInfo[i][cID] == vehid) {
				UpdateTuning(VehicleInfo[i][cID], 2, VehicleInfo[i][vID]);
				return Send ( playerid, COLOR_YELLOW, "* Тюниг машины был сохранен!");
			}
		}
	}
	return Send(playerid, COLOR_YELLOW, "* Ошибка, у этой машины нельзя сохранить тюнинг!");
}

CMD:deltun(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(GetPlayerState(playerid) != 2) return Send(playerid, COLOR_GREY,"* Вы должны сидеть в машине!");
	if(sscanf(params, "s[10]", params[0])) return Send(playerid, COLOR_GREY,"/deltun [name]");
	new vehid = GetPlayerVehicleID(playerid);
	if(strcmp(params[0], "house", true) == 0) {
		for(new i; i < TOTAL_HOUSES; i++) {
			if(HouseInfo[i][hAuto] == vehid) {
				ResetTuning(HouseInfo[i][hAuto], 1, i);
				return Send ( playerid, COLOR_YELLOW, "* Тюниг домашней машины был удален!");
			}
		}
	}
	else if(strcmp(params[0], "veh", true) == 0) {
		for(new i; i < TOTAL_VEHICLES; i++) {
			if(VehicleInfo[i][cID] == vehid) {
				ResetTuning(VehicleInfo[i][cID], 2, VehicleInfo[i][vID]);
				return Send ( playerid, COLOR_YELLOW, "* Тюниг машины был удален!");
			}
		}
	}
	return Send(playerid, COLOR_YELLOW, "* Ошибка, у этой машины нельзя удалить тюнинг!");
}

CMD:setpass(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!sscanf(params, "s[24]s[36]", sendername, params[1]) && Pl::isAdmin(playerid, 5)) {
		new hash[50];
		keyProtect(temp, params[1]);
		format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `Key`='%s' WHERE `Name`='%s'", hash, playername);
		if(Db::query(query) && Db::affected_rows()) {
			format(string, sizeof string,"Вы изминили пороль игроку!\n\nИгрок:\t\t%s\nПароль:\t%s", params[1], params[0]);
			SPD(playerid, D_NONE, 0, "CHANGE PSSWORD", string, "OK", "");
		} else {
			SPD(playerid, D_NONE, 0, "CHANGE PSSWORD", "Произошла ощика!\n\
			Игрок %s небыл найден в базе данных!", "OK", "");
		}
	} else {
		SPD(playerid, D_CHANGE_PASS, DIALOG_STYLE_PASSWORD, "[RP]GrandWorld: ATTENTION PLEASE",
		"ВНИМАНИЕ! Для изменения пароля от вашего\n\
		аккаунта НЕОБХОДИМО ВВЕСТИ ТЕКУЩИЙ ПАРОЛЬ!\n\
		Вы будете забанены, если укажите неверный пароль!", "ОК", "ОТМЕНА");
	}
	return 1;
}

CMD:setsex(playerid, params[]) {
	SPD(playerid, 65, DIALOG_STYLE_MSGBOX, "Смена пола", "Выбирите ваш пол.", "ДУВУШКА", "ПАРЕНЬ");
	return 1;
}

CMD:setage(playerid, params[]) {
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid,COLOR_GREY,"* Недостаточно прав!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /setage [id] [возраст]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Pl::Info[params[0]][pAge] = params[1];
	return 1;
}

CMD:ad(playerid, params[]) { new string[144], sendername[24], replacecmdtext[255];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молчанка!");
	if(Pl::Info[playerid][pJailed] != 0) return Send(playerid, COLOR_GREY, "* Вы не можите использовать эту команду в тюрьме!");
	if(Pl::Info[playerid][pLevel] < 2) return Send(playerid, COLOR_GREY, "* Чтобы подать рекламу вам требуется 2 level!");
	if(Pl::Info[playerid][pTime] < 2) return Send(playerid, COLOR_GREY, "* Вы должны отыграть 2 часа на сервере, чтобы использовать эту команду!");
	if(Pl::Info[playerid][pNumber] == 0) return Send(playerid, COLOR_GREY, "* У Вас нет телефона! Купить его можно в 24/7.");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /ad [текст]");
	else if(!adds && !Pl::isAdmin(playerid, 3)) {
		format(string, sizeof string, "Пожалуйста попробуйте еще раз позже %i секунды между Рекламными объявлениями!",  (addtimer/1000));
		Send(playerid, COLOR_GRAD2, string);
	} else {
		new len = strlen(params);
		new payout = len * 25;
		if(Rac::GetPlayerMoney(playerid) < payout) {
			format(string, sizeof string, "* Вы написали %d символов, стоимостью $%d. У Вас нет столько денег.", len, payout);
			Send(playerid, COLOR_LIGHTBLUE, string);
		} else {
			new bidx = GetBizIndex(45);
			GetPlayerName(playerid, sendername, 24);
			Rac::GivePlayerMoney(playerid, -payout);
			BizzInfo[bidx][bTill] += payout;
			regex_replace_exid(params, ADBlock, REPLACE_TEXT, replacecmdtext, sizeof replacecmdtext);
			if(GetFracID(playerid) == 8 && Pl::Info[playerid][pMaskOn]) {
				format(string, sizeof string, "Объявление: %s. Автор: Неизвестно, телефон: Неизвестно.", replacecmdtext);
			} else {
				format(string, sizeof string, "Объявление: %s. Автор: %s, телефон: %i.", replacecmdtext, sendername, Pl::Info[playerid][pNumber]);
			}
			OOCNews(COLOR_GROVE,string);
			SendLog("ad",string);
			format(string, sizeof string, "~r~Paid $%d~n~~w~Message contained: %d Characters", payout, len);
			GameTextForPlayer(playerid, string, 7000, 5);
		}
		if(!Pl::isAdmin(playerid, 3)) {
			adds = false;
			SetTimer("AddsOn", addtimer, false);
		}
	}
	return 1;
}

CMD:gov(playerid, params[]) { new string[144], sendername[24];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молчанка!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /gov [текст]");
	if(Pl::Info[playerid][pLevel] < 2) return Send(playerid, COLOR_GREY, "* Вы должны иметь 3 лвл!");
	new fracid = GetFracID(playerid);
	GetPlayerName(playerid, sendername, 24);
	switch(fracid) {
		case 1..4, 7, 10, 11 : {
			if(Pl::Info[playerid][pRank] >= GetGRank(fracid)) {
				SendToAll(COLOR_WHITE, "|___________ Городские новости ___________|");
				format(string, sizeof string, "*%s %s: %s", RankInfo[fracid][Pl::Info[playerid][pRank]], sendername, params);
				SendToAll(COLOR_DBLUE, string);
				SendLog("gov", string);
			} else {
				format(string, sizeof string, "* Доступно только с %i ранга", GetGRank(fracid));
				Send(playerid, COLOR_GREY, string);
			}
		}
	}
	return 1;
}

CMD:togooc(playerid, params[]) { new string[144];
	gOoc[playerid] = !gOoc[playerid];
	format(string, sizeof string, "* Чат OOC %s!", (gOoc[playerid])?("включен"):("выключен"));
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:tognews(playerid, params[]) { new string[144];
	gNews[playerid] = !gNews[playerid];
	format(string, sizeof string, "* Новости %s!", (gNews[playerid])?("включены"):("выключены"));
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:togfam(playerid, params[]) { new string[144];
	gFam[playerid] = !gFam[playerid];
	format(string, sizeof string, "* Чат семьи %s!", (gFam[playerid])?("включен"):("выключен"));
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:noooc(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	noooc = !noooc;
	format(string, sizeof string, "** OOC чат %s администратором.", (noooc)?("выключен"):("включен"));
	SendToAll(COLOR_GREY, string);
	return 1;
}

CMD:bigears(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	BigEar[playerid] = !BigEar[playerid];
	format(string, sizeof string, "* Ваши уши %s!", (BigEar[playerid])?("выросли"):("стали нормальными"));
	Send(playerid, COLOR_GREY, string);
	return 1;
}

CMD:togphone(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pVip] != 1 && !Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_LIGHTRED2, "* Недостаточно прав!");
	PhoneOnline[playerid] = !PhoneOnline[playerid];
	format(string, sizeof string, "* Ваш телефон %s!", (PhoneOnline[playerid])?("включен"):("выключен"));
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:togtp(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_LIGHTRED2, "* Недостаточно прав!");
	TogTP[playerid] = !TogTP[playerid];
	format(string, sizeof string, "* Вы %s телепортироватся к себе!", (TogTP[playerid])?("разрешили"):("запретили"));
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:toglogins(playerid, params[]) {
	if(!Iter_Contains(ToglogPlayers, playerid)){
		Iter_Add(ToglogPlayers, playerid);
		Send(playerid, COLOR_GREY, "* Сообщения о подключении/отключении игроков включены!");
	} else {
		Iter_Remove(ToglogPlayers, playerid);
		Send(playerid, COLOR_GREY, "* Сообщения о подключении/отключении игроков отключены!");
	}
	return 1;
}

CMD:me(playerid, params[]) { new string[144];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(sscanf(params, "s[90]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /me [текст]");
	format(string, sizeof string, "* %s %s", GetName(playerid), params[0]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:knockdown(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(useknock[playerid] > 0) return Send(playerid,COLOR_GREY,"* Эту команду можно использовать только раз в 30 сек");
	if(Fell[playerid] > 0) return  Send(playerid,COLOR_GREY,"* Вас сбили, и вы не можете сбить с ног");
	if(IsPlayerInAnyVehicle(playerid)) return Send(playerid,COLOR_GREY,"* В транспорте нельзя использовать эту команду");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /knockdown [id/Name]");
	if(playerid == params[0]) return Send(playerid, COLOR_GREY, "* Нельзя сбить с ног самого себя!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid,COLOR_GREY,"Вы слишком далеко!");
	if(IsPlayerInAnyVehicle(params[0])) return Send(playerid,COLOR_GREY,"* Этот игрок в транспорте");
	new rannn = random(100);
	getname(playerid -> sendername, params[0] -> playername);
	if(rannn < 30) {
		format(string, sizeof string, "* %s попытался(ась) сбить с ног %s (неудачно)", Pl::Info[playerid][pMaskOn]?("Неизвесный"):(sendername), playername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(rannn >= 30) {
		format(string, sizeof string, "* %s попытался(ась) сбить с ног %s (удачно)", Pl::Info[playerid][pMaskOn]?("Неизвесный"):(sendername), playername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Rac::TogglePlayerControllable(params[0], 0);
		ApplyAnimation(params[0],"PED","BIKE_fall_off",4.1,0,1,1,1,1);
		ApplyAnimation(playerid,"PED","GUN_BUTT_crouch",4.1,0,1,1,1,1);
		TurnPlayerFaceToPlayer(params[0], playerid);
		TurnPlayerFaceToPlayer(playerid, params[0]);
		Rac::GivePlayerHealth(params[0], -5.0);
		Fell[params[0]] = 5;
	}
	useknock[playerid] = 30;
	return 1;
}

CMD:do(playerid, params[]) { new string[144];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(sscanf(params, "s[90]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /do [текст]");
	format(string, sizeof string, "* %s (( %s ))", params[0], GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:try(playerid, params[]) { new string[144], sendername[24];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /try [текст]");
	new rannn = random_ex(100);
	GetPlayerName(playerid, sendername, 24);
	if(rannn < 25) {
		format(string, sizeof string, "* %s попытался %s (неудачно)", sendername, params);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(rannn >= 25)
	{
		format(string, sizeof string, "* %s попытался %s (удачно)", sendername, params);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:b(playerid, params[]) { new string[144], sendername[24];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /b [текст]");
	if(Pl::Info[playerid][pMaskOn]) {
		format(string, sizeof string, "Неизвесный сказал: (( %s ))", params);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	} else {
		GetPlayerName(playerid, sendername, 24);
		format(string, sizeof string, "%s сказал: (( %s ))", sendername, params);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	return 1;
}

CMD:close(playerid, params[]) { new string[144], sendername[24], replacecmdtext[255];                                                   
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /c [текст]");
	GetPlayerName(playerid, sendername, 24);
	regex_replace_exid(params, ADBlock, REPLACE_TEXT, replacecmdtext, sizeof replacecmdtext);
	format(string, sizeof string, "%s сказал: %s", sendername, replacecmdtext);
	if(!IsPlayerInAnyVehicle(playerid)) {
		AnimClear[playerid] = 4;
		ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1);
	}
	ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	return 1;
}

CMD:shout(playerid, params[]) { new string[144], sendername[24], replacecmdtext[255];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /s [текст]");
	regex_replace_exid(params, ADBlock, REPLACE_TEXT, replacecmdtext, sizeof replacecmdtext);
	if(!Pl::Info[playerid][pMaskOn]) {
		GetPlayerName(playerid, sendername, 24);
		format(string, sizeof string, "%s крикнул: %s!", sendername, replacecmdtext);
		ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		SetPlayerChatBubble(playerid, replacecmdtext, COLOR_GREEN, 50.0, 10000);
		if(!IsPlayerInAnyVehicle(playerid)) {
			AnimClear[playerid] = 4;
			ApplyAnimation(playerid,"ON_LOOKERS", "shout_01", 4.1, 1, 1, 1, 1, 1, 1);
		}
	} else {
		format(string, sizeof string, "Неизвестный крикнул: %s!", replacecmdtext);
		ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		SetPlayerChatBubble(playerid, replacecmdtext, COLOR_GREEN, 50.0, 10000);
		if(!IsPlayerInAnyVehicle(playerid)) {
			AnimClear[playerid] = 4;
			ApplyAnimation(playerid,"ON_LOOKERS", "shout_01", 4.1, 1, 1, 1, 1, 1, 1);
		}
	}
	return 1;
}

CMD:o(playerid, params[]) { new string[144], sendername[24], replacecmdtext[255];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молчанка!");
	if(Pl::Info[playerid][pTime] < 2) return Send(playerid, COLOR_GREY, "* Вы должны отыграть 2 часа на сервере, чтобы использовать эту команду!");
	if((noooc) && !Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GRAD2, " OOC чат выключен.");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GRAD2, "Используйте: (/o)oc [ooc chat]");
	GetPlayerName(playerid, sendername, 24);
	regex_replace_exid(params, ADBlock, REPLACE_TEXT, replacecmdtext, sizeof replacecmdtext);
	format(string, sizeof string, "(( %s[ID: %d]: %s ))", sendername, playerid, replacecmdtext);
	OOCOff(COLOR_OOC,string);
	printf("%s", string);
	return 1;
}

CMD:m(playerid, params[]) { new string[144], sendername[24], replacecmdtext[255];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(Pl::Info[playerid][pTime] < 2) return Send(playerid, COLOR_GREY, "* Вы должны отыграть 2 часа на сервере, чтобы использовать эту команду!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /m [текст]");
	if(!IsPlayerInAnyVehicle(playerid)) return Send(playerid, COLOR_GREY, " вы должны находится в транспортном средстве");
	new fracid = GetFracID(playerid);
	if(!IsACop(playerid) && fracid != 4) return Send(playerid, COLOR_GREY, "* Вы не законник!");
	if(!Fc::GetInfo(GetPlayerVehicleID(playerid))) return Send(playerid, COLOR_GREY, "* Вы не в служебной машине!");
	switch(fracid) {
		case 1: strunpack(temp, !"SAPD");
		case 2: strunpack(temp, !"FBI");
		case 3: strunpack(temp, !"NGSA");
		case 4: strunpack(temp, !"SFMC");
	}
	GetPlayerName(playerid, sendername, 24);
	regex_replace_exid(params, ADBlock, REPLACE_TEXT, replacecmdtext, sizeof replacecmdtext);
	format(string, sizeof string, "[ %s %s %s:o< %s ]", temp, RankInfo[ fracid ][ Pl::Info[playerid][pRank] ], sendername, replacecmdtext);
	ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	return 1;
}

CMD:r(playerid, params[]) { new string[144], sendername[24], replacecmdtext[255];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /r [текст]");
	if(!IsATeam(playerid)) return Send(playerid, COLOR_GREY, "* Вы не член команды!");
	new fracid = GetFracID(playerid);
	GetPlayerName(playerid, sendername, 24);
	regex_replace_exid(params, ADBlock, REPLACE_TEXT, replacecmdtext, sizeof replacecmdtext);
	format(string, sizeof string, "[R] %s %s: %s. **", RankInfo[ fracid ][ Pl::Info[playerid][pRank] ], sendername, replacecmdtext);
	sendToFamily(fracid, COLOR_RADIO, string);
	return 1;
}

CMD:duty(playerid, params[]) { new string[144];
	if(GetFracID(playerid) == 1) {
		if(IsPlayerInRangeOfPoint(playerid,3,255.3,77.4,1003.6) || IsPlayerInRangeOfPoint(playerid,3,-1616.1294,681.1594,7.1875) || Pl::Info[playerid][pLocal] != 0) {
			if(!OnDuty[playerid]) {
				OnDuty[playerid] = true;
				Rac::GivePlayerWeapon(playerid, 3, 200);
				Rac::GivePlayerWeapon(playerid, 24, 70);
				format(string, sizeof string, "* Офицер %s взял значок и оружие из своего шкафчика.", GetName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			} else {
				OnDuty[playerid] = false;
				Rac::ResetPlayerWeapons(playerid);
				format(string, sizeof string, "* Офицер %s ложит свой значок и оружие в свой шкафчик.", GetName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else return Send(playerid, COLOR_LIGHTRED2, "* Вы не в раздевалке!");
	
	} else if(GetFracID(playerid) == 4) {
		switch(OnDuty[playerid]) {
			case 0: {
				Medics ++;
				OnDuty[playerid] = true;
				Send(playerid, COLOR_LIGHTBLUE, "* Вы заступили на работу!");
			}
			case 1: {
				Medics --;
				OnDuty[playerid] = false;
				Send(playerid, COLOR_LIGHTBLUE, "* Вы теперь не на дежурстве!");
			}
		}
	}
	
	if(Pl::Info[playerid][pJob] == 6) {
		switch(OnDuty[playerid]) {
			case 0: {
				Mechanics ++;
				OnDuty[playerid] = true;
				Send(playerid, COLOR_LIGHTBLUE, "* Вы заступили на дежурство!");
			}
			case 1: {
				Mechanics --;
				OnDuty[playerid] = false;
				Send(playerid, COLOR_LIGHTBLUE, "* Вы теперь не на дежурстве!");
			}
		}
	}
	return 1;
}

CMD:ao(playerid, params[]) { new string[144], sendername[24];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(!Pl::isAdmin(playerid, 4)) return Send(playerid, COLOR_GRAD2, "* OOC канал отключен админом!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /ao [текст]");
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "[ADMIN] %s: %s " , sendername, params);
	OOCOff(COLOR_LIGHTGREEN,string);
	return 1;
}

CMD:ot(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid,COLOR_GREY,"* Недостаточно прав!");
	if(sscanf(params, "us[90]", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /ot [id] [ответ]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "*Ответ от %s: %s", sendername, params[1]);
	Send(params[0], COLOR_YELLOW, string);
	format(string, sizeof string, "*Ответ от %s > %s[%i]: %s", sendername, playername, params[0], params[1]);
	SendToAdmin(COLOR_LIGHTBLUE, string, 1, 2);
	return 1;
}

CMD:aduty(playerid, params[]) { new string[144], sendername[24];
	if(!Pl::Info[playerid][pAdmin]) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	AdminDuty[playerid] = !AdminDuty[playerid];
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "(( [A] Админ %s %s ))", sendername, (AdminDuty[playerid])?("заступил на дежурство! (/report)"):("ушел с дежурства."));
	SendToAll(COLOR_OOC,string);
	return 1;
}

CMD:spawncars(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 4)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	// SPD(playerid, D_SPCARS, "[RP]GrandWorld: SPAWNCARS", "")
	format(string, sizeof string, "* Администратор %s[%i] зареспавнил все автомобили.", GetName(playerid), playerid);
	RespawnUnoccupiedVehicles();
	SendToAll(COLOR_LIGHTRED, string);
	return 1;
}

CMD:restart(playerid, params[]) {
	if(Pl::Info[playerid][pAdmin] != 5 && !IsPlayerAdmin(playerid)) return 1;
	SendToAll(COLOR_LIGHTRED2,"* Администратор перезагрузил сервер!");
	GameModeInitExitFunc(0); return 1;
}

CMD:autorestart(playerid, params[]) {
	if(Pl::Info[playerid][pAdmin] != 5 && !IsPlayerAdmin(playerid)) return 1;
	SendToAll(COLOR_LIGHTRED2,"* Администратор перезагрузил сервер!");
	GameModeInitExitFunc(1); return 1;
}

CMD:saveall(playerid, params[]) {
	if(Pl::Info[playerid][pAdmin] != 5 && !IsPlayerAdmin(playerid)) return 1;
	SaveAcc(); Send(playerid, COLOR_LIGHTBLUE, "* Все аккаунты сохранены!");
	return 1;
}

CMD:updateprop(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pAdmin] != 5 && !IsPlayerAdmin(playerid)) return 1;
	new time=GetTickCount();
	UpdateProp();
	format(string, sizeof string, "* Property updated %i (ms)", GetTickCount()-time);
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1 ;
}

CMD:d(playerid, params[]) { new string[144], sendername[24], replacecmdtext[255];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /d [текст]");
	if(Pl::Info[playerid][pTime] < 1) return Send(playerid, COLOR_GREY, "* Вы должны отыграть 3 часа на сервере, чтобы использовать эту команду!!");
	if(!IsATeam(playerid)) return Send(playerid, COLOR_GREY, "* Вы не член команды!");
	
	new fracid = GetFracID(playerid);
	switch(fracid) {
		case 1: format(temp, sizeof(temp), "[SAPD]");
		case 2: format(temp, sizeof(temp), "[FBI]");
		case 3: format(temp, sizeof(temp), "[NGSA]");
		case 4: format(temp, sizeof(temp), "[SFMC]");
		case 7: format(temp, sizeof(temp), "[GOV]");
	}
	GetPlayerName(playerid, sendername, 24);
	regex_replace_exid(params, ADBlock, REPLACE_TEXT, replacecmdtext, sizeof replacecmdtext);
	format(string, sizeof string, "%s %s %s: %s. **", temp, RankInfo[ fracid ][ Pl::Info[playerid][pRank] ], sendername, replacecmdtext);
	sendToTeam(COLOR_ALLDEPT, string, Teams);
	return 1;
}

CMD:su(playerid, params[]) { new string[144];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не законник.");
	if(sscanf(params, "uis[64]", params[0], params[1], params[2])) return Send(playerid, COLOR_GRAD2, "Введите: /su [id/Name] [кол-во звезд] [преступление]");
	if(!OnDuty[playerid] && GetFracID(playerid) == 1) return Send(playerid, COLOR_GREY, "* Вы не при исполнении служебных обязанностей!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(IsACop(params[0])) return Send(playerid, COLOR_GREY, "* Вы не можете подозревать Полицейского!");
	if(params[1] > 6) return Send(playerid,COLOR_GREY,"* Больше 6 звезд кидать нельзя!");
	if(Pl::Info[params[0]][pWantedL] == 0) {
		WantedTime[params[0]] = 180;
		SetPlayerWL(params[0], Pl::Info[params[0]][pWantedL]+params[1]);
		SetPlayerCriminal(params[0], playerid, params[2]);
		format(string,sizeof string,"* Теперь у этого игрока %i уровень розыска.", Pl::Info[params[0]][pWantedL]);
		Send(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}
CMD:mdc(playerid, params[]) { new string[144], playername[24];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не законник.");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /mdc [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!OnDuty[playerid] && GetFracID(playerid) == 1) return Send(playerid, COLOR_GREY, "* Вы не при исполнении служебных обязанностей!");
	if(Pl::Info[params[0]][pWantedL] == 0) return Send(playerid, COLOR_GREY, "* Игрок нет в базе данных!");
	new veh = GetPlayerVehicleID(playerid);
	if(IsACopCar(veh) || IsPlayerInRangeOfPoint(playerid, 5.0, 253.9280,69.6094,1003.6406)) {
		GetPlayerName(params[0], playername, 24);
		Send(playerid, COLOR_BLUE, "______-=МОБИЛЬНЫЙ КОМПЬЮТЕР ДАННЫХ=-______");
		format(string, sizeof string, "* Имя: %s", playername);
		Send(playerid, COLOR_WHITE, string);
		format(string, sizeof string, "* Преступление: %s", Pl::Crime[params[0]][pAccusing]);
		Send(playerid, COLOR_GRAD2, string);
		format(string, sizeof string, "* Потерпевший: %s", Pl::Crime[params[0]][pVictim]);
		Send(playerid, COLOR_GRAD3, string);
		format(string, sizeof string, "* Сообщаемый: %s", Pl::Crime[params[0]][pAccused]);
		Send(playerid, COLOR_GRAD4, string);
		Send(playerid, COLOR_BLUE, "__________________________________________");
	} else {
		Send(playerid, COLOR_GREY, "* Вы не находитесь в Полицейском Транспортном средстве или в Полицейском управлении.");
	}
	return 1;
}

CMD:open(playerid, params[]) {
	if(Pl::Info[playerid][pBizKey] != 255)  {
		for(new i; i < TOTAL_BIZZ; i++){
			if(IsPlayerInRangeOfPoint(playerid, 3.0, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ]) || IsPlayerInBiz(playerid, i)) {
				if(Pl::Info[playerid][pBizKey] == BizzInfo[i][bID] || Pl::isAdmin(playerid, 4)) {
					switch(BizzInfo[i][bLocked]) {
						case 0: {
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Bussiness ~r~Closed", 5000, 4);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						}
						case 1: {
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Bussiness ~g~Open", 5000, 4);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						}
					}
				}
				else GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 4);
				return 1;
			}
		}
	}
	
	if(Pl::Info[playerid][pHouseKey] != 999) {
		for(new i = FIRST_HOUSE; i < TOTAL_HOUSES; i++) {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEnterx], HouseInfo[i][hEntery], HouseInfo[i][hEnterz]) || IsPlayerInHouse(playerid, i, 2.0)) {
				if(Pl::Info[playerid][pHouseKey] == i || Pl::isAdmin(playerid, 4)) {
					switch(HouseInfo[i][hLock]) {
						case 0: {
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 4);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						}
						
						case 1: {
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 4);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						}
					}
				}
				else GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 4);
				return 1;
			}
		}
	}
	return 1;
}

CMD:pm(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молячанка!");
	if(Pl::Info[playerid][pLevel] < 2) return Send(playerid, COLOR_GREY, "* Чтобы писать ЛС вам требуется 2 level!");
	if(sscanf(params, "us[90]", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /w [id/Name] [ответ]");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Нельзя отправить сообщение себе!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(HidePM[params[0]]) return Send(playerid, COLOR_RED, "* Пэйджер отключен!");
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "PM от %s(ID:%i): %s", sendername, playerid, params[1]);
	Send(params[0], COLOR_YELLOW, string);
	format(string, sizeof string, "PM к %s(ID:%i): %s", playername, params[0], params[1]);
	Send(playerid, COLOR_YELLOW, string);
	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	PlayerPlaySound(params[0], 1084, 0.0, 0.0, 0.0);
	printf("[PM] от %s к %s: %s", sendername, playername, params[1]);
	return 1;
}

CMD:bar(playerid, params[]) {
	if(!IsAtBar(playerid)) return Send(playerid, COLOR_GREY, "* Вы не в баре!");
	if(Pl::Drunk[playerid] > 10) return Send(playerid, COLOR_GREY, "* Бармен отказывается вам наливать!");
	Rac::TogglePlayerControllable(playerid,0); ShowMenuForPlayer(BarMenu, playerid);
	return 1;
}

CMD:rentroom(playerid, params[]) {
	new house = Pl::Info[playerid][pHouseKey];
	if(!Pl::Info[playerid][pPasport][0]) return Send(playerid, COLOR_GREY, "* У Вас нет паспорта!");
	if(IsValidHouse(house) && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0) {
		Send(playerid, COLOR_WHITE, "* У Вас уже есть дом. Сначало продайте его: /sellhouse - введите для продажи!");
	} else {
		for(new h = FIRST_HOUSE; h < TOTAL_HOUSES; h++) {
			if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hEnterx], HouseInfo[h][hEntery], HouseInfo[h][hEnterz])) {
				if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hRent] == 1) {
					if(Rac::GetPlayerMoney(playerid) < HouseInfo[h][hRentPrice]) return SendClientMessage(playerid, COLOR_WHITE, "* У Вас не хватает денег!");
					Pl::Info[playerid][pHouseKey] = h;
					Rac::GivePlayerMoney(playerid,-HouseInfo[h][hRentPrice]);
					HouseInfo[h][hSafe] += HouseInfo[h][hRent];
					Pl::Info[playerid][pLocal] = h;
					Rac::SetPlayerInterior(playerid,HouseInfo[h][hInt]);
					Rac::SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
					Rac::SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtual]);
					GameTextForPlayer(playerid, "~g~] ~w~Welcome Home ~g~] ~w~~n~You can exit at any time by moving to this door and typing ~g~/exit", 10000, 3);
					Send(playerid, COLOR_WHITE, "* Пишите /help там появились новые команды!");
					PlayerPlayMusic(playerid);
					updatePlayerData(playerid);
					Pl::setSpawnInfo(playerid);
					
					return 1;
				}
			}
		}
	}
	return 1;
}

CMD:unrent(playerid, params[]) {
	new hidx = Pl::Info[playerid][pHouseKey];
	if(!IsValidHouse(hidx)) return Send(playerid, COLOR_GREY, "* Вы не арендуете дом!");
	if(strcmp(GetName(playerid), HouseInfo[hidx][hOwner], true) == 0) return Send(playerid, COLOR_WHITE, " Вам принадлежит этот дом!");
	Pl::Info[playerid][pLocal] = 0;
	Pl::Info[playerid][pHouseKey] = 999;
	if(Pl::Info[playerid][pLocal] == hidx) {
		Rac::SetPlayerInterior(playerid,0);
		Rac::SetPlayerVirtualWorld(playerid,0);
		Rac::SetPlayerPos(playerid,HouseInfo[hidx][hEnterx],HouseInfo[hidx][hEntery],HouseInfo[hidx][hEnterz]);
	}
	Pl::setSpawnInfo(playerid);
	Send(playerid, COLOR_WHITE, "* Теперь вы Бомж!");
	return 1;
}

CMD:buyhouse(playerid, params[]) { new string[144], sendername[24];
	if(!Pl::Info[playerid][pPasport][0]) return Send(playerid, COLOR_GREY, "* У Вас нет паспорта!");
	new phouse = Pl::Info[playerid][pHouseKey];
	GetPlayerName(playerid, sendername, 24);
	if(IsValidHouse(phouse) && strcmp(sendername, HouseInfo[phouse][hOwner], true) == 0) {
		Send(playerid, COLOR_GREY, "* У Вас уже есть Дом. Сначало продайте его: /sellhouse - ввидите для продажи!");
	} else {
		for(new h = 1; h < sizeof(HouseInfo); h++) {
			if(!HouseInfo[h][hOwned] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hEnterx], HouseInfo[h][hEntery], HouseInfo[h][hEnterz])) {
				if(HouseInfo[h][hPrice] > Rac::GetPlayerMoney(playerid)) {
					Send(playerid, COLOR_LIGHTRED, "* У Вас нет столько денег!");
				} else {
					if(Pl::Info[playerid][pLevel] < HouseInfo[h][hLevel]) {
						format(string, sizeof string, "* Вам нужно проживать {0080FF}%d {ffffff}лет в штате что-бы купить этот дом!", HouseInfo[h][hLevel]);
						Send(playerid, COLOR_WHITE, string);
					} else {
						new bidx = GetBizIndex(48);
						HouseInfo[h][hOwned] = 1;
						Pl::Info[playerid][pHouseKey] = h;
						strmid(HouseInfo[h][hOwner], sendername, 0, 24, 24);
						DestroyDynamicPickup(HouseInfo[h][hPickup]);
						DestroyDynamicMapIcon(HouseInfo[h][hMapIcon]);
						HouseInfo[h][hMapIcon] = CreateDynamicMapIcon(HouseInfo[h][hEnterx],HouseInfo[h][hEntery],HouseInfo[h][hEnterz],32,0,-1,-1,-1, 200.0);
						HouseInfo[h][hPickup] = AddPickup(1318, 23, HouseInfo[h][hEnterx], HouseInfo[h][hEntery], HouseInfo[h][hEnterz]);
						Rac::GivePlayerMoney(playerid,-HouseInfo[h][hPrice]);
						Rac::SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						Rac::SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~g~] ~w~Welcome Home ~g~]~w~~n~You can exit at any time by moving to this door and typing ~g~/exit", 10000, 3);
						Send(playerid, COLOR_LIGHTBLUE, "* Возможности домовладельца можно посмотреть в /help!");
						Pl::Info[playerid][pLocal] = h;
						Rac::SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
						DateProp(playerid, 0);
						updatePlayerData(playerid);
						Pl::setSpawnInfo(playerid);
						PlayerPlayMusic(playerid);
						BizzInfo[bidx][bTill] += percent(HouseInfo[h][hPrice], 10);
					}
				}
				
				return 1;
			}
		}
	}
	return 1;
}

CMD:sellhouse(playerid, params[]) { new string[144], sendername[24];
	new house = Pl::Info[playerid][pHouseKey];
	GetPlayerName(playerid, sendername, 24);
	if(!IsValidHouse(house)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
	if(strcmp(sendername, HouseInfo[house][hOwner], true) == 0) {
		if(HouseInfo[house][hPrice] != 0) {
			new proc = percent(HouseInfo[house][hPrice], 5);
			new sellprice = HouseInfo[house][hPrice] - proc;
			BizzInfo[GetBizIndex(48)][bTill] += proc;
			Rac::GivePlayerMoney(playerid, sellprice);
			format(string, sizeof string, "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", sellprice);
			GameTextForPlayer(playerid, string, 10000, 3);
			format(string, sizeof string, "[Debug] %s продал дом. Price: $%i; SellPrice: $%i; Safe: $%i",
			sendername, HouseInfo[house][hPrice], sellprice, HouseInfo[house][hSafe]);
			SendLog("houses", string);
		}
		Pl::Info[playerid][pHouseKey] = 999;
		if(Pl::Info[playerid][pLocal] == house) {
			Rac::SetPlayerInterior(playerid,0);
			Rac::SetPlayerVirtualWorld(playerid,0); Pl::Info[playerid][pLocal] = 0;
			Rac::SetPlayerPos(playerid,HouseInfo[house][hEnterx],HouseInfo[house][hEntery],HouseInfo[house][hEnterz]);
		}
		ClearHouse(house);
		UpdateHouse(house);
		updatePlayerData(playerid);
		ResetTuning(HouseInfo[house][hAuto], 1, house);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	} else {
		Send(playerid, COLOR_WHITE, "* Вы не владелец дома!");
	}
	return 1;
}

CMD:buybiz(playerid, params[]) { new string[144], sendername[24];
	if(!Pl::Info[playerid][pPasport][0]) return Send(playerid, COLOR_GREY, "* У Вас нет паспорта!");
	new pbiz = GetBizIndex(Pl::Info[playerid][pBizKey]);
	GetPlayerName(playerid, sendername, 24);
	if(IsValidBiz(pbiz) && strcmp(sendername, BizzInfo[pbiz][bOwner], true) == 0) {
		Send(playerid, COLOR_GREY, "* У вас уже есть Бизнес. Сначало продайте его: /sellbiz - ввидите для продажи!");
	} else {
		for(new b; b < TOTAL_BIZZ; b++) {
			if(!BizzInfo[b][bOwned] && IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[b][bEnterX], BizzInfo[b][bEnterY], BizzInfo[b][bEnterZ])) {
				if(Pl::Info[playerid][pLevel] < BizzInfo[b][bLevelNeeded]) {
					format(string, sizeof string, "* Вы должны быть уровнем %d, чтобы купить это!",BizzInfo[b][bLevelNeeded]);
					Send(playerid, COLOR_GRAD5, string);
				} else {
					if(Rac::GetPlayerMoney(playerid) >= BizzInfo[b][bBuyPrice]) {
						BizzInfo[b][bOwned] = 1;
						Pl::Info[playerid][pBizKey] = BizzInfo[b][bID];
						strmid(BizzInfo[b][bOwner], sendername, 0, 24, 24);
						Rac::GivePlayerMoney(playerid,-BizzInfo[b][bBuyPrice]);
						PlayerPlayMusic(playerid);
						if(BizzInfo[b][bType] == 1) {
							Send(playerid, COLOR_LIGHTBLUE, "* Поздравляю вас с покупкой");
							Send(playerid, COLOR_LIGHTBLUE, "* Пишите /help чтобы рассмотреть новую деловую секцию помощи.");
						} else {
							Pl::Info[playerid][pLocal] = (b*99);
							Rac::SetPlayerVirtualWorld(playerid,BizzInfo[b][bVirtual]);
							Rac::SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
							Rac::SetPlayerPos(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
							GameTextForPlayer(playerid, "~w~Welcome~n~You can exit at any time by moving to this door and typing /exit", 5000, 3);
							Send(playerid, COLOR_LIGHTBLUE, "* Поздравляю вас с покупкой");
							Send(playerid, COLOR_LIGHTBLUE, "* Пишите /help чтобы рассмотреть новую деловую секцию помощи.");
						}
						RefreshBizz(b);
						updatePlayerData(playerid);
						Gz::ShowForAll(BizzInfo[b][bZone], GetFracColor(BizzInfo[b][bFrac]));
					} else {
						Send(playerid, COLOR_WHITE, "* У Вас нет наличных денег для этого!");
					}
				}
				return 1;
			}
		}
	}
	return 1;
}

CMD:sellbiz(playerid, params[]) { new string[144], sendername[24];
	new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
	GetPlayerName(playerid, sendername, 24);
	if(!IsValidBiz(bidx)) return Send(playerid, COLOR_GREY, "* У Вас нет бизнеса!");
	if(BizzInfo[bidx][bOnBattle]) return Send(playerid, COLOR_GREY, "* Сейчас нельзя продать бизнес!");
	if(strcmp(sendername, BizzInfo[bidx][bOwner], true) == 0) {
		BizzInfo[bidx][bLocked] = 1;
		BizzInfo[bidx][bOwned] = 0;
		BizzInfo[bidx][bTill] = 0;
		Pl::Info[playerid][pBizKey] = 999;
		strmid(BizzInfo[bidx][bOwner], "The State", 0, strlen("The State"), 255);
		strmid(BizzInfo[bidx][bExtortion], "No-one", 0, strlen("No-one"), 255);
		new sellprice = BizzInfo[bidx][bBuyPrice] - percent(BizzInfo[bidx][bBuyPrice], 5);
		if(sellprice < 0) sellprice = 0;
		Rac::GivePlayerMoney(playerid, sellprice);
		format(string, sizeof string, "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", sellprice);
		GameTextForPlayer(playerid, string, 10000, 3);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		RefreshBizz(bidx);
		UpdateBizz(bidx);
		updatePlayerData(playerid);
	} else {
		Send(playerid, COLOR_GREY, "* Вам не принадлежит бизнес.");
	}
	return 1;
}

CMD:asellbiz(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return 1;
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GRAD1, "Введите: /asellbiz [bizid]");
	new bidx = GetBizIndex(params[0]);
	if(BizzInfo[bidx][bOnBattle]) return Send(playerid, COLOR_GREY, "* Сейчас нельзя продать бизнес!");
	if(BizzInfo[bidx][bOwned] != 0) {
		params[1] = ReturnUser(BizzInfo[bidx][bOwner]);
		if(Pl::isLogged(params[1])) { Pl::Info[params[1]][pBizKey] = 255; Send(params[1], COLOR_LIGHTRED, "* Ваш бизнес был продан!"); }
		else { format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `busines` = '255' WHERE `Name` = '%s'", BizzInfo[bidx][bOwner]); Db::query(query); }
	}

	BizzInfo[bidx][bLocked] = 1;
	BizzInfo[bidx][bOwned] = 0;
	BizzInfo[bidx][bTill] = 0;

	strmid(BizzInfo[bidx][bOwner], "The State", 0, strlen("The State"), 255);
	strmid(BizzInfo[bidx][bExtortion], "No-one", 0, strlen("No-one"), 255);
	
	RefreshBizz(bidx);
	UpdateBizz(bidx);
	
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "~w~You have sold the ~g~Business");
	GameTextForPlayer(playerid, string, 10000, 3);
	format(string, sizeof string, "[Новости недвижимости] Бизнес [ %s ] был выставлен на продажу. Цена: $%d", BizzInfo[bidx][bName], BizzInfo[bidx][bBuyPrice]);
	SendToAll(COLOR_NEWS, string);
	return 1;
}

CMD:asellhouse(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Введите: /asellhouse");
	if(!IsValidHouse(params[0])) return Send(playerid, COLOR_GREY, "* Неверный ID дома!");

	if(HouseInfo[params[0]][hOwned] != 0) {
		params[1] = ReturnUser(HouseInfo[params[0]][hOwner]);
		if(Pl::isLogged(params[1])) { Pl::Info[params[1]][pHouseKey] = 999; Send(params[1], COLOR_LIGHTRED, "* Ваш дом был продан!"); }
		else { format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `House` = '999' WHERE `Name` = '%s'", HouseInfo[params[0]][hOwner]); Db::query(query); }
	}

	ClearHouse(params[0]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "[Новости недвижимости] Был выставлен дом на продажу. Цена: $%d", HouseInfo[params[0]][hPrice]);
	SendToAll(COLOR_NEWS, string);
	format(string, sizeof string, "~w~You have sold this ~g~property", HouseInfo[params[0]][hPrice]);
	GameTextForPlayer(playerid, string, 10000, 3);
	UpdateHouse(params[0]); ResetTuning(HouseInfo[params[0]][hAuto], 1, params[0]);
	return 1;
}

CMD:asellhouseall(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	for(new i = FIRST_HOUSE; i < TOTAL_HOUSES; i++) {
		if(HouseInfo[i][hOwned] != 0) {
			params[0] = ReturnUser(HouseInfo[i][hOwner]);
			if(Pl::isLogged(params[0])) { Pl::Info[params[0]][pHouseKey] = 999; Send(params[0], COLOR_LIGHTRED, "* Ваш дом был продан!"); }
			else { format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `House` = '999' WHERE `Name` = '%s'", HouseInfo[i][hOwner]); Db::query(query); }
			ClearHouse(i);
			ResetTuning(HouseInfo[i][hAuto], 1, i);
			UpdateHouse(i);
		}
	}
	SendToAll(COLOR_NEWS, "[RP]GrandWorld: Все дома штата были выставлены на продажу!");
	return 1;
}

CMD:asellbizall(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return 1;
	for(new i = 0; i < TOTAL_BIZZ; i++) {
		if(BizzInfo[i][bOwned] && !BizzInfo[i][bOnBattle]) {
			params[0] = ReturnUser(BizzInfo[i][bOwner]);
			if(Pl::isLogged(params[0])) { Pl::Info[params[0]][pBizKey] = 255; Send(params[0], COLOR_LIGHTRED, "* Ваш бизнес был продан!"); }
			else { format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `busines` = '255' WHERE `Name` = '%s'", BizzInfo[i][bOwner]); Db::query(query); }
			BizzInfo[i][bLocked] = 1;
			BizzInfo[i][bOwned] = 0;
			BizzInfo[i][bTill] = 0;

			strmid(BizzInfo[i][bOwner], "The State", 0, strlen("The State"), 255);
			strmid(BizzInfo[i][bExtortion], "No-one", 0, strlen("No-one"), 255);
			RefreshBizz(i);
			UpdateBizz(i);
		}
	}
	SendToAll(COLOR_NEWS, "[RP]GrandWorld: Все бизнесы штата были выставлены на продажу!");
	return 1;
}

CMD:call(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /call [номер телефона]");
	if(Pl::Info[playerid][pNumber] == 0) return Send(playerid, COLOR_GRAD2, "* У Вас нет телефона!");
	if(params[0] == Pl::Info[playerid][pNumber]) return Send(playerid, COLOR_GRAD2, "* Вы не можете позвонить себе");
	if(Mobile[playerid] != INVALID_PLAYER_ID) return Send(playerid, COLOR_GRAD2, "  Вы готовы позвонить...");
	foreach(new i: Player) {
		if(Pl::isLogged(i)) {
			if(Pl::Info[i][pNumber] == params[0]) {
				if(!PhoneOnline[i]) return Send(playerid, COLOR_GREY, "* Телефон выключен!");
				if(Mobile[i] != INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Линия занята!");
				
				Mobile[playerid] = i;
				CellTime[playerid] = 1;
				
				getname(playerid -> sendername, i -> playername);
				format(string, sizeof string, "* %s звонит по телефону", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				format(string, sizeof string, " Ваш мобильник звонит Введите (/p) звонит %s", sendername);
				Send(i, COLOR_YELLOW, string);
				format(string, sizeof string, "* %s's телефон начинает звонить.", playername);
				ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Send(playerid, COLOR_WHITE, "Подсказка: Используйте Т для того чтобы говорить, введите /h чтобы положить трубку");
				
				return 1;
			}
		}
	}
	return 1;
}

CMD:anim(playerid, params[]) {
	Send(playerid, COLOR_GRAD2, "/piss /sitdown /sitdown2 /stay /upplay /droch /konch");
	return 1;
}

CMD:droch(playerid, params[]) {
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 10000.0, 9999, 9999, 9999, 9999, 9999);
	return 1;
}

CMD:konch(playerid, params[]) {
	ApplyAnimation(playerid, "PAULNMAC", "wank_out", 10000.0, 9999, 9999, 9999, 9999, 9999);
	return 1;
}

CMD:piss(playerid, params[]) {
	if (Pl::Info[playerid][pJailed]) return Send(playerid, COLOR_RED, "СДЕСЬ НЕЛЬЗЯ ССАТЬ И ПЕТУШИТьСЯ!");
	SetPlayerSpecialAction(playerid,68);
	return 1;
}

CMD:sitdown(playerid, params[]) {
	//ApplyAnimation(playerid,"FOOD","FF_Dam_Bkw",4.1,0,1,1,1,1);
	ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,0,0,1,1);
	return 1;
}

CMD:sitdown2(playerid, params[]) {
	ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1,0,0,0,1,1);
	return 1;
}

CMD:upplay(playerid, params[]) {
	ApplyAnimation(playerid,"INT_HOUSE","LOU_Out",4.1,0,1,1,1,1);
	return 1;
}

CMD:stay(playerid, params[]) {
	ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
	return 1;
}

CMD:sms(playerid, params[]) { new string[144], sendername[24];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молчанка!");
	if(PlayerTied[playerid]) return Send(playerid,COLOR_GREY,"Вы связаны");
	if(Pl::Info[playerid][pNumber] == 0) return Send(playerid, COLOR_GRAD2, "* У Вас нет телефона...");
	if(Pl::Info[playerid][pTime] < 1) return Send(playerid, COLOR_GREY, "* Вы должны отыграть 1 час на сервере, чтобы использовать эту команду!");
	if(sscanf(params, "ds[90]", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /sms [phonenumber] [text]");
	if(params[0] == 0) return Send(playerid, COLOR_GREY, "* Неверный номер!");
	foreach(new i: Player) {
		if(Pl::isLogged(i)) {
			if(Pl::Info[i][pNumber] == params[0]) {
				if(!PhoneOnline[i]) return Send(playerid, COLOR_GREY, "* Телефон игрока отключен!");
				new bidx = GetBizIndex(45);
				BizzInfo[bidx][bProducts]--;
				BizzInfo[bidx][bTill] += BizzInfo[bidx][bEntranceCost];
				Rac::GivePlayerMoney(playerid, -BizzInfo[bidx][bEntranceCost]);
				format(string, sizeof string, "~r~$-%i", BizzInfo[bidx][bEntranceCost]);
				GameTextForPlayer(playerid, string, 5000, 1);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				
				GetPlayerName(playerid, sendername, 24);
				format(string, sizeof string, "* %s вынимает мобилу.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof string, "*SMS: %s. Отправитель: %s (%d)", params[1], sendername, Pl::Info[playerid][pNumber]);
				Send(i, COLOR_YELLOW, string);
				Send(playerid, COLOR_YELLOW, "* СМСка отправленна");
				return 1;
			}
		}
	}
	return 1;
}

CMD:p(playerid, params[]) { new string[144], sendername[24];
	if(Mobile[playerid] != 0xFFFF) return Send(playerid, COLOR_GREY, "  Вы уже разговариваите по телефону!");
	foreach(new i: Player)
	{
		if(Pl::isLogged(i))
		{
			if(Mobile[i] == playerid)
			{
				Mobile[playerid] = i;
				Send(i, COLOR_GREY, "* Он поднял трубку.");
				GetPlayerName(playerid, sendername, 24);
				format(string, sizeof string, "* %s отвечает на звонок.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				return 1;
			}
		}
	}
	return 1;
}

CMD:h(playerid, params[]) {
	new caller = Mobile[playerid];
	if(caller != INVALID_PLAYER_ID)
	{
		if( Pl::isLogged(caller) )
		{
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
			Mobile[playerid] = INVALID_PLAYER_ID;
			Send(caller, COLOR_GRAD2, "Абонент положил трубку.");
			SetPlayerSpecialAction(caller,SPECIAL_ACTION_STOPUSECELLPHONE);
			Send(playerid, COLOR_GRAD2, "Вы положили трубку.");
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			return 1;
		}
	}
	Send(playerid, COLOR_GRAD2, "Ваш телефон в кармане.");
	
	return 1;
}

CMD:time(playerid, params[]) { new string[144];
	new h, m, s; gettime(h, m, s);
	if(Pl::Info[playerid][pJailTime] > 0) {
		format(string, sizeof string, "~w~time: ~g~%02i:%02i~n~~w~Jail Time Left: ~g~%i sec", h, m, Pl::Info[playerid][pJailTime]);
	} else {
		format(string, sizeof string, "~w~Time: ~g~%02i:%02i", h, m);
	}
	GameTextForPlayer(playerid, string, 3500, 1);
	ApplyAnimation(playerid,"COP_AMBIENT","coplook_watch",4.1,0,0,0,0,0);
	return 1;
}

CMD:house(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Введите: /house [housenumber]");
	if(params[0] < 1 || params[0] > TOTAL_HOUSES) return Send(playerid, COLOR_GREY, "Invalid house id!");
	Rac::SetPlayerVirtualWorld(playerid,HouseInfo[params[0]][hVirtual]);
	Rac::SetPlayerInterior(playerid,HouseInfo[params[0]][hInt]);
	Rac::SetPlayerPos(playerid,HouseInfo[params[0]][hExitx],HouseInfo[params[0]][hExity],HouseInfo[params[0]][hExitz]);
	GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
	Pl::Info[playerid][pLocal] = params[0];
	return 1;
}

CMD:houseo(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Используйте: /houseo [housenumber]");
	if(params[0] < 1 || params[0] > TOTAL_HOUSES) return Send(playerid, COLOR_GREY, "Invalid house id!");
	Rac::SetPlayerVirtualWorld(playerid, 0); Rac::SetPlayerInterior(playerid, 0); Pl::Info[playerid][pLocal] = 0;
	Rac::SetPlayerPos(playerid,HouseInfo[params[0]][hEnterx],HouseInfo[params[0]][hEntery],HouseInfo[params[0]][hEnterz]);
	GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
	return 1;
}

CMD:biz(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /biz [biznumber]");
	new bidx = GetBizIndex(params[0]);
	if( bidx == -1 ) return Send(playerid, COLOR_GREY, "* Нет такого бизнеса!");
	
	if(BizzInfo[bidx][bType] == 1)
	{
		Pl::Info[playerid][pLocal] = 0;
		Rac::SetPlayerInterior(playerid, 0); Rac::SetPlayerVirtualWorld(playerid, 0);
		Rac::SetPlayerPos(playerid,BizzInfo[bidx][bEnterX],BizzInfo[bidx][bEnterY],BizzInfo[bidx][bEnterZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
	}
	else
	{
		Rac::SetPlayerPos(playerid,BizzInfo[bidx][bExitX],BizzInfo[bidx][bExitY],BizzInfo[bidx][bExitZ]);
		Rac::SetPlayerVirtualWorld(playerid, BizzInfo[bidx][bVirtual]);
		Rac::SetPlayerInterior(playerid,BizzInfo[bidx][bInterior]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		Pl::Info[playerid][pLocal] = (bidx*99);
	}
	return 1;
}

CMD:edit(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	ShowDialog(playerid, D_EDIT, DIALOG_STYLE_INPUT, "EDIT", "list/edit.lst", "OK", "ОТМЕНА");
	return 1;
}

CMD:exit(playerid, params[]) {
	if(GetPlayerVirtualWorld(playerid) != 0 && GetPlayerInterior(playerid) != 0) {
		if(Pl::CarInt[playerid] != INVALID_VEHICLE_ID) {
			GetVehiclePos(Pl::CarInt[playerid], vehx, vehy, vehz);
			Rac::SetPlayerInterior(playerid, 0);
			Rac::SetPlayerVirtualWorld(playerid, 0);
			Rac::SetPlayerPos(playerid, vehx+5.0, vehy, vehz);
			Pl::CarInt[playerid] = INVALID_VEHICLE_ID;
		} else {
			new playervirt = GetPlayerVirtualWorld(playerid);
			for(new i = FIRST_HOUSE; i < TOTAL_HOUSES; i++) {
				if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && HouseInfo[i][hVirtual] == playervirt) {
					SetPVarInt(playerid, "PlayerHouse", i);
					return SPD(playerid, D_EX_HOUSE, 0, "EXIT", "Вы хотите выйти?", "ДА", "НЕТ");
				}
			}
		}
	}
	return 1;
}

CMD:home(playerid, params[]) {
	if(Pl::Info[playerid][pHouseKey] == 999) {
		GameTextForPlayer(playerid, "~w~You are homeless", 5000, 1);
	} else {
		DestroyDynamicCP(checkpoints[playerid]);
		checkpoints[playerid] = CreateDynamicCP(HouseInfo[Pl::Info[playerid][pHouseKey]][hEnterx], HouseInfo[Pl::Info[playerid][pHouseKey]][hEntery], HouseInfo[Pl::Info[playerid][pHouseKey]][hEnterz], 4.0,-1,-1,playerid,99999.9);
		GameTextForPlayer(playerid, "~w~Waypoint set ~r~Home", 5000, 1);
		Pl::CheckpointStatus[playerid] = CHECKPOINT_HOME;
	}
	return 1;
}

CMD:bizinfo(playerid, params[]) {
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Введите: /bizinfo [bizid]");
	if(!IsValidBiz(params[0])) return Send(playerid, COLOR_GREY, "* Неверный ID бизнеса!");
	PrintBizInfo(playerid, params[0]);
	return 1;
}
CMD:houseinfo(playerid, params[]) {
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /houseinfo [houseid]");
	if(!IsValidHouse(params[0])) return Send(playerid, COLOR_GREY, "* Неверный ID дома!");
	PrintHouseInfo(playerid, params[0], 1);
	return 1;
}


CMD:bizname(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "s[24]", temp)) return Send(playerid, COLOR_GREY, "Введите: /bizzname [name]");
	for(new i; i < sizeof(BizzInfo); i++) {
		if(IsPlayerInRangeOfPoint(playerid, 4.0, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ])) {
			UpdateBizz(i);
			format(string, sizeof string, "Названия бизнеса номер %d изменино на [ %s ]", BizzInfo[i][bID], BizzInfo[i][bName]);
			return Send(playerid, COLOR_WHITE, string);
		}
	}

	return 1;
}

CMD:setowner(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "s[24]", temp)) return Send(playerid, COLOR_GREY, "Введите: /bizzname [name]");
	if(!regex_match_exid(temp, ValidText)) return Send(playerid, COLOR_GREY, "* Недопустимое название!");
	for(new i; i < sizeof(BizzInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ]))
		{
			Db::real_escape_string(temp, BizzInfo[i][bOwner]), UpdateBizz(i);
			format(string, sizeof string, "Владелец бизнеса номер %d теперь %s!", BizzInfo[i][bID], BizzInfo[i][bOwner]);
			Send(playerid, COLOR_WHITE, string);
			
			return 1;
		}
	}
	for(new i = FIRST_HOUSE; i < TOTAL_HOUSES; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[i][hEnterx], HouseInfo[i][hEntery], HouseInfo[i][hEnterz]))
		{
			Db::real_escape_string(temp, HouseInfo[i][hOwner]), UpdateHouse(i);
			format(string, sizeof string, "Владелец дома номер %d теперь %s!", HouseInfo[i][hID], HouseInfo[i][hOwner]);
			Send(playerid, COLOR_WHITE, string);
			
			return 1;
		}
	}

	return 1;
}

CMD:heal(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(GetFracID(playerid) != 4) return Send(playerid, COLOR_GREY, "* Вы не медик!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /heal [playerid] [price]");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете излечить себя!");
	if(params[1] < 1 || params[1] > 1000) return Send(playerid, COLOR_GREY, "* Исцеление цены не ниже $1 и не выше $1000!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	new veh = GetPlayerVehicleID(playerid);
	if(IsPlayerInVehicle(params[0], veh) && IsAnAmbulance(veh)) {
		if(Rac::GetPlayerHealth(params[0]) >= 100.0) return Send(playerid, COLOR_GREY,"* Тот человек полностью излечен!");
		if(Rac::GetPlayerMoney(params[0]) < params[1]) return Send(playerid, COLOR_GREY,"* Тот человек не сможет оплатить лечение!");
		Rac::SetPlayerHealth(params[0], 100.0);
		Rac::GivePlayerMoney(playerid, params[1]);
		Rac::GivePlayerMoney(params[0], -params[1]);
		getname(playerid->sendername,params[0]->playername);
		format(string, sizeof string, "* Вы вылечили %s за %i$", playername, params[1]);
		Send(playerid, COLOR_LIGHTGREEN,string);
		format(string, sizeof string, "* Медик %s выличил вас за %i$", sendername, params[1]);
		Send(params[0], COLOR_LIGHTGREEN,string);
		PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
		PlayerPlaySound(params[0], 1150, 0.0, 0.0, 0.0);
		if(STDPlayer[params[0]] > 0) {
			STDPlayer[params[0]] = 0;
		}
	}
	else Send(playerid, COLOR_GRAD1, "* Один из Вас не находится в Санитарной машине / Вертолет !");
	
	return 1;
}

CMD:mole(playerid, params[]) { new string[144];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молчанка!");
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "s[90]", params[0])) return Send(playerid, COLOR_GRAD1, "Введите: /mole [текст]");
	format(string, sizeof string, "*SMS: %s. Отправитель: [RP]GrandWorld", params[0]);
	SendToAll(COLOR_YELLOW, string);
	return 1;
}

CMD:id(playerid, params[]) { new string[144], playername[24];
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /id [id/PartOfName]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подключекн!");
	GetPlayerName(params[0], playername, 24);
	switch(AFKInfo[params[0]][afk_State]) {
		case 0 : format(string, sizeof string, "ID: (%i) %s", params[0], playername);
		case 1 : format(string, sizeof string, "ID: (%i) %s {33CCFF}<PAUSE: %i sec.>", params[0], playername, AFKInfo[params[0]][afk_Time][0]);
	}
	Send(playerid, COLOR_GRAD1, string);
	return 1;
}

CMD:tv(playerid, params[]) { new string[144], playername[24];
	new hkey = Pl::Info[playerid][pHouseKey];
	if(sscanf(params, "s[24]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /tv [id] (off - перестать смотреть тв)");
	if(strcmp("off", params[0], true) == 0) {
		if(WatchingTV[playerid]) {
			WatchingTV[playerid] = false;
			Pl::SpecInfo[playerid][pSpecID] = 999;
			Pt::Hide(playerid, Td::Spec[playerid]);
			GameTextForPlayer(playerid, "~w~                TV~n~~r~                Off", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		} else {
			Send(playerid, COLOR_GREY, "* Вы не смотрите TV.");
		}
	} else if(Pl::isAdmin(playerid, 1) || (Pl::Info[playerid][pLocal] == hkey && IsValidHouse(hkey))) {
		new specid = ReturnUser(params[0]);
		if(specid == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете следить сами за собой!");
		if(!Pl::isLogged(specid)) return Send(playerid, COLOR_GREY, "* Игрок не авторизирован!");
		if(WatchingTV[specid]) return Send(playerid, COLOR_GREY, "* Этот игрок сам в ТВ!");
		if(!Pl::isAdmin(playerid, 1) && HouseInfo[hkey][hTv] != 1) return GameTextForPlayer(playerid, "~r~This upgrade isn't installed", 5000, 1);
		if(Pl::Info[specid][pAdmin] > 0 && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Этот канал не работает!");
		GetPlayerName(specid, playername, 24);
		if(!Pl::isAdmin(playerid, 1)) Rac::TogglePlayerControllable(playerid, 0);
		Pl::SpecInfo[playerid][pSpecID] = specid;
		format(string, sizeof string, "[TV] Канал: (%i) %s", specid, playername);
		Send(playerid, COLOR_GREEN, string);
		SetPlayerColor(playerid, COLOR_ALPHA);

		Pl::SpecInfo[specid][pSpecVw]		[0] = GetPlayerVirtualWorld(specid);
		Pl::SpecInfo[specid][pSpecInt]		[0] = GetPlayerInterior(specid);
		Pl::SpecInfo[specid][pSpecState]	[0] = GetPlayerState(specid);
		
		Rac::TogglePlayerSpectating(playerid, true);
		switch(Pl::SpecInfo[specid][pSpecState][0]) {
			case 2, 3 : {
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specid));
			}
			default : {
				PlayerSpectatePlayer(playerid, specid);
			}
		}
		Pt::Show(playerid, Td::Spec[playerid]);
		Rac::SetPlayerInterior(playerid, Pl::SpecInfo[specid][pSpecInt][0]);
		Rac::SetPlayerVirtualWorld(playerid, Pl::SpecInfo[specid][pSpecVw][0]);
		WatchingTV[playerid] = true;
	}
	else Send(playerid, COLOR_GREEN, "* Вы не дома.");

	return 1;
}

CMD:a(playerid, params[]) { new string[144];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молчанка!");
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /(a)dmin [чат]");
	GetPlayerName(playerid, plname, 24);
	format(string, sizeof string, "*%s %s: %s", GetAdminRank(Pl::Info[playerid][pAdmin]), plname, params);
	SendToAdmin(COLOR_ORANGE, string, 1);
	return 1;
}

CMD:cnn(playerid, params[]) { new string[144];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молчанка!");
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "iis[90]", params[0], params[1], params[3])) return Send(playerid, COLOR_GRAD1, "Введите: /cnn [type] [time] [text]");
	if(params[0] < 0 || params[0] == 2 || params[0] > 6) return Send(playerid, COLOR_GREY, "* Вы не можите использовать этот тип текста!");
	format(string, sizeof string, "~w~%s", params[3]);
	GameTextForPlayer(playerid, string, params[1], params[0]);
	return 1;
}

CMD:prison(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "us[64]", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /prison [id/Name] [reason]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pJailed] == 2) return Send(playerid, COLOR_GREY, "* Этот игрок уже в присоне!");
	if(Pl::Info[playerid][pAdmin] < Pl::Info[params[0]][pAdmin]) return Send(playerid, COLOR_LIGHTRED, "* Вы не можите посадить администратора в Демоган!");
	Jailed(params[0], 2800, 2);
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /prison к игроку %s[%i]. Причина: %s", sendername, playername, params[0], params[1]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Вы были размещены в Форт Деморган администратаром %s. Причина: %s", sendername, params[1]);
	Send(params[0], COLOR_LIGHTRED, string);
	GameTextForPlayer(params[0], "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
	return 1;
}

CMD:unprison(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /unprison [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pJailed] != 2) return Send(playerid, COLOR_GREY, "* Этот игрок не в присоне!");
	if(playerid == params[0] && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Вы не можите оправдаться!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /unprison к игроку %s[%i].", sendername, playername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3); UnJail(params[0], 2);
	Send(params[0],COLOR_RED,"* Вы были выпущены из Деморгана!");
	return 1;
}

CMD:jail(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "uds[36]", params[0], params[1], params[2])) return Send(playerid, COLOR_GREY, "Введите: /jail [id/Name] [time] [reason]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pJailed] >= 1) return Send(playerid, COLOR_GREY, "* Этот игрок уже находится в тюрьме!");
	if(params[1] < 60 || params[1] > 3600) return Send(playerid, COLOR_GREY, "* Срок ареста может быть от 1 минуты и до 1 часа!");
	if(Pl::Info[playerid][pAdmin] < Pl::Info[params[0]][pAdmin]) return Send(playerid, COLOR_LIGHTRED, "* Вы не можете посадить в тюрьму администратора!");
	Jailed(params[0], params[1], 3);
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "<< Админ %s арестовал нарушителя %s. Причина: %s >>", sendername, playername, params[2]);
	OOCNews(COLOR_LIGHTRED, string);
	format(string, sizeof string, "* Вы были заключены в тюрьму на %d секунд.", params[1]);
	Send(params[0], COLOR_LIGHTRED, string);
	return 1;
}

CMD:unjail(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /unjail [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(playerid == params[0] && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Вы не можите оправдаться!");
	if(Pl::Info[params[0]][pJailed] != 1) return Send(playerid, COLOR_GREY, "* Этот игрок не в тюрьме!");
	UnJail(params[0], 1);
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /unjail к игроку %s[%i].", sendername, playername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Администратор %s выпустил вас из тюрьмы!", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:setstat(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	ShowDialog(playerid, D_SETSTAT, DIALOG_STYLE_INPUT, "SETSTAT", "list/setstat.lst", "Ввод", "Отмена");
	return 1;
}

CMD:fs(playerid, params[]) {
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /fs [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	SPD(params[0], D_FIGHTSTYLE, DIALOG_STYLE_LIST, "Выберите стиль боя","БОКС\nКУНГ-ФУ\nСАМБО\nУЛИЧНЫЙ","Выбрать","Отмена");
	return 1;
}

CMD:ainvite(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /ainvite [id] [fracid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(GetFracID(params[0]) != 0) return Send(playerid, COLOR_GREY, "* Этот игрок уже состоит в другой организации!");
	if(params[1] < 1 || params[1] > 20) return Send(playerid, COLOR_GREY, "* Неверный ID фракции!");
	if(params[1] == 8 && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Неверный ID фракции!");
	Pl::Info[params[0]][pMember] = params[1];
	Pl::Info[params[0]][pRank] = 1;
	Rac::SetPlayerInterior(params[0], 3);
	Rac::SetPlayerVirtualWorld(params[0], 7);
	Rac::SetPlayerPos(params[0],207.4872,-129.2266,1003.5078);
	Pl::Info[params[0]][pLocal] = (99*GetBizIndex(7));
	SelectCharPlace[params[0]] = 0;
	SetPColor(params[0]);
	Iter_Add(TeamPlayers[params[1]], params[0]);
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /ainvite к игроку %s[%d][%s]", sendername, playername, params[0], FracInfo[ params[1] ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Вы были приняты в %s админом %s", FracInfo[ params[1] ][ fName ], sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:invite(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(IsPlayerLeader(playerid) <= 0) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /invite [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(GetFracID(params[0]) != 0) return Send(playerid, COLOR_GREY, "* Этот игрок уже сотоит в другой организации!");
	if(IsLegalFrac(GetFracID(params[0])) && !Pl::Info[params[0]][pPasport][0]) return Send(playerid, COLOR_GREY, "* У этого человека нет паспорта!");
	getname(playerid -> sendername, params[0] -> playername);
	SetPVarInt(params[0], "InvateFrac", Pl::Info[playerid][pLeader]);
	format(string, sizeof string, "* Вы были приглашены в %s лидером %s (пишите /accept invite чтобы согласится)", FracInfo[ Pl::Info[playerid][pLeader] ][ fName ], sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы пригласили %s в %s.", playername, FracInfo[ Pl::Info[playerid][pLeader] ][ fName ]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:uninvite(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(IsPlayerLeader(playerid) <= 0) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /invite [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pLeader] > 0) return Send(playerid, COLOR_GREY, "* Вы не можите уволить лидера!");
	if(GetFracID(playerid) != GetFracID(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не состоит в вашей организации!");		
	Iter_Remove(TeamPlayers[Pl::Info[params[0]][pMember]], params[0]);
	Pl::Info[params[0]][pMember] = 0;
	Pl::Info[params[0]][pRank] = 0;
	switch(Pl::Info[params[0]][pSex]) {
		case 1: Pl::Info[params[0]][pChar] = 60;
		case 2: Pl::Info[params[0]][pChar] = 55;
		default: Pl::Info[params[0]][pChar] = 60;
	}
	MedicBill[params[0]] = false;
	Pl::Info[params[0]][pJob] = 0;
	Pl::Info[params[0]][pContractTime] = 0;
	Pl::setSpawnInfo(params[0]);
	Rac::SpawnPlayer(params[0]);
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы выкинули %s из своей фракции.", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы были уволены из фракции %s, лидером %s.", FracInfo[ Pl::Info[playerid][pLeader] ][ fName ], sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	Send(params[0], COLOR_LIGHTBLUE, "* Вы теперь гражданское лицо.");
	return 1;
}

CMD:unleader(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "s[24]S(не указана)[64]", playername, temp)) return Send(playerid, COLOR_GREY, "Введите: /unadmin [name] [reason]");
	params[0] = ReturnUser(playername);
	if(IsPlayerConnected(params[0])) {
		if(Pl::isLogged(params[0])) {
			format(string, sizeof string, "* Этот игрок сейчас онлайн. Используйте: /makeleader %i 0", params[0]);
			Send(playerid, COLOR_GREY, string);
		}
	} else {
		format(string, sizeof string, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `Leader`='0' WHERE `Name`='%s'", playername);
		if(Db::query(string) && Db::free_result()) {
			if(Db::affected_rows()) {
				GetPlayerName(playerid, sendername, 24);
				format(string, sizeof string, "[AdmWarn] * %s применил команду /unleader к лидеру %s, причина: %s", sendername, playername, temp);
				SendToAdmin(COLOR_YELLOW, string, 4, 3);
			} else {
				Send(playerid, COLOR_GREY, "* Такого игрока не существует!");
			}
		}
	}
	return 1;
}

CMD:unhelper(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsPHelper(playerid, 3) && !Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "s[24]S(не указана)[64]", playername, temp)) return Send(playerid, COLOR_GREY, "Введите: /unhelper [name] [reason]");
	params[0] = ReturnUser(playername);
	if(IsPlayerConnected(params[0])) {
		if(Pl::isLogged(params[0])) {
			format(string, sizeof string, "* Этот игрок сейчас онлайн. Используйте: /makehelper %i 0", params[0]);
			Send(playerid, COLOR_GREY, string);
		}
	} else {
		format(string, sizeof string, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `Helper`='0' WHERE `Name`='%s'", playername);
		if(Db::query(string) && Db::free_result()) {
			if(Db::affected_rows()) {
				GetPlayerName( playerid, sendername, 24 );
				format(string, sizeof string, "[AdmWarn] * %s применил команду /unhelper к хелперу %s, причина: %s", sendername, playername, temp);
				SendToAdmin(COLOR_YELLOW, string, 4, 3);
			} else {
				Send(playerid, COLOR_GREY, "* Такого игрока не существует!");
			}
		}
	}
	return 1;
}

CMD:unadmin(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsPHelper(playerid, 3) && !Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "s[24]S(не указана)[64]", playername, temp)) return Send(playerid, COLOR_GREY, "Введите: /unadmin [name] [reason]");
	params[0] = ReturnUser(playername);
	if(IsPlayerConnected(params[0])) {
		if(Pl::isLogged(params[0])) {
			format(string, sizeof string, "* Этот игрок сейчас онлайн. Используйте: /makeadmin %i 0", params[0]);
			Send(playerid, COLOR_GREY, string);
		}
	} else {
		format(string, sizeof string, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `Admin`='0' WHERE `Name`='%s'", playername);
		if(Db::query(string) && Db::free_result()) {
			if(Db::affected_rows()) {
				GetPlayerName(playerid, sendername, 24);
				format(string, sizeof string, "[AdmWarn] * %s применил команду /unhelper к админу %s, причина: %s", sendername, playername, temp);
				SendToAdmin(COLOR_YELLOW, string, 4, 3);
			} else {
				Send(playerid, COLOR_GREY, "* Такого игрока не существует!");
			}
		}
	}
	return 1;
}

CMD:makeleader(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /makeleader [id] [fracid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pAdmin] && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Нельзя менять лидерку админу!");
	if(params[1] < 0 || params[1] > 20) return Send(playerid, COLOR_GREY, "* Не ниже 0, и не выше 20!");
	if(params[1] == 8 && !Pl::isAdmin(playerid, 5))  return Send(playerid, COLOR_GREY, "* Не ниже 0, и не выше 20!");
	if(GetFracID(params[0]) == params[1])  return Send(playerid, COLOR_GREY, "* Этот игрок уже лидер!");
	getname(playerid -> sendername,params[0] -> playername);
	if(params[1] == 0) {
		if(Pl::Info[params[0]][pLeader]) {
			Iter_Remove(LeaderPlayers, params[0]);
			Iter_Remove(TeamPlayers[Pl::Info[params[0]][pLeader]], params[0]);
		}
		Pl::Info[params[0]][pMember] = 0;
		Pl::Info[params[0]][pLeader] = 0;
		Pl::Info[params[0]][pRank] = 0;
		switch(Pl::Info[params[0]][pSex]) {
			case 1: Pl::Info[params[0]][pChar] = 60;
			case 2: Pl::Info[params[0]][pChar] = 55;
			default: Pl::Info[params[0]][pChar] = 60;
		}
		MedicBill[params[0]] = false;
		Pl::setSpawnInfo(params[0]);
		Rac::SpawnPlayer(params[0]);
		format(string, sizeof string, "* Вы были сняты с лидерки администратором %s", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	} else {
		if(!Pl::Info[params[0]][pLeader]) Iter_Add(LeaderPlayers, params[0]);
		Iter_Remove(TeamPlayers[GetFracID(params[0])], params[0]);
		Iter_Add(TeamPlayers[params[1]], params[0]);
		
		Pl::Info[params[0]][pLeader] = params[1];
		Pl::Info[params[0]][pMember] = 0;
		Pl::Info[params[0]][pRank] = RankNums[params[1]];
		
		Rac::SetPlayerInterior(params[0], 3);
		Rac::SetPlayerVirtualWorld(params[0], 7);
		Pl::Info[params[0]][pLocal] = (99*GetBizIndex(7));
		Rac::SetPlayerPos(params[0], 207.4872, -129.2266, 1003.5078);
		SetPlayerWeapons(params[0]);
		SetPColor(params[0]);
		Pl::setSpawnInfo(params[0]);
		
		format(string, sizeof string, "* Вы были назначены лидером фракции %s, администратором %s", FracInfo[ params[1] ][ fName ], sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	}
	format(string, sizeof string, "[AdmWarn] * %s применил команду /makeleader к игроку %s[%s]",
	sendername, playername, FracInfo[ params[1] ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 4, 3);

	return 1;
}

CMD:agiverank(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Вы не лидер фракции!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /giverank [id] [ранг]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD1, "* Этот игрок не залогинен!");
	new fracid = GetFracID(params[0]);
	if(fracid <= 0) return Send(playerid, COLOR_GRAD1, "* Этот игрок не состоит в организациях!");
	if(params[1] <= 0 || params[1] > RankNums[fracid]) {
		format(string, sizeof string, "* В этой фракции всего %d рангов!", RankNums[ fracid ]);
		Send(playerid, COLOR_GREY, string);
		return 1;
	}
	Pl::Info[params[0]][pRank] = params[1];
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "* Вы были повышены/понижены в ранге админом %s, ваш ранг: %i", sendername, params[1]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /agiverank к игроку %s[%d][%s]", sendername, playername, params[0], FracInfo[fracid][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:giverank(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(IsPlayerLeader(playerid) <= 0) return Send(playerid, COLOR_GRAD1, "* Вы не лидер фракции!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /giverank [id] [ранг]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD1, "* Этот игрок не залогинен!");
	new fracid = GetFracID(params[0]);
	if(fracid != Pl::Info[playerid][pLeader]) return Send(playerid, COLOR_GRAD1, "* Этот игрок не состоит в вашей фракции!");
	if(params[1] <= 0 || params[1] > RankNums[fracid]) {
		format(string, sizeof string, "* В вашей фракции всего %d рангов", RankNums[ fracid ]);
		Send(playerid, COLOR_GREY, string);
		return 1;
	}
	Pl::Info[params[0]][pRank] = params[1];
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "* Вы были повышены/понижены в ранге лидером %s, ваш ранг: %i", sendername, params[1]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы повысели %s. Теперь его ранг %i.", playername, params[1]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
CMD:vigovor(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(IsPlayerLeader(playerid) <= 0) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "us[24]", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /vigovor [id] [reason]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");

	new fracid = GetFracID(playerid);
	if(fracid != GetFracID(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не состоит в вашей организации!");
	if(IsPlayerLeader(params[0]) == fracid) return Send(playerid, COLOR_GREY, "* Вы не можете дать выговор лидеру!");

	Pl::Info[params[0]][pRebuke]++;
	getname(playerid -> sendername,params[0] -> playername);
	if(Pl::Info[params[0]][pRebuke] >= 4) {
		Pl::Info[params[0]][pMember] = 0;
		Pl::Info[params[0]][pRank] = 0;
		switch(Pl::Info[params[0]][pSex])
		{
			case 1: Pl::Info[params[0]][pChar] = 60;
			case 2: Pl::Info[params[0]][pChar] = 55;
			default: Pl::Info[params[0]][pChar] = 60;
		}
		MedicBill[params[0]] = false;
		Pl::Info[params[0]][pJob] = 0;
		Pl::Info[params[0]][pContractTime] = 0;
		Pl::Info[params[0]][pRebuke] = 0;
		SetPlayerSkin(params[0], Pl::Info[params[0]][pChar]);
		Pl::setSpawnInfo(params[0]); Rac::SpawnPlayer(params[0]);
		
		format(string, sizeof string, "* Вы получили 4-й выговор от лидера %s и были автоматически уволены из фракции. Причина: %s", sendername, params[1]);
		Send(params[0], COLOR_LIGHTRED, string);
		format(string, sizeof string, "* Вы дали 4-й выговор игроку %s и он был автоматически уволен из вашей фракции. Причина: %s", playername, params[1]);
		Send(playerid, COLOR_LIGHTRED, string);
		updatePlayerData(params[0]);
	} else {
		format(string, sizeof string, "* Вы получили выговор от лидера %s. Причина: %s", sendername, params[1]);
		Send(params[0], COLOR_LIGHTRED, string);
		format(string, sizeof string, "* Вы дали выговор игроку %s. Причина: %s", playername, params[1]);
		Send(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}

CMD:unvigovor(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не авторизованы!");
	if(IsPlayerLeader(playerid) <= 0) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /unvigovor [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(GetFracID(playerid) != GetFracID(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не состоит в вашей организации!");
	if(Pl::Info[params[0]][pRebuke] <= 0) return Send(playerid, COLOR_GREY, "* У этого игрока нет выговоров");
	Pl::Info[params[0]][pRebuke] --;
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "* Лидер %s снял с 1 выговор. ", sendername, params[1]);
	Send(params[0], COLOR_LIGHTRED, string);
	format(string, sizeof string, "* Вы сняли 1 выговор с подчиненного %s.", params[1], playername);
	Send(playerid, COLOR_LIGHTRED, string);
	return 1;
}

CMD:achangerank(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Введите: /aranklist [fracid]");
	if(params[0] < 1 || params[0] > 20) return Send(playerid, COLOR_GREY, "* Неверный ID фракции!");
	ShowRankList(playerid, params[0]);
	return 1;
}

CMD:changespawn(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /changespawn [fracid]");
	if(params[0] < 1 || params[0] > sizeof(SpawnInfo)) return Send(playerid, COLOR_GREY, "Неверный ID фракции!");
	GetPlayerPos(playerid, SpawnInfo[params[0]][spX], SpawnInfo[params[0]][spY], SpawnInfo[params[0]][spZ]);
	GetPlayerFacingAngle(playerid, SpawnInfo[params[0]][spA]);
	SpawnInfo[params[0]][spInt] = GetPlayerInterior(playerid);
	SpawnInfo[params[0]][spVirt] = GetPlayerVirtualWorld(playerid);
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableSpawns__"` SET ");
	scf(query, string, "`spInt`='%i',", SpawnInfo[params[0]][spInt]);
	scf(query, string, "`spVirt`='%i',", SpawnInfo[params[0]][spVirt]);
	scf(query, string, "`spX`='%f',", SpawnInfo[params[0]][spX]);
	scf(query, string, "`spY`='%f',", SpawnInfo[params[0]][spY]);
	scf(query, string, "`spZ`='%f',", SpawnInfo[params[0]][spZ]);
	scf(query, string, "`spA`='%f' ", SpawnInfo[params[0]][spA]);
	scf(query, string, "WHERE `ID`='%i'", params[0]);
	if( Db::query(query) && Db::free_result() )
		Send(playerid, COLOR_YELLOW, "* Место спавна было изменино!");
	
	return 1;
}

CMD:mark(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(Pl::Info[playerid][pJailed] > 0) return Send(playerid, COLOR_GRAD1, "* Сиди блять!");
	TeleportDest[playerid][tpInt] = GetPlayerInterior(playerid);
	TeleportDest[playerid][tpVw] = GetPlayerVirtualWorld(playerid);
	TeleportDest[playerid][tpLocal] = Pl::Info[playerid][pLocal];
	GetPlayerFacingAngle(playerid, TeleportDest[playerid][tpPos][3]);
	GetPlayerPos(playerid, TeleportDest[playerid][tpPos][0], TeleportDest[playerid][tpPos][1], TeleportDest[playerid][tpPos][2]);
	return Send(playerid, COLOR_GRAD1, "* Вы установили маркер для телепорта (используйте /gotomark для телепорта туда)");
}
CMD:gotomark(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(Pl::Info[playerid][pJailed] > 0) return Send(playerid, COLOR_GRAD1, "* Сиди блять!");
	if(GetPlayerState(playerid) == 2 && GetPlayerInterior(playerid)) return Send(playerid, COLOR_GREY, "* Нельзя телепортироватся в интерьер!");
	Rac::SetPlayerPos(playerid, TeleportDest[playerid][tpPos][0], TeleportDest[playerid][tpPos][1], TeleportDest[playerid][tpPos][2]);
	SetPlayerFacingAngle(playerid, TeleportDest[playerid][tpPos][3]);
	Pl::Info[playerid][pLocal] = TeleportDest[playerid][tpLocal];
	Rac::SetPlayerInterior(playerid, TeleportDest[playerid][tpInt]);
	Rac::SetPlayerVirtualWorld(playerid, TeleportDest[playerid][tpVw]);
	return Send(playerid, COLOR_LIGHTBLUE, "* Вы были телепортированы!");
}

CMD:tp(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(Pl::Info[playerid][pJailed] > 0) return Send(playerid, COLOR_GRAD1, "* Вы заключенный!");
	SPD(playerid, D_GOTO, DIALOG_STYLE_LIST, "[RP]GrandWorld: Телепорты", "— Популярные места\n— Респы банд\n— Респы фракций", "SELECT", "CANCEL");
	return 1;
}

CMD:gotoc(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	new Float:pos[3];
	if(sscanf(params, "P<,>a<f>[3]I(0)I(0)", pos, params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /gotoc [interior] [vitualworld] [posX,posY,posZ]");
	Rac::SetPlayerPos(playerid, pos[0], pos[1], pos[2]); Rac::SetPlayerVirtualWorld(playerid, params[1]);
	Rac::SetPlayerInterior(playerid, params[0]); Send(playerid, COLOR_WHITE, "Вы бвли телепортированы по своим координатам!");
	return 1;
}

CMD:goto(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(Pl::Info[playerid][pJailed] > 0) return Send(playerid, COLOR_GRAD1, "* Это вевозможно!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /goto [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!TogTP[params[0]] && !Pl::isAdmin(playerid, 5)) return Send(playerid,COLOR_GREY,"* Админ запретил к нему телепортироваться!");
	GetPlayerPos(params[0], posx, posy, posz);
	if(GetPlayerState(playerid) == 2) Rac::SetVehiclePos(GetPlayerVehicleID(playerid), posx, posy+4, posz);
	else Rac::SetPlayerPos(playerid,posx, posy+2, posz);
	Rac::SetPlayerInterior(playerid,GetPlayerInterior(params[0]));
	Rac::SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(params[0]));
	Pl::Info[playerid][pLocal] = Pl::Info[params[0]][pLocal];
	Send(playerid, COLOR_LIGHTBLUE, "* Вы были телепортированы!");
	return 1;
}

CMD:gethere(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(Pl::Info[playerid][pJailed] > 0) return Send(playerid, COLOR_GRAD1, "* Сиди блять!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /gethere [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pJailed]) return Send(playerid, COLOR_GRAD1, "* Это вевозможно!");
	if(Pl::Info[params[0]][pAdmin] > Pl::Info[playerid][pAdmin] && !Pl::isAdmin(playerid, 5)) return Send(playerid,COLOR_GREY,"* Скажите админу чтобы он Телепортировался к вам.");
	GetPlayerPos(playerid, posx, posy, posz);
	if (GetPlayerState(params[0]) == 2) Rac::SetVehiclePos(GetPlayerVehicleID(params[0]), posx, posy+3, posz);
	else Rac::SetPlayerPos(params[0],posx, posy+1, posz);
	Rac::SetPlayerInterior(params[0], GetPlayerInterior(playerid));
	Rac::SetPlayerVirtualWorld(params[0], GetPlayerVirtualWorld(playerid));
	Pl::Info[params[0]][pLocal] = Pl::Info[playerid][pLocal];
	Send(params[0], COLOR_LIGHTRED2, "* Вы были телепортированы администрацией!");
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /gethere к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	
	return 1;
}

CMD:getcar(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(Pl::Info[playerid][pJailed] > 0) return Send(playerid, COLOR_GRAD1, "* Сиди блять!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Введите: /getcar [carid]");
	GetPlayerPos(playerid, posx, posy, posz);
	SetVehiclePos(params[0], posx+4, posy+4, posz);
	return 1;
}

CMD:gethousecar(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Введите: /getcar [carid]");
	if(!IsValidHouse(params[0])) return Send(playerid, COLOR_GREY, "* Неверный ID дома!");
	GetPlayerPos(playerid, posx, posy, posz);
	SetVehiclePos(HouseInfo[params[0]][hAuto], posx+4, posy+4, posz);
	return 1;
}

CMD:oldcar(playerid, params[]) { new string[144];
	format(string, sizeof string, "* Ваш старый автомобиль был: %d", gLastCar[playerid]);
	Send(playerid, COLOR_GREY, string);
	return 1;
}

CMD:gw(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /gw [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Rac::GivePlayerWeapon(params[0], 24, 555);
	Rac::GivePlayerWeapon(params[0], 25, 222);
	Rac::GivePlayerWeapon(params[0], 31, 2222);
	Send(params[0], COLOR_GREY, "* Вам дали набор головореза!");
	return 1;
}

CMD:ggun(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(!sscanf(params, "uii", params[0], params[1], params[2])) {
		if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
		if(IsWrongWeponID(params[1]) && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Не правельный ID оружия!");
		if(params[2] < 1 || params[2] > 999 && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Не ниже 1 и не выше 999 патронов!");
		if( Rac::GetPlayerAmmo(params[0], params[1]) >= 999 && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* У этого игрока слишком много оружия!");
		Rac::GivePlayerWeapon(params[0], params[1], params[2]);
		getname(playerid -> sendername, params[0] -> playername);
		format(string, sizeof string, "[AdmWarn] * %s применил команду /ggun к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
	} else {
		ShowDialog(playerid, D_GGUN, DIALOG_STYLE_INPUT, "GIVEGUN", "dialog/ggun.lst", "Ввод", "Отмена");
	}
	return 1;
}

CMD:ammo(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) {
		if(Pl::Info[playerid][pGunLic] <= 0) return Send(playerid, COLOR_WHITE,"Продавец: Я не могу продать вам оружие без лицензии!");
		ShowMenuForPlayer(getweapon,playerid);
		Rac::TogglePlayerControllable(playerid, 0);
	}
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	ShowMenuForPlayer(getweapon,params[0]); Rac::TogglePlayerControllable(params[0], 0);
	
	return 1;
}

CMD:resetgun(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /resetgun [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /resetgun к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3); Rac::ResetPlayerWeapons(params[0]);
	return 1;
}

CMD:sethp(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /sethp [id] [amount]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	Rac::SetPlayerHealth(params[0], params[1]);
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /sethp к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:setarmour(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /setarmour [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(!IsACop(params[0]) && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Только для закона!");
	Rac::SetPlayerArmour(params[0], params[1]);
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /setarmour к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:veh(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "iii", params[0], params[1], params[2])) return Send(playerid, COLOR_GRAD2, "Введите: /veh [model] [color1] [color2]");
	if(params[0] < 400 || params[0] > 611) return Send(playerid, COLOR_GREY, "* ID транспортного средства не может быть ниже 400 или выше 611 !");
	if((params[0] == 425 || params[0] == 520 || params[0] == 432) && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Вы не можите создать этот транспорт!");
	if(params[1] < 0 || params[1] > 126) return Send(playerid, COLOR_GREY, "* ID цвета не может быть ниже 0 или выше 126!");
	if(params[2] < 0 || params[2] > 126) return Send(playerid, COLOR_GREY, "* ID цвета не может быть ниже 0 или выше 126 !");
	if(Iter_Count(CreatedCars) >= 50) return Send(playerid, COLOR_GREY, "* Создано максемальное кол-во транспорта!");
	new vehid, Float:x, Float:y, Float:z;
	GetPlayerFrontLookAt(playerid, 5.0, x, y, z);
	GetPlayerPos(playerid, z, z, z);
	vehid = CreateVeh(params[0], x, y, z, 0.0, params[1], params[2], 1200);
	Iter_Add(CreatedCars, vehid);
	SetVehicleNumber(vehid);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /veh. Созданный транспорт [ ID: %i; Model: %s ]", GetName(playerid), vehid, VehicleNames[GetVehicleModel(vehid)-400]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:setbenz(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(!IsPlayerInAnyVehicle(playerid)) return Send(playerid, COLOR_GREY, "* Вы не находитесь в транспорте!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /setbenz!");
	Benzin{GetPlayerVehicleID(playerid)} = params[0];
	return 1;
}

CMD:fuelcars(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	for(new veh; veh < MAX_VEHICLES; veh++) if(IsValidVehicle(veh)) Benzin{veh} = MAX_GAS;
	format(string, sizeof string,"* Авдинистратор %s заправил весь транспорт на сервере", GetName(playerid));
	SendToAdmin(COLOR_LIGHTRED, string, 3);
	GameTextForAll("~w~BCE ABЏO–OЂ…‡… ~g~Filled ~w~Ђ‘‡… ~p~€AЊPAB‡Eм‘!",5000,1);
	Send(playerid, COLOR_LIGHTBLUE, "* Все машины были заправлены");
	return 1;
}

CMD:fixveh(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) {
		if(!IsPlayerInAnyVehicle(playerid)) return Send(playerid, COLOR_GREY, "* Вы не находитесь в транспорте!");
		Rac::RepairVehicle(GetPlayerVehicleID(playerid)); Send(playerid, COLOR_LIGHTBLUE, "* Транспорт был починен!");
	} else {
		if(!IsPlayerInAnyVehicle(params[0])) return Send(playerid, COLOR_GREY, "* Вы не находитесь в транспорте!");
		Rac::RepairVehicle(GetPlayerVehicleID(params[0]));
		
		getname(playerid -> sendername,params[0] -> playername);
		format(string, sizeof string, "* Администратор %s починил ваш транспорт!", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "[AdmWarn] * %s применил команду /fixveh к игроку %s[%s]",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
	}
	return 1;
}

CMD:fillveh(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) {
		new veh = GetPlayerVehicleID(playerid);
		if(!veh) return Send(playerid, COLOR_GREY, "* Вы не находитесь в транспорте!");
		Benzin{veh} = 99;
		updateBenzinTD(playerid, veh);
		Send(playerid, COLOR_LIGHTBLUE, "* Транспорт был заправлен!");
	} else {
		new veh = GetPlayerVehicleID(params[0]);
		if(!veh) return Send(playerid, COLOR_GREY, "* Тот игрок не находится в транспорте!");
		Benzin{veh} = 99;
		updateBenzinTD(playerid, veh);
		getname(playerid -> sendername,params[0] -> playername);
		format(string, sizeof string, "* Администратор %s починил ваш транспорт!", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "[AdmWarn] * %s применил команду /fillveh к игроку %s[%s]",
		sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
	}
	return 1;
}

CMD:weatherall(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Вам не доступна эта функция");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_WHITE, "Введите: /погода [номер погоды]");
	SetWeather(params[0]);
	return 1;
}

CMD:worldtime(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Вам не доступна эта функция");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_WHITE, "Введите: /погода [номер погоды]");
	SetWorldTime(params[0]);
	return 1;
}

CMD:pogoda(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Вам не доступна эта функция");
	
	clear(dialog);
	for(new i; i < sizeof(WeatherInfo); i++)
	{
		strunpack(string, WeatherInfo[i][wName], sizeof string);
		scf(dialog, string, "• %s\n", string);
	}
	SPD(playerid, D_WEATHER, DIALOG_STYLE_LIST, "Список погоды", dialog, "Выбор", "Отмена");
	return 1;
}

CMD:weather(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GRAD1, "* Вам не доступна эта функция");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_WHITE, "Введите: /weather [номер погоды] (0 - 45)");
	if(params[0] < 0 || params[0] > 45) return SendClientMessage(playerid, COLOR_GREY, "* Погодное удостоверение личности не может быть ниже 0 или выше 45!");
	SetPlayerWeather(playerid, params[0]);
	Send(playerid, COLOR_LIGHTBLUE, "* Вы установили для себя погоду.");
	return 1;
}

CMD:setmoney(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не авторизованы!");
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /setmoney [номер погоды]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	params[3] = Rac::GetPlayerMoney(params[0]); Rac::SetPlayerMoney(params[0], params[1]);
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /setmoney к игроку %s[%d]. Было:$%d; Стало: $%d",
	sendername, playername, params[0], params[3], Rac::GetPlayerMoney(params[0])); SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:givecash(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Вам не доступна эта функция");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_WHITE, "Введите: /погода [номер погоды]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Rac::GivePlayerMoney(params[0], params[1]);
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /givecash к игроку %s[%d]. Кол-во: $%d", sendername, playername, params[0], params[1]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Администратор %s дал вам $%I", sendername, params[1]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:slap(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(Pl::Info[playerid][pJailed] > 0) return Send(playerid, COLOR_GRAD1, "* Сиди блять!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /slap [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Rac::GivePlayerHealth(params[0], -5), SlapPlayer(params[0], 4.5), PlayerPlaySound(params[0], 1130, posx, posy, posz+5);
	if(params[0] != playerid)
	{
		getname(playerid -> sendername,params[0] -> playername);
		format(string, sizeof string, "[AdmWarn] * %s применил команду /slap к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
	}
	return 1;
}

CMD:mute(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "uds[64]", params[0], params[1], params[2])) return Send(playerid, COLOR_GREY, "Введите: /mute [id] [time] [reason]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	switch(Pl::Info[params[0]][pMuted])
	{
		case 0:
		{
			if(params[1] < 1 || params[1] > 60) return Send(playerid, COLOR_LIGHTRED, "* Минуты 1, и максимум 60 минут!");
			Pl::Info[params[0]][pMuted] = 1;
			Pl::Info[params[0]][pMutedTime] = params[1]*60;
			format(string, sizeof string, "[RP]GrandWorld: %s получил молчанку от администратора %s. Причина: %s", GetName(params[0]), GetName(playerid), params[2]);
			SendToAll(COLOR_LIGHTRED, string);
		}
		case 1..2:
		{
			Pl::Info[params[0]][pMuted] = 0;
			Pl::Info[params[0]][pMutedTime] = 0;
			format(string, sizeof string, "[RP]GrandWorld: Администратор %s снял молчанку с %s.", GetName(playerid), GetName(params[0]));
			SendToAll(COLOR_LIGHTRED, string);
		}
	}
	return 1;
}

CMD:hmute(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsPHelper(playerid, 2)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "us[64]", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /hmute [id] [reason]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pMuted] == 2) return Send(playerid, COLOR_GREY, "* У игрока уже есть молчанка!");
	getname(playerid -> sendername,params[0] -> playername);
	Pl::Info[params[0]][pMuted] = 2;
	Pl::Info[params[0]][pMutedTime] = 180;
	format(string, sizeof string, "*[H] %s получил молчанку для чата /vopros от хелпера %s, причина: %s", playername, sendername, params[1]);
	SendToHelper(COLOR_ORANGE, string);
	return 1;
}

CMD:exp(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /exp [id]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(Pl::Info[params[0]][pAdmin] > Pl::Info[playerid][pAdmin]) return Send(playerid, COLOR_LIGHTRED, "* Вы не можете подорвать администратора!");
	Rac::SetPlayerHealth(params[0], 10.0);
	GetPlayerPos(params[0], posx, posy, posz);
	CreateExplosion(posx, posy, posz, 7, 10);
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /exp к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:gmtest(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /gmtest [id]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(Pl::Info[params[0]][pAdmin] > Pl::Info[playerid][pAdmin]) return Send(playerid, COLOR_LIGHTRED, "* Вы не можете подорвать администратора!");
	GMTest{params[0]} = true;
	GetPlayerPos(params[0], posx, posy, posz);
	CreateExplosion(posx, posy, posz, 7, 10);
	SetTimerEx("onGMTest", 1000, false, "i", params[0]);
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /gmtest к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:kick(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "us[64]", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /kick [id] [reason]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(Pl::Info[params[0]][pAdmin] > Pl::Info[playerid][pAdmin]) return Send(playerid, COLOR_RED, "* Вы неможете кикнуть администратора!");
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[RP]GrandWorld: %s кикнут администратором %s, причина: %s", playername, sendername, params[1]);
	SendToAll(COLOR_LIGHTRED, string);
	printf("%s", string);
	Kick(params[0]);
	return 1;
}

CMD:skick(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не авторизованы!");
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "us[64]", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /skick [id] [reason]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(Pl::Info[params[0]][pAdmin] > Pl::Info[playerid][pAdmin]) return Send(playerid, COLOR_GREY, "* Вы неможете кикнуть администратора!");
	getname(playerid->sendername,params[0]->playername);
	format(dialog, sizeof dialog, src, sendername, params[1], temp);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /skick к игроку %s[%i], причина: %s", sendername, playername, params[0], params[1]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	Kick(params[0]);
	return 1;
}

CMD:kickers(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "ds[64]", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /kickers [lvl] [reason]");
	GetPlayerName(playerid, sendername, 24);
	foreach(new p: Player) {
		if(Pl::isLogged(p)) {
			if(!Pl::isAdmin(p, MAIN_ADMIN)) {
				if(Pl::Info[p][pLevel] == params[0]) {
					GetPlayerName(playerid, playername, 24);
					format(string, sizeof string, "*[RP]GrandWorld %s кикнут администратором %s, причина: %s", playername, sendername, params[1]);
					SendToAll(COLOR_LIGHTRED, string);
					Kick(p);
				}
			}
		}
	}
	return 1;
}

CMD:setlocal(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /setlocal [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Pl::Info[params[0]][pLocal] = params[1];
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /setlocal к игроку %s[%d]", sendername, playername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:setvw(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /setvw [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Rac::SetPlayerVirtualWorld(params[0], params[1]);
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /setvw к игроку %s[%d]", sendername, playername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}
CMD:setint(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /setvw [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Rac::SetPlayerInterior(params[0], params[1]);
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /setint к игроку %s[%d]", sendername, playername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:dn(playerid, params[]) {
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	Rac::SetPlayerPos(playerid, slx, sly, slz-2);
	return 1;
}

CMD:up(playerid, params[]) {
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	Rac::SetPlayerPos(playerid, slx, sly, slz+2);
	return 1;
}

CMD:fly(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	new fly = !GetPVarInt(playerid, "fly");
	SetPVarInt(playerid, "fly", fly);
	format(string, sizeof string, "* Fly %s!", (fly)?("включен"):("выключен"));
	Send(playerid, COLOR_LIGHTBLUE, string);
	
	return 1;
}

CMD:lt(playerid, params[]) {
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return SendClientMessage(playerid, COLOR_GREY, "* Недостаточно прав!");
	GetPlayerPos(playerid, posx, posy, posz);
	Rac::SetPlayerPos(playerid, posx, posy+2, posz);
	return 1;
}

CMD:rt(playerid, params[]) {
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return SendClientMessage(playerid, COLOR_GREY, "* Недостаточно прав!");
	GetPlayerPos(playerid, posx, posy, posz);
	Rac::SetPlayerPos(playerid, posx, posy-2, posz-2);
	return 1;
}

CMD:spcars(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return SendClientMessage(playerid, COLOR_GREY, "* Недостаточно прав!");
	for(new i; i < MAX_VEHICLES; i++) if(IsValidVehicle(i)) SetVehicleToRespawn(i);
	return 1;
}

CMD:vehid(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return SendClientMessage(playerid, COLOR_GREY, "* Недостаточно прав!");
	
	new vehicle;
	if(IsPlayerInAnyVehicle(playerid))
	{
		vehicle = GetPlayerVehicleID(playerid);
		format(string, sizeof string, "Vehicle [ Model: %i; ID: %i ]", GetVehicleModel(vehicle), vehicle);
		Send(playerid, COLOR_YELLOW, string);
	}
	else
	{
		vehicle = ClosestVeh(playerid, 3.0);
		format(string, sizeof string, "Vehicle [ Model: %i; ID: %i ]", GetVehicleModel(vehicle), vehicle);
		Send(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:spcar(playerid, params[]) {
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /spcar [carid]");
	if(params[0] < 1 || params[0] > MAX_VEHICLES) return Send(playerid, COLOR_GREY, "* Транспорта с таким ID не существует!");
	SetVehicleToRespawn(params[0]);
	return 1;
}

CMD:dc(playerid, params[]) {
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GREY,"* Недостаточно прва!");
	if(sscanf(params, "i", params[0])) {
		if(!IsPlayerInAnyVehicle(playerid)) return Send(playerid, COLOR_GREY,"Введите: /dc [vehid]");
		new vehid = GetPlayerVehicleID(playerid);
		Iter_Remove(CreatedCars, vehid); DestroyVeh(vehid);
		Send(playerid, COLOR_YELLOW, "* Машина удалена!");
		return 1;
	}
	if(params[0] < 1 || params[0] > MAX_VEHICLES) return Send(playerid, COLOR_GREY, "* Транспорта с таким ID не существует!");
	Iter_Remove(CreatedCars, params[0]); DestroyVeh(params[0]);
	Send(playerid, COLOR_YELLOW, "* Машина удалена!");
	
	return 1;
}

CMD:alldc(playerid, params[]) {
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid,COLOR_RED,"* Недостаточно прва!");
	foreach(new veh : CreatedCars) DestroyVeh(veh);
	Iter_Clear(CreatedCars);
	Send(playerid, COLOR_YELLOW, "* Машины были унечтожены!");
	return 1;
}

CMD:warn(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GRAD2, "* Недостаточно прав!");
	if(sscanf(params, "us[64]", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /warn [id] [reason]");
	if(Pl::isAdmin(params[0], 1) && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GRAD2, "* Вы не можите выдать варн админу!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Игрок не авторизирован!");
	Pl::Info[params[0]][pWarns] += 1;
	if(Pl::Info[params[0]][pWarns] >= 3) {
		format(string, sizeof string, "%s (3 Warns)", params[1]);
		Pl::Info[params[0]][pWarns] = 0;
		AddBanList(params[0], playerid, 3*1440, string, 1);
		return 1;
	}
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /warn к игроку %s[%d]. Причина: %s", sendername, playername, params[0], params[1]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Администратор %s выдал Вам предупреждение. Причина: %s", sendername, params[1]);
	Send(params[0], COLOR_LIGHTRED, string);
	return 1;
}

CMD:clearwarn(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD2, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /clearwarn [id]");
	if(Pl::isAdmin(params[0], 1) && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GRAD2, "* Вы не можите снимать варн с админа!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Игрок не авторизирован!");
	if(Pl::Info[params[0]][pWarns] <= 0) return Send(playerid, COLOR_GREY,"* У игрока нет варнов!");
	Pl::Info[params[0]][pWarns] = 0;
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /clearwarn к игроку %s[%i].", sendername, playername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Администратор %s снял с Вас все предупреждения.", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:cc(playerid, params[]) { new string[144], sendername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD2, "* Недостаточно прав!");
	for(new i; i != 50; i++) SendToAll(COLOR_WHITE," ");
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "* Администратор %s[%i] очистил все чаты сервера!", sendername, playerid);
	SendToAll(COLOR_USE, string);
	return 1;
}

CMD:banacc(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "s[24]s[24]", playername, temp)) return Send(playerid, COLOR_GREY, "Введите: /banacc [id] [reason]");
	params[0] = ReturnUser(playername);
	if(!IsPlayerConnected(params[0])) {
		format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `Banned` = '1' WHERE `Name` = '%s'", playername);
		if(Db::query(query) && Db::affected_rows()) {
			GetPlayerName(playerid, sendername, 24);
			format(string, sizeof string, "[AdmWarn] * %s заблокировал аккаунт %s, причина: %s", sendername, playername, temp);
			SendToAdmin(COLOR_YELLOW, string, 3, 3);
		} else {
			Send(playerid, COLOR_GREY, "* Нет такого аккаунта!");
		}
	} else {
		getname(playerid->sendername, params[0]->playername);
		format(string, sizeof string, "*[RP]GrandWorld: %s был заблокирован администратором %s, причина: %s", playername, sendername, temp);
		SendToAll(COLOR_LIGHTRED, string);
		Pl::Info[params[0]][pBanned] = 1;
		Kick(params[0]);
	}
	return 1;
}

CMD:unbanacc(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "s[24]s[24]", playername, temp)) return Send(playerid, COLOR_GREY, "Введите: /unbanacc [id] [reason]");
	params[0] = ReturnUser(playername);
	if(!IsPlayerConnected(params[0])) {
		format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `Banned` = '0' WHERE `Name` = '%s'", playername);
		if(Db::query(query) && Db::affected_rows()) {
			GetPlayerName(playerid, sendername, 24);
			format(string, sizeof string, "[AdmWarn] * %s разблокировал аккаунт %s. Причина: %s", sendername, playername, temp);
			SendToAdmin(COLOR_YELLOW, string, 3, 3);
		} else {
			Send(playerid, COLOR_GREY, "* Нет такого аккаунта!");
		}
	} else {
		Send(playerid, COLOR_GREY, "* Этот аккаунт не заблокирован!");
	}
	return 1;
}

CMD:ban(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, STD_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "uis[64]", params[0], params[1], temp)) return Send(playerid, COLOR_GREY, "Введите: /ban [id] [days (1-360)] [reason]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(Pl::Info[params[0]][pID] == -1) return Send(playerid, COLOR_GREY, "* Этот игрок не зарегистрирован!");
	if(Pl::isAdmin(params[0], 1) && !IsPlayerAdmin(playerid)) return Send(playerid, COLOR_GREY, "* Нельзя банить админа!");
	static const maxdays[] = {0, 10, 20, 60, 90, 360};
	if(!(1 <= params[1] <= maxdays[Pl::Info[playerid][pAdmin]])) {
		format(string, sizeof string, "* Кол-во дней бана может быть от 1 до %i!", maxdays[Pl::Info[playerid][pAdmin]]);
		Send(playerid, COLOR_GREY, string);
	} else {
		AddBanList(params[0], playerid, params[1]*1440, temp, 1);
	}
	return 1;
}

CMD:sban(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "uis[64]", params[0], params[1], temp)) return Send(playerid, COLOR_GREY, "Введите: /sban [id] [days (1-360)] [reason]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(Pl::Info[params[0]][pID] == -1) return Send(playerid, COLOR_GREY, "* Этот игрок не зарегистрирован!");
	if(Pl::isAdmin(params[0], 1) && !IsPlayerAdmin(playerid)) return Send(playerid, COLOR_RED, "* Нельзя банить админа!");
	static const maxdays[] = {0, 10, 20, 60, 90, 360};
	if(!(1 <= params[1] <= maxdays[Pl::Info[playerid][pAdmin]])) {
		format(string, sizeof string, "* Кол-во дней бана может быть от 1 до %i!", maxdays[Pl::Info[playerid][pAdmin]]);
		Send(playerid, COLOR_GREY, string);
	} else {
		AddBanList(params[0], playerid, params[1]*1440, temp, -1);
	}
	return 1;
}

CMD:oban(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "s[24]is[64]", playername, params[0], temp)) return Send(playerid, COLOR_GREY, "Введите: /oban [id] [days (1-360)] [reason]");
	if(IsPlayerConnected(ReturnUser(playername))) return Send(playerid, COLOR_GREY, "* Этот игрок подлючен!");
	static const maxdays[] = {0, 10, 20, 60, 90, 360};
	if(!(1 <= params[0] <= maxdays[Pl::Info[playerid][pAdmin]])) {
		format(string, sizeof string, "* Кол-во дней бана может быть от 1 до %i!", maxdays[Pl::Info[playerid][pAdmin]]);
		Send(playerid, COLOR_GREY, string);
	}
	
	new banid = GetIDFormName(playername);
	if(banid == -1) return Send(playerid, COLOR_GREY, "* Нет такого игрока на сервере!");
	if(isBanned(banid)) return Send(playerid, COLOR_GREY, "* Этот игрок уже забанен!");
	
	new unbandate, currdate = gettime(), reason[64];
	unbandate = currdate + (params[0]*1440)*60;
	Db::real_escape_string(temp, reason);
	GetPlayerName(playerid, sendername, 24);
	format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableBanned__"` (`user_id`,`admin_id`,`date`,`unbandate`,`reason`) VALUES (");
	scf(query, src, "'%i','%i',", banid, Pl::Info[playerid][pID]);
	scf(query, src, "'%i','%i','%s')", currdate, unbandate, reason);
	Db::query(query, playerid);
	
	format(query, sizeof query, "[OFFBAN] Админ %s забанил игрока %s, причина: %s", sendername, playername, reason);
	SendToAdmin(COLOR_LIGHTBLUE, query, 1, 3);
	return 1;
}

CMD:unban(playerid, params[]) {
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "s[24]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /unban [Name]");
	ShowPlayerBanList(playerid, params[0]);
	return 1;
}

CMD:reloadbans(playerid, params[]) {
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не авторизованы!");
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	SendRconCommand("reloadbans");
	return Send(playerid,COLOR_LIGHTBLUE, "* File \"samp.ban\" successfully reloaded!");
}

CMD:getip(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /getip [id]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(Pl::isAdmin(params[0], 5) && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Вы не может узнавать IP адрес этого игрока");
	format(string, sizeof string, "* %s[ID: %i] IP: %s", GetName(params[0]), params[0], GetPIP(params[0]));
	return Send(playerid,COLOR_LIGHTBLUE,string);
}

CMD:banip(playerid, params[]) { new string[144], sendername[24];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "s[16]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /banip [ip]");
	format(string,sizeof string,"banip %s", params[0]);
	SendRconCommand(string);
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "[AdmWarn] * %s забанил IP-адрес %s", sendername, params[0]);
	SendToAdmin(COLOR_LIGHTRED, string, 1, 3);
	return 1;
}

CMD:unbanip(playerid, params[]) { new string[144], sendername[24];
	if(!Pl::isAdmin(playerid, MAIN_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "s[16]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /unbanip [ip]");
	format(string,sizeof string,"unbanip %s", params[0]);
	SendRconCommand(string);
	SendRconCommand("reloadbans");
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "[AdmWarn] * %s разбанил IP-адрес %s", sendername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:gotocar(playerid, params[]) {
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GRAD1, "Введите: /gotocar [carid]");
	GetVehiclePos(params[0], posx, posy, posz);
	if(GetPlayerState(playerid) == 2) Rac::SetVehiclePos(GetPlayerVehicleID(playerid), posx+3, posy+3, posz);
	else Rac::SetPlayerPos(playerid, posx+3, posy+3, posz);
	Rac::SetPlayerVirtualWorld(playerid, 0); Rac::SetPlayerInterior(playerid, 0);
	Send(playerid, COLOR_GRAD1, " Вы были телепортированы");
	return 1;
}

CMD:freeze(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /freeze [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::isAdmin(params[0], 1) && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GREY, "* Администратор не может быть заморожен!");
	getname(playerid -> sendername,params[0] -> playername);
	if(params[0] != playerid) {
		format(string, sizeof string, "[AdmWarn] * %s применил команду /freeze к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
	}
	Rac::TogglePlayerControllable(params[0], 0);
	format(string, sizeof string, "* Вы были заморожены администратором %s", sendername);
	Send(params[0], COLOR_LIGHTRED, string);
	return 1;
}

CMD:unfreeze(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, MOD_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /unfreeze [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Rac::TogglePlayerControllable(params[0], 1);
	getname(playerid->sendername,params[0]->playername);
	if(params[0] != playerid) {
		format(string, sizeof string, "[AdmWarn] * %s применил команду /unfreeze к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
		SendToAdmin(COLOR_YELLOW, string, 1, 3);
	}
	format(string, sizeof string, "* Вы были разморожены администратором %s", sendername);
	Send(params[0],COLOR_LIGHTRED,string);
	return 1;
}

CMD:gmx(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	SendToAll(COLOR_LIGHTGREEN, "ВНИМАНИЕ! Происходит рестарт сервера!");
	SetTimerEx("GameModeInitExitFunc", 10000, false, "i", 0);
	return 1;
}

CMD:makeadmin(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 4) && !IsPlayerAdmin(playerid)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /makeadmin [id/Name] [ level(1-4) ]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[1] > 3 && !IsPlayerAdmin(playerid)) return Send(playerid, COLOR_GREY, "* Уровень админа может быть от 0 до 3!");
	if(!params[1] && Pl::Info[params[0]][pAdmin]) Iter_Remove(AdminPlayers, params[0]);
	else if(params[1] && !Pl::Info[params[0]][pAdmin]) Iter_Add(AdminPlayers, params[0]);
	Pl::Info[params[0]][pAdmin] = params[1]; 
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "* You have been promoted to a level %d admin by %s.", params[1], sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* You are promoted %s to admin level %d.", playername, params[1]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:gangtop(playerid, params[]) { new string[144];
	if(!IsAGang(playerid) && !Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	Send(playerid, COLOR_WHITE, "________________________|GANG TOP|________________________");
	for(new i; i < sizeof(GangInfo); i++) {
		format(string, sizeof string,
			"%i. %s  [ Уважение: %i; Бизнесы: %i; Казна: $%i; Онлайн: %i]",
			i+1,
			GetGangName(GangInfo[i][fID]),
			GangInfo[i][gRespect],
			GangBiznes{GangInfo[i][fID]},
			GetFracMoney(GangInfo[i][fID]),
			Iter_Count(TeamPlayers[GangInfo[i][fID]])
		);
		Send(playerid, GetFracColor(GangInfo[i][fID]), string);
	}
	return 1;
}

CMD:help(playerid, params[]) {
	ShowDialog(playerid, D_HELP,DIALOG_STYLE_LIST,"[RP]GrandWorld: Помощь", "list/help.lst", "ВЫБРАТЬ", "Закрыть");
	return 1;
}

CMD:ganginfo(playerid, params[]) { 
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY,  "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY,  "Введите: /ganginfo [fracid]");
	for(new g; g < sizeof(GangInfo); g++) {
		if(GangInfo[g][fID] == params[0]) {
			DestroyDynamic3DTextLabel(GangInfo[g][gText]);
			GetPlayerPos(playerid, GangInfo[g][gPosX], GangInfo[g][gPosY], GangInfo[g][gPosZ]);
			format(temp, sizeof(temp), "*** GANG INFO ***\n\n.::%s::.\nБизнесы: %d\nУважение: %d\n Банк: $%d\nЗахват с %d ранга",
			GetGangName(GangInfo[g][fID]), GangBiznes{GangInfo[g][fID]}, GangInfo[g][gRespect], GetFracMoney(GangInfo[g][fID]), GetZRank(GangInfo[g][fID]));
			GangInfo[g][gText] = Add3DText(temp, GetFracColor(GangInfo[g][fID]), GangInfo[g][gPosX], GangInfo[g][gPosY], GangInfo[g][gPosZ], 15.0);
			break;
		}
	}
	return 1;
}

CMD:setskill(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "udd", params[0], params[1], params[2])) {
		Send(playerid, COLOR_WHITE, "|__________________ Skill Info __________________|");
		Send(playerid, COLOR_GREY,  "| 1: Детектив      | 6: Репортер");
		Send(playerid, COLOR_GREY,  "| 2: Адвокат       | 7: Механник");
		Send(playerid, COLOR_GREY,  "| 3: Шлюха         | 8: Продователь тачек");
		Send(playerid, COLOR_GREY,  "| 4: Наркоторговец | 9: Боксер");
		Send(playerid, COLOR_GREY,  "| 5: Угонщик тачек | 10: Рыбак");
		Send(playerid, COLOR_WHITE, "|________________________________________________|");
		Send(playerid, COLOR_WHITE, "Введите: /setskill [playerid] [number] [уровень]");
		return 1;
	}
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не в игре!");
	if( params[2] < 1 || params[2] > 5 ) return Send(playerid, COLOR_GREY, "* Значение скилла может быть от 1 и до 5!");
	switch(params[1]) {
		case 1: {
			Pl::Info[params[0]][pDetSkill] = ( params[2] * 100 );
			format(string,sizeof string," Его скилл детектива теперь %d", Pl::Info[params[0]][pDetSkill]);
		}
		case 2: {
			Pl::Info[params[0]][pLawSkill] = ( params[2] * 100 );
			format(string,sizeof string," Его скилл адвоката теперь %d",Pl::Info[params[0]][pLawSkill]);
		}
		case 3: {
			Pl::Info[params[0]][pSexSkill] = ( params[2] * 100 );
			format(string,sizeof string," Его скилл шлюхи теперь %d",Pl::Info[params[0]][pSexSkill]);
		}
		case 4: {
			Pl::Info[params[0]][pDrugsSkill] = ( params[2] * 100 );
			format(string,sizeof string," Его скилл наркодиллера теперь %d",Pl::Info[params[0]][pDrugsSkill]);
		}
		case 5: {
			Pl::Info[params[0]][pJackSkill] = ( params[2] * 100 );
			format(string,sizeof string," Его скилл угонщика теперь %d",Pl::Info[params[0]][pJackSkill]);
		}
		case 6: {
			Pl::Info[params[0]][pMechSkill] = ( params[2] * 100 );
			format(string,sizeof string," Его скилл механника теперь %d",Pl::Info[params[0]][pMechSkill]);
		}
		case 7: {
			Pl::Info[params[0]][pNewsSkill] = ( params[2] * 100 );
			format(string,sizeof string," Его скилл репортера теперь %d",Pl::Info[params[0]][pNewsSkill]);
		}
		case 8: {
			Pl::Info[params[0]][pCarSkill] = ( params[2] * 100 );
			format(string,sizeof string," Его скилл продовальника тачек теперь %d",Pl::Info[params[0]][pCarSkill]);
		}
		default: format(string,sizeof string," Неверный ID скила!");
	}
	Send(playerid, COLOR_GREY, string);
	return 1;
}

CMD:skill(playerid, params[]) {
	ShowDialog(playerid, D_SKILL, DIALOG_STYLE_LIST, "[RP]GrandWorld: SKILL", "list/skill.lst", "Выбор","Отмена");
	return 1;
}

CMD:gl(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(GetFracID(playerid) != 11) return Send(playerid, COLOR_GREY, " Вы не лицензер.");
	if(Pl::Info[playerid][pRank] < 2) return Send(playerid, COLOR_GREY, "* Выдавть лицензии можно только с 2-го ранга!");
	if(sscanf(params, "s[15]u", params[1], params[0])) {
		Send(playerid, COLOR_WHITE, "Введите: /givelicense [license] [id/Name]");
		Send(playerid, COLOR_WHITE, "Доступные лицензии: Driving, Flying, Sailing, Weapon.");
		return 1;
	}
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD2, "* Этот игрок не залогинен!");
	if(!Pl::Info[params[0]][pPasport][0]) return Send(playerid, COLOR_GREY, "* У этого человека нет паспорта!");
	getname(playerid -> sendername,params[0] -> playername);
	
	if(strcmp(params[1], "driving", true) == 0) {
		AshQueue(playerid, 1);
		Pl::Info[params[0]][pTest] = 0;
		Pl::Info[params[0]][pCarLic] = 1;
		format(string, sizeof string, "* Вы дали водительские права %s.", playername);
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* Лицензер %s дал вам водительские права", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	} else {
		if(Pl::Info[playerid][pRank] > 2) {
			if(strcmp(params[1], "flying", true) == 0) {
				Pl::Info[params[0]][pFlyLic] = 1;
				format(string, sizeof string, "* Вы дали лицензию на полеты %s.", playername);
				Send(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof string, "* Лицензер %s дал вам лицензию на полеты.", sendername);
				Send(params[0], COLOR_LIGHTBLUE, string);
			}
			else if(strcmp(params[1], "sailing", true) == 0) {
				Pl::Info[params[0]][pBoatLic] = 1;
				format(string, sizeof string, "* Вы дали лицензию на лодку %s.", playername);
				Send(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof string, "* Лицензер %s дал лизензию на лодку.", sendername);
				Send(params[0], COLOR_LIGHTBLUE, string);
			}
			else if(strcmp(params[1], "weapon", true) == 0) {
				format(string, sizeof string, "* Вы дали ему лицензию на оружие %s.", playername);
				Send(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof string, "* Лицензер %s дал вам лицензию на оружие.", sendername);
				Send(params[0], COLOR_LIGHTBLUE, string);
				Pl::Info[params[0]][pGunLic] = 1;
			}
		} else {
			Send(playerid, COLOR_GREY, "* Вы можете выдавать только права!");
		}
	}
	return 1;
}

CMD:startlesson(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(GetFracID(playerid) != 11) return Send(playerid, COLOR_GREY, "Вы не Лицензер!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /startlesson [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(TakingLesson[params[0]]) return Send(playerid, COLOR_GREY, "* Урок уже начат!");
	TakingLesson[params[0]] = true;
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы начали урок у %s's", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Лицензер %s начал ваш урок по вождению", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:stoplesson(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(GetFracID(playerid) != 11) return Send(playerid, COLOR_GREY, "Вы не Лицензер!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /startlesson [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(!TakingLesson[params[0]]) return Send(playerid, COLOR_GREY, "* Урок не был начат!");
	TakingLesson[params[0]] = false;
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы закончели урок у %s's", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Лицензер %s закончил ваш урок по вождению", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:ram(playerid, params[]) {
	if(!IsACop(playerid) && !Pl::isAdmin(playerid, 4)) return Send(playerid, COLOR_GREY, "* Вы не законник!");
	for(new i = FIRST_HOUSE; i < TOTAL_HOUSES; i++) {
		if(IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEnterx], HouseInfo[i][hEntery], HouseInfo[i][hEnterz])) {
			Rac::SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
			Rac::SetPlayerInterior(playerid,HouseInfo[i][hInt]);
			Rac::SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
			Pl::Info[playerid][pLocal] = i;
		}
	}
	return 1;
}

CMD:fracs(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 4)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	Send(playerid, COLOR_WHITE, "________________________|FRAC|________________________");
	for(new i; i < sizeof FracID; i++) {
		format(string, sizeof string,
			"%i. %s [ Казна: $%i; Онлайн: %i ]",
			i+1,
			FracInfo[FracID[i]][fName],
			GetFracMoney(FracID[i]),
			Iter_Count(TeamPlayers[FracID[i]])
		);
		Send(playerid, GetFracColor(FracID[i]), string);
	}
	return 1;
}

CMD:fracbank(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 4)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /checkbank [fracid]");
	if(!(1 <= params[0] <= 20)) return Send(playerid, COLOR_GREY, "* Неверный ID фракции!");
	format(string, sizeof string, "* Банк %s состовляет: $%i", FracInfo[params[0]][fName], GetFracMoney(params[0]));
	Send(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:checktax(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pLeader] != 7) return Send(playerid, COLOR_GREY, "* Вы не мэр!");
	format(string, sizeof string, "* Государственный бюджет состовляет: %i$", GetFracMoney(7));
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:settax(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pLeader] != 7) return Send(playerid, COLOR_GREY, "* Вы не мэр!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /settax [ammount]");
	if(params[0] < 1 || params[0] > 20) return Send(playerid, COLOR_GREY, "* Налог, возможен, от 1 и до 20 процентов!");
	StuffInfo[sTaxValue] = params[0];
	SaveStuff();
	format(string, sizeof string, "* Наложен налог - %i процентов от зарплаты, на каждего жителя штата.", StuffInfo[sTaxValue]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:spawnchange(playerid, params[]) { new string[144];
	if(!IsValidHouse(Pl::Info[playerid][pHouseKey])) return Send(playerid, COLOR_GREY, "У Вас нет дома или вы не арендуете");
	SpawnChange[playerid] = !SpawnChange[playerid];
	Pl::setSpawnInfo(playerid);
	format(string, sizeof string, "* Вы теперь будете спавнится %s", (SpawnChange[playerid])?("на респавне своей фракции!"):("в своем или арендованном доме!"));
	Send(playerid, COLOR_GREY, string);
	return 1;
}

CMD:report(playerid, params[]) { new string[144], sendername[24];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(sscanf(params, "s[90]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /report [текст]");
	if(Pl::Info[playerid][pReport] > 0) return Send(playerid, COLOR_LIGHTRED, "* Не флуди!");
	Pl::Info[playerid][pReport] = 280;
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "*Жалоба от %s[%d]: %s", sendername, playerid, params[0]);
	SendToAdmin(COLOR_LIGHTRED, string , 1, 2);
	Send(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:spawn(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GREY, "Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /spawn [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /spawn к игроку %s[%s]", sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 3, 3); Rac::SpawnPlayer(params[0]);
	
	return 1;
}

CMD:forceskin(playerid, params[]) {
	if(!Pl::isAdmin(playerid, 2)) return Send(playerid, COLOR_GREY, "Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /forceskin [id/Name]");
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	
	new bidx = GetBizIndex(7); Rac::SetPlayerInterior(params[0], 3);
	Rac::SetPlayerVirtualWorld(params[0], BizzInfo[bidx][bVirtual]);
	Pl::Info[params[0]][pLocal] = ( bidx * 99 );
	Rac::SetPlayerPos(params[0], 207.4872,-129.2266,1003.5078);
	skin::goto( GetFracID(params[0]), skin::first, SelectCharPlace[params[0]], ChosenSkin[params[0]]);
	SetPlayerSkin(params[0], ChosenSkin[params[0]]);
	ShowMenuForPlayer(ClothesMenu, params[0]);
	Rac::TogglePlayerControllable(params[0], 0);
	
	return 1;
}

CMD:take(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsACop(playerid) && GetFracID(playerid) != 11) return Send(playerid, COLOR_GREY, "* Недастаточно прав!");
	if(sscanf(params, "s[16]u", temp, params[0])) {
		Send(playerid, COLOR_WHITE, "|__________________ {0080ff}TAKE{ffffff} __________________|");
		Send(playerid, COLOR_WHITE, "* Используйте: /take [id] [name]");
		Send(playerid, COLOR_GREY, "*  Лицензии: drivinglic, flyinglic, sailinglic, weaponlic");
		if(GetFracID(playerid) != 11) {
			Send(playerid, COLOR_GREY, "*  Другое: drugs, maps, weapons.");
		}
		Send(playerid, COLOR_WHITE, "|_____________________________________________|");
		return 1;
	}
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GRAD2, "* Этот игрок не залогинен!");
	if(!IsPlayerInRangeOfPlayer(playerid, 5.0, params[0])) return Send(playerid, COLOR_GREY, "* Вы слишком долеко друг от друга!");
	getname(playerid -> sendername,params[0] -> playername);
	
	new xx[16];
	format(xx, 16, "%s", (IsACop(playerid))?("Офицер"):("Инструктор"));
	if(strcmp(temp,"drivinglic",true) == 0) {
		if(Pl::Info[params[0]][pCarLic] <= 0) return Send(playerid, COLOR_GREY, "* У игрока нет прав!");
		Pl::Info[params[0]][pCarLic] = 0;
		format(string, sizeof string, "* Вы лишили %s водительских прав **", playername);
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* %s %s лишил(а) вас водительских прав **", xx, sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	}
	else if(strcmp(temp,"flyinglic",true) == 0) {
		if(Pl::Info[params[0]][pFlyLic] <= 0) return Send(playerid, COLOR_GREY, "* У игрока нет лицензии пелота!");
		Pl::Info[params[0]][pFlyLic] = 0;
		format(string, sizeof string, "* Вы лишили %s лицензии на полёты **", playername);
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* %s %s лишил(а) вас лицензии на Полёты **", xx, sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	}
	else if(strcmp(temp,"sailinglic",true) == 0) {
		if(Pl::Info[params[0]][pBoatLic] <= 0) return Send(playerid, COLOR_GREY, "* У игрока нет лицензии на управление водным транспортом!");
		Pl::Info[params[0]][pBoatLic] = 0;
		format(string, sizeof string, "* Вы лишили %s лицензии на Водный Транспорт **", playername);
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* %s %s лишил(а) вас лицензии на Водный Транспорт **", xx, sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	}
	else if(strcmp(temp,"gunlic",true) == 0) {
		if(Pl::Info[params[0]][pGunLic] <= 0) return Send(playerid, COLOR_GREY, "* У игрока нет лицензии на оружия!");
		Pl::Info[params[0]][pGunLic] = 0;
		format(string, sizeof string, "* Вы лишили %s лицензии на Нашение оружия **", playername);
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* %s %s лишил(а) вас лицензии на Нашение оружия **", xx, sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
	} else if(GetFracID(playerid) != 11) {
		if(strcmp(temp,"drugs",true) == 0) {
			if(Pl::Info[params[0]][pDrugs] <= 0) return Send(playerid, COLOR_GREY, "* У игрока нет наркотиков!");
			Pl::Info[params[0]][pDrugs] = 0;
			format(string, sizeof string, "* Вы конфисковали у %s наркотические вещества **", playername);
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* %s %s конфисковал(а) ваши наркотики **", xx, sendername);
			Send(params[0], COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(temp,"mats",true) == 0) {
			if(Pl::Info[params[0]][pMats] <= 0) return Send(playerid, COLOR_GREY, "* У игрока нет материалов!");
			Pl::Info[params[0]][pMats] = 0;
			format(string, sizeof string, "* Вы конфисковали у %s его материалы **", playername);
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* %s %s конфисковал(а) ваши материалы **", xx, sendername);
			Send(params[0], COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(temp,"weapons",true) == 0) {
			Rac::ResetPlayerWeapons(params[0]);
			format(string, sizeof string, "* Вы конфисковали у %s его оружие **", playername);
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* %s %s конфисковал(а) ваше оружие **", xx, sendername);
			Send(params[0], COLOR_LIGHTBLUE, string);
		} else {
			Send(playerid, COLOR_WHITE, "|__________________ {0080ff}TAKE{ffffff} __________________|");
			Send(playerid, COLOR_WHITE, "* Используйте: /take [id] [name]");
			Send(playerid, COLOR_GREY, "*  Лицензии: drivinglic, flyinglic, sailinglic, gunlic");
			Send(playerid, COLOR_GREY, "*  Другое: drugs, maps, weapons.");
			Send(playerid, COLOR_WHITE, "|_____________________________________________|");
		}
	} else {
		Send(playerid, COLOR_WHITE, "|__________________ {0080ff}TAKE{ffffff} __________________|");
		Send(playerid, COLOR_WHITE, "* Используйте: /take [id] [name]");
		Send(playerid, COLOR_GREY, "*  Лицензии: drivinglic, flyinglic, sailinglic, weaponlic");
		Send(playerid, COLOR_WHITE, "|_____________________________________________|");
	}
	return 1;
}

CMD:music(playerid, params[]) {
	if(Pl::Info[playerid][pCDPlayer] <= 0) return Send(playerid, COLOR_GREY, "* У Вас нет CD-плейера!");
	clear(dialog);
	for(new i; i < sizeof(RadioInfo); i++) {
		scf(dialog, temp, "• %s\n", RadioInfo[i][rName]);
	}
	return SPD(playerid, D_RADIO+1, DIALOG_STYLE_LIST, "FM Player", dialog, "Выбор", "Отмена");
}

CMD:service(playerid, params[]) {
	SPD(playerid, D_SERVICE, DIALOG_STYLE_LIST, "[RP]GrandWorld: SERVICE", "Такси\nМедик\nМеханик", "Выбор", "Отмена");
	return true;
}

CMD:tie(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsAMafia(playerid) && !IsAGang(playerid) && GetFracID(playerid) != 8) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(Pl::Info[playerid][pRank] < 3) return Send(playerid, COLOR_GREY, "* Ваш ранг должен быть не меньше 3-го!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /tie [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете связать себя!");
	if(!IsPlayerInVehiclePlayer(playerid, params[0])) return Send(playerid, COLOR_GREY, "* Вы должны быть в одной машине!");
	if(!IsPlayerInRangeOfPlayer(playerid, 4.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок слишком далеко от вас!");
	if(PlayerTied[params[0]]) return Send(playerid, COLOR_GREY, "* Этот игрок уже связан!");

	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы были связаны %s.", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы связали %s.", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s связывает %s.", sendername, playername);
	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Rac::TogglePlayerControllable(params[0], 0); PlayerTied[params[0]] = true;
	GameTextForPlayer(params[0], "~r~Tied", 3000, 3);
	
	return 1;
}

CMD:untie(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsAMafia(playerid) && !IsAGang(playerid) && GetFracID(playerid) != 8) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(Pl::Info[playerid][pRank] < 3) return Send(playerid, COLOR_GREY, "* Ваш ранг должен быть не меньше 3-го!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /untie [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете развязать себя!");
	if(!PlayerTied[params[0]]) return Send(playerid, COLOR_GREY, "* Этот игрок не связан!");
	if(!IsPlayerInVehiclePlayer(playerid, params[0])) return Send(playerid, COLOR_GREY, "* Вы должны быть в одной машине!");
	if(!IsPlayerInRangeOfPlayer(playerid, 5.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок слишком далеко от вас!");
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы были развязаны %s.", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы развязанны %s.", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s развязал %s", sendername, playername);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Rac::TogglePlayerControllable(params[0], 1); PlayerTied[params[0]] = false;
	GameTextForPlayer(params[0], "~g~Untied", 3000, 3);
	
	return 1;
}

CMD:muted(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsAMafia(playerid) && IsAGang(playerid) && GetFracID(playerid) != 8) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(Pl::Info[playerid][pRank] < 3) return Send(playerid, COLOR_GREY, "* Ваш ранг должен быть не меньше 3-го!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /muted [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Любите садомазо??? Но здесь таким заниматься к сожалению нельзя...!");
	if(!PlayerTied[params[0]]) return Send(playerid, COLOR_GREY, "* Игрок не связан!");
	if(Gag[params[0]]) return Send(playerid, COLOR_GREY, "* У этого игрока уже есть кляп во рту!");
	if(!IsPlayerInRangeOfPlayer(playerid, 8.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок слишком далеко от вас!");
	if(!IsPlayerInVehiclePlayer(playerid, params[0])) return Send(playerid, COLOR_GREY, "* Вы должны быть в одной машине!");
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* %s запихнул вам кляп в рот", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы запихнули кляп в рот %s.", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s запихивает кляп в рот %s", sendername, playername);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Gag[params[0]]=true; GameTextForPlayer(params[0], "~r~Muted", 30000, 3);
	
	return 1;
}

CMD:unmuted(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsAMafia(playerid) && IsAGang(playerid) && GetFracID(playerid) != 8) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(Pl::Info[playerid][pRank] < 3) return Send(playerid, COLOR_GREY, "* Ваш ранг должен быть не меньше 3-го!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /muted [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Любите садомазо??? Но здесь таким заниматься к сожалению нельзя...!");
	if(!PlayerTied[params[0]]) return Send(playerid, COLOR_GREY, "* Игрок не связан!");
	if(!Gag[params[0]]) return Send(playerid, COLOR_GREY, "* У этого игрока нет кляпа во рту!");
	if(!IsPlayerInVehiclePlayer(playerid, params[0])) return Send(playerid, COLOR_GREY, "* Вы должны быть в одной машине!");
	if(!IsPlayerInRangeOfPlayer(playerid, 8.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок слишком далеко от вас!");
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* %s вытащил из вашего рта кляп", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы вытащили кляп изо рта %s.", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s вытаскивает кляп изо рта %s ", sendername, playername);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Gag[params[0]]=false; GameTextForPlayer(params[0], "~g~Unmuted", 3000, 3);

	return 1;
}

CMD:towcar(playerid, params[]) { new string[144];
	new house = Pl::Info[playerid][pHouseKey];
	if(!IsValidHouse(house)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
	if(strcmp(GetName(playerid), HouseInfo[house][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* Вы не владеете домом!");
	new bidx = GetBizIndex(43);
	if(BizzInfo[bidx][bProducts] == 0) return GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
	if(Rac::GetPlayerMoney(playerid) < BizzInfo[bidx][bEntranceCost]) return Send(playerid, COLOR_GREY, "* У Вас нет столько денег!");
	if(GetVehiclePassengers(HouseInfo[house][hAuto])) return GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 1);
	
	SetVehicleToRespawn(HouseInfo[house][hAuto]);
	Rac::GivePlayerMoney(playerid,-BizzInfo[bidx][bEntranceCost]);
	BizzInfo[bidx][bTill] += BizzInfo[bidx][bEntranceCost];
	BizzInfo[bidx][bProducts]--; PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "~w~Car~n~~g~Towed Home~n~~r~-$%d", BizzInfo[bidx][bEntranceCost]);
	GameTextForPlayer(playerid, string, 5000, 1);
	
	return 1;
}

CMD:fare(playerid, params[]) { new string[144];
	if(GetFracID(playerid) != 10 && Pl::Info[playerid][pJob] != 9) return Send(playerid,COLOR_GREY,"* Вы не Таксист / Водетель Автобуса!");
	new Veh = GetPlayerVehicleID(playerid);
	if(TransportDuty[playerid] > 0) {
		TaxiDrivers -= 1;
		TransportDuty[playerid] = 0;
		DestroyDynamic3DTextLabel(AttachText[Veh]);
		format(string, sizeof string, "* Вы заработали $%d", TransportMoney[playerid]);
		Send(playerid, COLOR_LIGHTBLUE, string); Rac::GivePlayerMoney(playerid, TransportMoney[playerid]);
		TransportValue[playerid] = 0;
		TransportMoney[playerid] = 0;
	}
	else if(IsATaxiCar(Veh)) {
		if(GetPlayerState(playerid) != 2) return Send(playerid, COLOR_GREY, "* Вы не водитель!");
		if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_WHITE, "Введите: /fare [price]");
		if(params[0] < 1 || params[0] > 1000) return Send(playerid, COLOR_GREY, " * Плата не должна быть меньше $1 и не должна превышать $1000!");
		TaxiDrivers += 1;
		TransportDuty[playerid] = 1;
		TransportValue[playerid] = params[0];
		GetPlayerName(playerid, plname, 24);
		DestroyDynamic3DTextLabel(AttachText[Veh]);
		format(string, sizeof string, ">> S.A.T.C.C <<\nЗа рулем: %s\nТариф: $%d", plname, TransportValue[playerid]);
		AttachText[Veh] = Add3DText(string, COLOR_TAXI_PRICE, 0.0, 0.0, 1.3, 20.0, INVALID_PLAYER_ID, Veh, 0, 0, 0, -1);
	}
	else if(IsABusCar(Veh)) {
		if(GetPlayerState(playerid) != 2) return Send(playerid, COLOR_GREY, "* Вы не водитель!");
		if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_WHITE, "Введите: /fare [price]");
		if(params[0] < 1 || params[0] > 1000) return Send(playerid, COLOR_GREY, " * Плата не должна быть меньше $1 и не должна превышать $1000!");
		BusDrivers += 1;
		TransportDuty[playerid] = 2;
		TransportValue[playerid] = params[0];
		DestroyDynamic3DTextLabel(AttachText[Veh]);
		
		dialog[0]='\0';
		for(new i; i < sizeof BusRoute; i++) {
			scf(dialog, string, "%s - %s\n", BusRouteStopName[BusRoute[i][0][stopID]], BusRouteStopName[BusRoute[i][BusRouteCount[i]-1][stopID]]);
		}
		SPD(playerid, D_FARE, DIALOG_STYLE_LIST, "Выбирете маршрут", dialog, "SELECT", "CANCEL");
	}
	return 1;
}

CMD:licenses(playerid, params[]) { new string[144];
	static const lic[][] = { "Отсутствует", "Имеются" };
	Send(playerid, COLOR_WHITE, "|__________________ Licenses __________________|");
	sendf(playerid, string, COLOR_GREY, "** Водительские права: *%s.", lic[Pl::Info[playerid][pCarLic]]);
	sendf(playerid, string, COLOR_GREY, "** Лицензия на полеты в штате: *%s.", lic[Pl::Info[playerid][pFlyLic]]);
	sendf(playerid, string, COLOR_GREY, "** Лицензия на морской транспорт: *%s.", lic[Pl::Info[playerid][pBoatLic]]);
	sendf(playerid, string, COLOR_GREY, "** Лицензия на оружие: *%s.", lic[Pl::Info[playerid][pGunLic]]);
	Send(playerid, COLOR_WHITE, "|______________________________________________|");
	return 1;
}

CMD:sl(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_WHITE, "Введите: /sl [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете показать лицензии себе. Используйте: /licenses!");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid, COLOR_GREY, "* Игрок не около вас!");
	static const lic[][] = { "Отсутствует", "Имеются" };
	getname(playerid -> sendername, params[0] -> playername);
	sendf(params[0], string, COLOR_WHITE, "|__________ Лицензии %s __________|", sendername);
	sendf(params[0], string, COLOR_GREY, "** Водительские права: *%s.", lic[Pl::Info[playerid][pCarLic]]);
	sendf(params[0], string, COLOR_GREY, "** Лицензия на полеты в штате: *%s.", lic[Pl::Info[playerid][pFlyLic]]);
	sendf(params[0], string, COLOR_GREY, "** Лицензия на морской транспорт: *%s.", lic[Pl::Info[playerid][pBoatLic]]);
	sendf(params[0], string, COLOR_GREY, "** Лицензия на оружие: *%s.", lic[Pl::Info[playerid][pGunLic]]);
	sendf(params[0], string, COLOR_LIGHTBLUE, "* %s показал(а) вам свои лицензии.", sendername);
	sendf(playerid,  string, COLOR_LIGHTBLUE, "* Вы показали свои лицензии %s.", playername);
	return 1;
}

CMD:pas(playerid, params[]) { new string[144];
	if(!Pl::Info[playerid][pPasport][0]) return Send(playerid, COLOR_GREY, "* У Вас нет паспорта!");
	if(sscanf(params, "u", params[0])) return ShowPass(playerid, playerid, D_NONE);
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не рядом с вами!");
	ShowPass(playerid, params[0], D_NONE);
	if(playerid != params[0]) {
		format(string, sizeof string, "* %s показал свой паспорт вам.", GetName(playerid));
		Send(params[0], COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:frisk(playerid, params[]) { new string[144];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_WHITE, "Введите: /frisk [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "Вы не можете Обыскать себя!");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не около Вас!");
	new text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[30];
	if(Pl::Info[params[0]][pDrugs] > 0) { text1 = "| Наркотики"; } else { text1 = "| Пустой Карман"; }
	if(Pl::Info[params[0]][pMats] > 0) { text2 = "| Материалы"; } else { text2 = "| Пустой Карман"; }
	if(Pl::Info[params[0]][pPhoneBook] > 0) { text4 = "| Телефонная книга"; } else { text4 = "| Пустой Карман"; }
	if(Pl::Info[params[0]][pCDPlayer] > 0) { text5 = "| CD-плейер"; } else { text5 = "| Пустой Карман"; }
	format(string, sizeof string, "__________ Карманы %s __________", GetName(params[0]));
	Send(playerid, COLOR_WHITE, string);
	format(string, sizeof string, "%s %s", text1, text2);
	Send(playerid, COLOR_GREY, string);
	format(string, sizeof string, "%s %s", text3, text4);
	Send(playerid, COLOR_GREY, string);
	format(string, sizeof string, "%s %s", text5, text6);
	Send(playerid, COLOR_GREY, string);
	format(string, sizeof string, "%s | Наличные: %d$", text7, Rac::GetPlayerMoney(params[0]));
	Send(playerid, COLOR_GREY, string);
	new or, pat, WeapName[40];
	for(new i = 0; i < 12; i++) {
		GetPlayerWeaponData(params[0], i, or, pat);
		if(or != 0) {
			GetWeaponName(or,WeapName,sizeof(WeapName));
			format(string,sizeof string,"* Оружие %s | Патроны: %d",WeapName,pat);
			Send(playerid, COLOR_GREY, string);
		}
	}
	format(string, sizeof string, "* %s обыскал %s ", GetName(playerid), GetName(params[0]));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:sellcar(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pJob] != 8) return Send(playerid,COLOR_GREY,"* Вы не Агент по продаже легковых автомобилей!");
	if(!IsPlayerInAnyVehicle(playerid)) return Send(playerid,COLOR_GREY,"* Вы не находитесь в атомобиле!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /sellvcar [playerid] [price]");
	if(params[1] < 1 || params[1] > 99999) return Send(playerid, COLOR_GREY, "* Цена не ниже 1$ и не выше 99999$ !");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете продать себе автомобиль!");
	if(!IsPlayerInRangeOfPlayer(playerid, 5.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок слишком далеко от вас!");
	if(CarCalls[params[0]] > 0) return Send(playerid, COLOR_GREY, "* Этот игрок уже купил автомобиль, он должен использовать /callcar сначала !");
	format(string, sizeof string, "* Вы собираетесь продавать %s игроку машину за $%d .", GetName(params[0]), params[1]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Агент по продаже легковых автомобилей %s хочет продать Вам свой автомобиль за $%d, (тип /accept car) покупка.", GetName(playerid), params[1]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	CarOffer[params[0]] = playerid;
	CarPrice[params[0]] = params[1];
	CarID[params[0]] = GetPlayerVehicleID(playerid);
	return 1;
}

CMD:mats(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pJob] != 7) return Send(playerid, COLOR_GREY, "* Вы не гандилер!");
	if(sscanf(params, "s[10]I(0)", temp, params[0])) {
		Send(playerid, COLOR_WHITE, "Введите: /mats [name]");
		Send(playerid, COLOR_WHITE, "* Доступные названия: Get, Deliver.");
	} else {
		if(strcmp(temp, "get", false) == 0) {
			if(params[0] < 1 || params[0] > 10) return Send(playerid, COLOR_GREY, "* Число Пакета не может быть ниже 1 или выше 10!");
			if(!IsPlayerInRangeOfPoint(playerid,3.0,597.3430,-1248.6998,18.2804)) return Send(playerid, COLOR_GREY, "* Вы не в Здании Пакетов Материалов в Лос Сантусе!");
			if(MatsHolding[playerid] >= 10) return Send(playerid, COLOR_GREY, "* Максимум можно взять 10 пакетов!");
			new price = (params[0] * 100);
			if(Rac::GetPlayerMoney(playerid) < price) return Send(playerid, COLOR_GREY, "* У Вас не хватает денеег!");
			new bidx = GetBizIndex(47);
			Rac::GivePlayerMoney(playerid, -price);
			MatsHolding[playerid] = params[0];
			BizzInfo[bidx][bTill] += price+1000;
			format(string, sizeof string, "* Вы купили %d пакетов материалов за $%d.", params[0], price);
			Send(playerid, COLOR_LIGHTBLUE, string);
		
		} else if(strcmp(temp, "deliver", false) == 0) {
			if(!IsPlayerInRangeOfPoint(playerid,3.0,-2115.7246,-78.0859,35.3203)) return Send(playerid, COLOR_GREY, "* Вы не на Фабрике материалов в Сан Фиеро!");
			if(MatsHolding[playerid] <= 0) return Send(playerid, COLOR_GREY, "* У Вас нет матов!");
			new bidx = GetBizIndex(47);
			new payout = (50 * MatsHolding[playerid]);
			if(BizzInfo[bidx][bProducts] < payout) return Send(playerid, COLOR_GREY, "* На фабрике в данный момент нет материалов!");
			format(string, sizeof string, "* Фабрика дала Вам %d материалов для ваших %d пакетов материалов.", payout, MatsHolding[playerid]);
			BizzInfo[bidx][bProducts] -= payout;
			Pl::Info[playerid][pMats] += payout;
			MatsHolding[playerid] = 0;
			Send(playerid, COLOR_LIGHTBLUE, string);
		
		} else {
			Send(playerid, COLOR_WHITE, "* Доступные названия: Get, Deliver.");
		}
	}
	return 1;
}

CMD:buymats(playerid, params[]) { new string[144];
	if(GetFracID(playerid) != 17) return Send(playerid, COLOR_GREY, "* Вы не можите покупать материалы!");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(tmpcar) != 482) return Send(playerid, COLOR_GREY, "* Этот транспорт не приднозначен для перивозки материалов!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Введите: /buymats [кол-во матов]");
	if(!IsPlayerInRangeOfPoint(playerid,25.0, 2801.3, -2356.3, 13.3)) return Send(playerid, COLOR_GREY, "* Вы не в доках Лос Сантоса!");
	if(!IsATruckrifa(tmpcar)) return Send(playerid, COLOR_GREY, "* Эта машина не предназначина для перевозки материалов!");
	if(AutoInfo[tmpcar][aMats] >= AutoInfo[tmpcar][aMaxMats]) return Send(playerid, COLOR_GREY, "* Эта машина перегружена!");
	if(GetPlayerState(playerid) != 2)
	{
		format(string, sizeof string, "* Материалы: %d/%d.", AutoInfo[tmpcar][aMats], AutoInfo[tmpcar][aMaxMats]);
		return Send(playerid, COLOR_LIGHTGREEN, string);
	}
	if(params[0] > 2000) return Send(playerid,COLOR_GREY,"* Больше 2000 материалов возить нельзя!");
	params[2] = params[0]*10;
	if(Rac::GetPlayerMoney(playerid) < params[2]) return Send(playerid,COLOR_GREY,"* У Вас нехватает денег!");
	if(AutoInfo[tmpcar][aMats]+params[0] > AutoInfo[tmpcar][aMaxMats]) return Send(playerid,COLOR_GREY,"* За один раз можно везти 2000 материалов!");
	AutoInfo[tmpcar][aMats] += params[0];
	format(string, sizeof string, "* Материалы: %d/%d.", AutoInfo[tmpcar][aMats], AutoInfo[tmpcar][aMaxMats]);
	Send(playerid, COLOR_GREEN, string);
	format(string, sizeof string, "* Вы взяли %d материалов за $%d.", AutoInfo[tmpcar][aMats], params[2]);
	Send(playerid, COLOR_GREEN, string); Rac::GivePlayerMoney(playerid,-params[2]); PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}

CMD:sellmats(playerid, params[]) { new string[144];
	if(GetFracID(playerid) != 17) return Send(playerid, COLOR_GREY, "* Вы не можите продавать материалы!");
	if(!IsPlayerInRangeOfPoint(playerid,25.0,-2115.4,-175.8,35.3)) return Send(playerid, COLOR_GREY, "* Вы  не в месте продажи материалов!");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) != 2) return Send(playerid,COLOR_LIGHTRED2,"* Вы не водитель!");
	if(AutoInfo[tmpcar][aMats] <= 0) return Send(playerid,COLOR_LIGHTRED2,"* В вашей машине нету материалов!");
	new bidx = GetBizIndex(47);
	if(BizzInfo[bidx][bProducts] >= BizzInfo[bidx][bMaxProducts]) return Send(playerid, COLOR_GREY, "* Фабрика переполнена!");
	new cash = AutoInfo[tmpcar][aMats]*17;
	BizzInfo[bidx][bProducts] += AutoInfo[tmpcar][aMats];
	format(string, sizeof string, "* Вы продали %d материалов фабрике за $%d", AutoInfo[tmpcar][aMats], cash);
	Send(playerid, COLOR_GREEN, string);
	Rac::GivePlayerMoney(playerid, cash);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	AutoInfo[tmpcar][aMats] = 0;
	return 1;
}

CMD:buyprods(playerid, params[]) { new string[144];
	if(sscanf(params, "i", params[0])) {
		Send(playerid, COLOR_GREY, "Введите: /buyprods [amount]");
	} else {
		if(params[0] < 1 || params[0] > 150) {
			Send(playerid, COLOR_GREY, "* Нельзя купить меньше 1-го продукта или более 150-ти");
		} else {
			new vehid = GetPlayerVehicleID(playerid);
			if(vehid && GetPlayerState(playerid) == 2) {
				if(IsACompTruck(vehid)) {
					if(PlayerHaul[vehid-comptruck[0]][pLoad] < PlayerHaul[vehid-comptruck[0]][pCapasity]) {
						for(new i; i < TOTAL_BIZZ; i++) {
							if(IsPlayerInSquare2D(playerid, 50.0, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], 0)) {
								if(BizzInfo[i][bID] == 56 || BizzInfo[i][bID] == 74) {
									new check = PlayerHaul[vehid-comptruck[0]][pLoad] + params[0];
									if(check > PlayerHaul[vehid-comptruck[0]][pCapasity]) {
										Send(playerid, COLOR_GREY, "* Столько не влезит в грузовик!");
									} else {
										new cost = params[0]*50;
										if(Rac::GetPlayerMoney(playerid) >= cost) {
											PlayerHaul[vehid-comptruck[0]][pLoad] += params[0];
											format(string, sizeof string, "* Вы купили %d продуктов за $%d.", params[0], cost);
											Send(playerid, COLOR_GREEN, string);
											Rac::GivePlayerMoney(playerid,-cost);
											PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
										} else {
											format(string, sizeof string, "Вы не можете позволить себе %d продуктов за $%d!", params[0], cost);
											Send(playerid, COLOR_GREEN, string);
										}
									}
									return 1;
								}
							}
						}
					} else {
						Send(playerid,COLOR_GREY,"* Грузовик полон!");
					}
				} else {
					Send(playerid,COLOR_GREY,"* Вы должны быть в грузовике для развоза продуктов");
				}
			} else {
				Send(playerid,COLOR_GREY,"* Вы должны быть в грузовике для развоза продуктов");
			}
		}
	}
	return 1;
}

CMD:sellprods(playerid, params[]) { new string[144];
	new vehid = GetPlayerVehicleID(playerid);
	if(vehid && GetPlayerState(playerid) == 2) {
		if(IsACompTruck(vehid)) {
			if(PlayerHaul[vehid-comptruck[0]][pLoad] <= 0) {
				GameTextForPlayer(playerid, "~r~Truck is empty, return to the stock house", 5000, 1);
			} else {
				for(new i; i < TOTAL_BIZZ; i++) {
					if(IsPlayerInRangeOfPoint(playerid, 10.0, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ])) {
						if(BizzInfo[i][bID] != 56 && BizzInfo[i][bID] != 74 && BizzInfo[i][bID] != 47) {
							new cashmade;
							for(new l = PlayerHaul[vehid-comptruck[0]][pLoad]; l > 0; l--) {
								if(BizzInfo[i][bProducts] == BizzInfo[i][bMaxProducts]) {
									GameTextForPlayer(playerid, "~r~Our stores are full", 5000, 1);
									format(string, sizeof string, "Заработано: $%d.", cashmade);
									Send(playerid, COLOR_GREEN, string);
									PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
									return 1;
								}
								if(BizzInfo[i][bPriceProd] > BizzInfo[i][bTill]) {
									GameTextForPlayer(playerid, "~r~We Cant Afford The Deal", 5000, 1);
									format(string, sizeof string, "Заработано: $%d.", cashmade);
									Send(playerid, COLOR_GREEN, string);
									PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
									return 1;
								}
								BizzInfo[i][bProducts]++;
								PlayerHaul[vehid-comptruck[0]][pLoad]--;
								cashmade = cashmade+BizzInfo[i][bPriceProd];
								Rac::GivePlayerMoney(playerid,BizzInfo[i][bPriceProd]);
								BizzInfo[i][bTill] -= BizzInfo[i][bPriceProd];
								if(PlayerHaul[vehid-comptruck[0]][pLoad] == 0) {
									GameTextForPlayer(playerid, "~r~Truck is empty, return to the stock house", 5000, 1);
									format(string, sizeof string, "Заработано: $%d.", cashmade);
									Send(playerid, COLOR_GREEN, string);
									PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
									return 1;
								}
							}
						}
						return 1;
					}
				}
			}
		} else {
			Send(playerid,COLOR_GREY,"* Вы должны быть в грузовике для развоза продуктов");
		}
	} else {
		Send(playerid,COLOR_GREY,"* Вы должны быть в грузовике для развоза продуктов");
	}
	return 1;
}

CMD:loadmats(playerid, params[]) { new string[144];
	new bidx = GetBizIndex(47);
	format(string, sizeof string, "* На фабрике %i/%i материалов.",
	BizzInfo[bidx][bProducts], BizzInfo[bidx][bMaxProducts]);
	Send(playerid, COLOR_GREEN, string);
	return 1;
}

CMD:loadmac(playerid, params[]) { new string[144];
	if(!isPlayerInPickup(playerid,barn[0])) return Send(playerid,COLOR_LIGHTRED2,"* Вы не у амбара!");
	format(string, sizeof string, "* В амбаре %d грамм", StuffInfo[sADrugs]);
	Send(playerid,COLOR_LIGHTBLUE,string);
	format(string, sizeof string, "* В притоне %d грамм", StuffInfo[sPDrugs]);
	Send(playerid,COLOR_LIGHTBLUE,string);
	
	return 1;
}

CMD:sellgun(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(Pl::Info[playerid][pJob] != 7) return Send(playerid,COLOR_GREY,"* Вы не Гандилер!");
	if(sscanf(params, "s[15]u", temp, params[0])) {
		return ShowDialog(playerid, D_NONE, 0, "• SellGun • Info", "dialog/sellgun.lst", "OK", "");
	}
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsPlayerInRangeOfPlayer(playerid, 5.0, params[0])) return Send(playerid, COLOR_GREY, "* Вы долеко от этого игрока!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете продать оружие себе!");
	new weapon, ammo, price;
	getname(playerid->sendername,params[0]->playername);
	if(!GetGunInfo(temp, weapon, ammo, price)) return Send(playerid,COLOR_GREY,"* Недействительное название оружия!");
	if(price > Pl::Info[playerid][pMats]) return Send(playerid,COLOR_GREY,"* Недостаточно материалов для этого оружия!");
	Rac::GivePlayerWeapon(params[0], weapon, ammo);
	Pl::Info[playerid][pMats] -= price;
	
	format(string, sizeof string, "* Вы дали %s, %s с %i боеприпасами, для %i материалов.", playername, temp, ammo, price);
	Send(playerid, COLOR_GREY, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "* Вы получили %s с %i боеприпасами от %s.", temp, ammo, sendername);
	Send(params[0], COLOR_GREY, string);
	PlayerPlaySound(params[0], 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "* %s взял оружие из материалов, и передал в руки %s.", sendername, playername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	
	return 1;
}

CMD:get(playerid, params[]) { new string[144];
	if(sscanf(params, "s[16]I(0)", params[1], params[0])) {
		Send(playerid, COLOR_WHITE, "__________________ {0080ff}Получить{ffffff} __________________");
		Send(playerid, COLOR_GREY, "Введите: /get [name]");
		Send(playerid, COLOR_GREY, " Доступные названия: Drugs, Fuel");
	} else {
		if(strcmp(params[1], "drugs", false) == 0) {
			if(Pl::Info[playerid][pJob] != 4) return Send(playerid, COLOR_GREY, "* Вы не наркодилер!");
			if(Pl::Info[playerid][pDrugs] > 15) return Send(playerid, COLOR_GREY, "* У Вас уже есть наркотики, продаете их сначала!");
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 323.0342,1118.5804,1083.8828)) return Send(playerid, COLOR_GREY, "* Вы не в притоне!");
			if((StuffInfo[sPDrugs] - params[0]) < 0) return Send(playerid, COLOR_GREY,"* В притоне нехватает наркотиков.");
			new tel, price;
			switch(Pl::Info[playerid][pDrugsSkill]) {
				case 0..50 : {
					tel = 200;
					if(params[0] < 1 || params[0] > 6) return Send(playerid, COLOR_GREY, "* Вы можете с собой носить от 1 до 6 граммов наркотиков");
				}
				case 51..100 : {
					tel = 150;
					if(params[0] < 1 || params[0] > 12) return Send(playerid, COLOR_GREY, "* Вы можете с собой носить от 1 до 12 граммов наркотиков!");
				}
				case 101..200 : {
					tel = 100;
					if(params[0] < 1 || params[0] > 20) return Send(playerid, COLOR_GREY, "* Вы можете с собой носить от 1 до 20 граммов наркотиков");
				}
				case 201..400 : {
					tel = 50;
					if(params[0] < 1 || params[0] > 30) return Send(playerid, COLOR_GREY, "* Вы можете с собой носить от 1 до 30 граммов наркотиков");
				}
				case 401 : {
					tel = 10;
					if(params[0] < 1 || params[0] > 99) return Send(playerid, COLOR_GREY, "* Вы можете с собой носить от 1 до 99 граммов наркотиков");
				
				}
			}
			price = ( params[0] * tel );
			if(Rac::GetPlayerMoney(playerid) < price) return Send(playerid, COLOR_GREY, "* У Вас нехватает денег");
			format(string, sizeof string, "* Вы купили %d грамм за $%d.", params[0], price);
			Send(playerid, COLOR_LIGHTBLUE, string);
			Rac::GivePlayerMoney(playerid, -price);
			Pl::Info[playerid][pDrugs] = Pl::Info[playerid][pDrugs] + params[0];
			StuffInfo[sPDrugs] -= params[0];
			
		} else if(strcmp(params[1], "fuel", false) == 0) {
			if(!IsAtGasStation(playerid)) return Send(playerid,COLOR_GREY,"* Вы не около бензоколонки!");
			if(Rac::GetPlayerMoney(playerid) < 40) return Send(playerid,COLOR_GREY,"* У Вас не хватает денег!");
			new bidx = GetBizIndex(72);
			if(BizzInfo[bidx][bProducts] <= 0) return GameTextForPlayer(playerid, "~r~Out of stock", 5000, 1);
			BizzInfo[bidx][bProducts]--;
			BizzInfo[bidx][bTill] += 40;
			Pl::Info[playerid][pFuel] = 20;
			Rac::GivePlayerMoney(playerid, -40);
			Send(playerid, COLOR_LIGHTBLUE, "* Вы взяли 20 литровую канистру бензина за $40");
		} else {
			Send(playerid, COLOR_WHITE, "__________________ {0080ff}Получить{ffffff} __________________");
			Send(playerid, COLOR_GREY, "Введите: /get [name]");
			Send(playerid, COLOR_GREY, " Доступные названия: Drugs, Fuel");
		}
	}
	return 1;
}

CMD:fill(playerid, params[]) {
	if(!IsAtGasStation(playerid)) return Send(playerid,COLOR_GREY,"* Вы не на бензоколонке!");
	new vehid = GetPlayerVehicleID(playerid);
	if(!vehid) return Send(playerid,COLOR_GREY,"* Вы не в транспорте!");
	if(GetVehicleType(GetVehicleModel(vehid)) == VEHICLE_TYPE_VELLO) return Send(playerid,COLOR_GREY,"* Вы не можете заправить велосипед!");
	if(isEngined{vehid}) return Send(playerid,COLOR_GREY,"* Сначало заглушите двигатель!");
	if(BizzInfo[GetBizIndex(72)][bProducts] <= 0) return GameTextForPlayer(playerid, "~r~Out of stock", 5000, 1);
	SetCameraBehindPlayer(playerid);
	SPD(playerid, D_REFILL, DIALOG_STYLE_INPUT, "Автозапрвака", "Введите количество литов.\nСтоимость: $20/1л", "ENTER", "CENCEL");
	return 1;
}

CMD:fillcar(playerid, params[]) {
	if(Pl::Info[playerid][pFuel] <= 0) return Send(playerid, COLOR_GREY, "* У Вас нет конистры с бензином!");
	if(Benzin{gLastCar[playerid]} > 81) return Send(playerid, COLOR_GREY, "* Ваш Автомобиль заправлен, удачного пути!");
	Send(playerid, COLOR_LIGHTBLUE, "Вы заполнили ваш автомобиль на 20 процентов");
	Benzin{gLastCar[playerid]} += 20;
	Pl::Info[playerid][pFuel] = 0;
	return 1;
}

CMD:houseenter(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "* Введите: /houseenter [houseid]");
	if(params[0] > TOTAL_HOUSES ||  params[0] < 0) return Send(playerid,COLOR_RED,"* Неверный ид дома");
	GetPlayerPos(playerid, HouseInfo[params[0]][hEnterx], HouseInfo[params[0]][hEntery], HouseInfo[params[0]][hEnterz]);
	
	DestroyDynamicPickup(HouseInfo[params[0]][hPickup]); DestroyDynamicMapIcon(HouseInfo[params[0]][hMapIcon]);
	if(HouseInfo[params[0]][hOwned] == 1) {
		HouseInfo[params[0]][hPickup] = AddPickup(1318, 23, HouseInfo[params[0]][hEnterx], HouseInfo[params[0]][hEntery], HouseInfo[params[0]][hEnterz]);
		HouseInfo[params[0]][hMapIcon] = CreateDynamicMapIcon(HouseInfo[params[0]][hEnterx], HouseInfo[params[0]][hEntery], HouseInfo[params[0]][hEnterz],32,0,-1,-1,-1,350.0);
	} else {
		HouseInfo[params[0]][hPickup] = AddPickup(1273, 23, HouseInfo[params[0]][hEnterx], HouseInfo[params[0]][hEntery], HouseInfo[params[0]][hEnterz]);
		HouseInfo[params[0]][hMapIcon] = CreateDynamicMapIcon(HouseInfo[params[0]][hEnterx], HouseInfo[params[0]][hEntery], HouseInfo[params[0]][hEnterz],31,0,-1,-1,-1,350.0);
	}
	return 1;
}

CMD:houseexit(playerid, params[]) { new string[144];
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не залогинены!");
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "* Введите: /houseeexit [houseid]");
	if(!IsValidHouse(params[0])) return Send(playerid,COLOR_RED,"* Неверный ID дома");

	GetPlayerPos(playerid, posx, posy, posz);
	HouseInfo[params[0]][hExitx] = posx;
	HouseInfo[params[0]][hExity] = posy;
	HouseInfo[params[0]][hExitz] = posz;
	HouseInfo[params[0]][hInt] = GetPlayerInterior(playerid);
	format(string,sizeof string,"* Выход дома № %d был перенесен в %f , %f , %f координаты.", params[0], posx, posy, posz);
	Send(playerid,COLOR_YELLOW,string);
	return 1;
}

CMD:bizenter(playerid, params[]) { new string[144];
	if(!Pl::isLogged(playerid)) return Send(playerid, COLOR_GREY, "* Вы не залогинены!");
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "* Введите: /bizenter [bizid]");
	if(!IsValidBiz(params[0])) return Send(playerid,COLOR_WHITE,"* Неправильный id бизнеса!");

	new bidx = GetBizIndex(params[0]);
	GetPlayerPos(playerid, BizzInfo[bidx][bEnterX], BizzInfo[bidx][bEnterY], BizzInfo[bidx][bEnterZ]);

	// Пресоздаем гангзону
	Gz::Destroy(BizzInfo[bidx][bZone]);
	GetSquarePos(BizzInfo[bidx][bEnterX], BizzInfo[bidx][bEnterY], MAX_ZONE_SIZE, BizzInfo[bidx][bzMinX], BizzInfo[bidx][bzMinY], BizzInfo[bidx][bzMaxX], BizzInfo[bidx][bzMaxY]);
	BizzInfo[bidx][bZone] = Gz::Create(BizzInfo[bidx][bzMinX], BizzInfo[bidx][bzMinY], BizzInfo[bidx][bzMaxX], BizzInfo[bidx][bzMaxY]);
	Gz::ShowForAll(BizzInfo[bidx][bZone], GetFracColor(BizzInfo[bidx][bFrac]));

	// Пересоздаем пикап и иконку
	RefreshBizz(bidx); UpdateBizz(bidx);
	format(string,sizeof string,"* Вход в %d бизнес был перенесен!", BizzInfo[bidx][bID]);
	Send(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:bizexit(playerid, params[]) {
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "d", params[0])) return Send(playerid, COLOR_GREY, "Введите: /bizexit [id]!");
	for(new l; l < TOTAL_BIZZ; l++) {
		if(BizzInfo[l][bID] == params[0]) {
			GetPlayerPos(playerid, BizzInfo[l][bExitX], BizzInfo[l][bExitY], BizzInfo[l][bExitZ]);
			BizzInfo[l][bInterior] = GetPlayerInterior(playerid);
			DestroyDynamicPickup(BizzInfo[l][bPickupExit]);
			BizzInfo[l][bPickupExit] = AddPickup(1318, 23, BizzInfo[l][bExitX], BizzInfo[l][bExitY], BizzInfo[l][bExitZ], BizzInfo[l][bVirtual]);
			UpdateBizz(l); Send(playerid, COLOR_GREY, "* Пикап выхода из бизнеса был перенесен!");
			Rac::SetPlayerVirtualWorld(playerid, BizzInfo[l][bVirtual]); break;
		}
	}
	return 1;
}

CMD:bizgang(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "* Введите: /bizgang [gangid]");
	if(!IsAGangF(params[0])) return Send(playerid,COLOR_LIGHTRED,"Неправильный ид банды!");
	for(new i; i < TOTAL_BIZZ; i++) {
		if(IsPlayerInSquare2D(playerid, MAX_ZONE_SIZE, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], 0) && !BizzInfo[i][bOnBattle]) {
			GangBiznes{params[0]} ++;
			GangBiznes{BizzInfo[i][bFrac]} --;
			BizzInfo[i][bFrac] = params[0];
			Gz::StopFlashForAll(BizzInfo[i][bZone]);
			Gz::HideForAll(BizzInfo[i][bZone]);
			Gz::ShowForAll(BizzInfo[i][bZone], GetFracColor(params[0])); UpdateGI();
			
			format(string, sizeof string, "* Теперь бизнез будут крышивать %s.", GetGangName(params[0]));
			Send(playerid, COLOR_YELLOW, string);
			
			return 1;
		}
	}
	return 1;
}

CMD:zahvat(playerid, params[]) { new string[144], sendername[24];
	if(IsAGang(playerid) && GetPlayerState(playerid) == 1) {
		new frac = GetFracID(playerid);
		if(Pl::Info[playerid][pRank] < GetZRank(frac) && !IsPlayerLeader(playerid)) {
			format(string, sizeof string, "* Для захвата бизнеса вам нужен %i-й ранг!", GetZRank(frac));
			Send(playerid, COLOR_LIGHTRED, string);
		} else if(GangOnBattle{frac} != 255) {
			Send(playerid, COLOR_GREY, "* Ваша банда уже учавствует в захвате!");
		} else {
			new i = GetClosestBiz(playerid, 3.0);
			if(!IsValidBiz(i)) return Send(playerid, COLOR_GREY, "* Нет бизнесов поблизости!");
			if(BizzInfo[i][bOnBattle] == 1) return Send(playerid, COLOR_GREY, "* Бизнес уже атакован!");
			if(BizzInfo[i][bFrac] == frac) return Send(playerid, COLOR_GREY, "* Вы не можете захватывать свой бизнес!");
			if(GangOnBattle{BizzInfo[i][bFrac]} != 255) {
				format(string, sizeof string, "* Банда %s уже сражается за другой бизнес!", GetGangName(BizzInfo[i][bFrac]));
				Send(playerid, COLOR_GREY, string);
			} else {
				GangOnBattle{frac} = i;
				ZahvatKills{frac} = 0;
				ZahvatScore[frac] = 0;
				BizzInfo[i][bAttack] = frac;
				BizzInfo[i][bDefend] = BizzInfo[i][bFrac];
				BizzInfo[i][bOnBattle] = 1;
				BizzInfo[i][bZahvatTime] = 240;
				GangOnBattle{BizzInfo[i][bFrac]} = i;
				ZahvatKills{BizzInfo[i][bFrac]} = 0;
				ZahvatScore[BizzInfo[i][bFrac]] = 0;
				CreateZahvatTD(BizzInfo[i][bZahvatTD]);
				SetZahvatMapIcon(i, frac, BizzInfo[i][bFrac]);
				Gz::FlashForAll(BizzInfo[i][bZone], GetFracColor(frac));
				//Td::ShowForFrac(BizzInfo[i][bZahvatTD], BizzInfo[i][bAttack], BizzInfo[i][bDefend]);
				BizzInfo[i][bZahvatTimer] = SetTimerEx("onZahvatBizz", 900, true, "iii", i, frac, BizzInfo[i][bFrac]);
				
				GetPlayerName(playerid, sendername, 24);
				format(string, sizeof string,"[GANG NEWS] %s[%s] начал захват бизнеса %s, банды[%s]", sendername, GetGangName(frac), BizzInfo[i][bName], GetGangName(BizzInfo[i][bFrac]));
				sendToFamily(frac, GetFracColor(frac), string);
				format(string, sizeof string,"[GANG NEWS] Чужие псы напали на вашу территорию [%s], покажите им кто тут хозяин!", BizzInfo[i][bName]);
				sendToFamily(BizzInfo[i][bFrac], GetFracColor(BizzInfo[i][bFrac]), string);
			}
		}
	}
	return 1;
}

CMD:togpm(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 2) && Pl::Info[playerid][pVip] < 1 && IsPlayerLeader(playerid) <= 0) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	HidePM[playerid] = !HidePM[playerid];
	format(string, sizeof string, "* Личные сообщения %s!", (HidePM[playerid])?("отключены"):("включены"));
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:vopros(playerid, params[]) { new string[144], sendername[24];
	if(IsPMuted(playerid) || Pl::Info[playerid][pMuted] == 2) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(sscanf(params, "s[90]", params[0])) return Send(playerid, COLOR_GREY, "Введите: /вопрос [текст]");
	if(gettime() < VoprosTime[playerid]) return Send(playerid, COLOR_GREY, "* Не флуди!");
	VoprosTime[playerid] = gettime()+30;
	SetPVarInt(playerid, "AnsweredHelper", -1);
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "*Вопрос от %s[%d]: %s", sendername, playerid, params[0]);
	SendToHelper(0x10F441AA, string);
	Send(playerid, COLOR_LIGHTRED, string);
	Send(playerid, COLOR_YELLOW, "* Ваш вопрос отправлен хелперам!");
	return 1;
}

CMD:hduty(playerid, params[]) { new string[144], sendername[24];
	if(!IsPHelper(playerid, 1)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	HelperDuty[playerid] = !HelperDuty[playerid];
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "(( [H] Хелпер %s %s ))", sendername, (HelperDuty[playerid])?("ждет ваши вопросы! (/вопрос)"):("не активен."));
	SendToAll(COLOR_OOC,string);
	return 1;
}

CMD:ans(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(!IsPHelper(playerid, 1)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(!IsAHelperDuty(playerid)) return Send(playerid, COLOR_GREY, "* Вы не на дежурсиве!");
	if(sscanf(params, "us[90]", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /ans [id/Name] [ответ]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	new answerd = GetPVarInt(params[0], "AnsweredHelper");
	if(answerd == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Этот игрок не задавал вопросов!");
	if(answerd != -1 && answerd != playerid) return Send(playerid, COLOR_GREY, "* Этому игроку уже отвечает хелпер!");
	SetPVarInt(params[0], "AnsweredHelper", playerid);
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "*[H] %s ответил: %s", sendername, params[1]);
	Send(params[0], COLOR_ORANGE, string);
	format(string, sizeof string, "*[H] %s ответил %s[%d]: %s",sendername, playername, params[0], params[1]);
	SendToHelper(COLOR_ORANGE, string);
	return 1;
}

CMD:hc(playerid, params[]) { new string[144], sendername[24];
	if(IsPMuted(playerid)) return Send(playerid,COLOR_GREY,"* У Вас молчанка!");
	if(!IsPHelper(playerid, 1)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(!IsAHelperDuty(playerid)) return Send(playerid, COLOR_GREY, "* Вы не на дежурсиве!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GRAD1, "Введите: /hc [текст]");
	GetPlayerName(playerid, sendername, 24);
	format(string, sizeof string, "*%i %s %s: %s", Pl::Info[playerid][pHelper], GetHelperRank(Pl::Info[playerid][pHelper]), sendername, params);
	SendToHelper(COLOR_GREEN, string);
	return 1;
}

CMD:makehelper(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsPHelper(playerid, 3) && !Pl::isAdmin(playerid, 4)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GRAD1, "Введите: /makehelper [id] [lvl]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(params[1] < 0 || params[1] > 3) return Send(playerid, COLOR_GREY, "Не меньше '0' и не больше '3'.");
	if(params[1] == 0 && Pl::Info[params[0]][pHelper] > 0) Iter_Remove(HelperPlayers, params[0]);
	else if(Pl::Info[params[0]][pHelper] == 0 && params[1] > 0) Iter_Add(HelperPlayers, params[0]);
	getname(playerid -> sendername, params[0] -> playername);
	Pl::Info[params[0]][pHelper] = params[1];
	format(string, sizeof string, "You have been promoted to a level %d helper by %s.", params[1], sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "You are promoted %s to helper level %d.", playername, params[1]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:origin(playerid, params[]) {
	SPD(playerid, D_SPAWN, DIALOG_STYLE_LIST, "[RP]GrandWorld: ORIGIN", "Jefferson Motel\nRock Hotel", "SELECT", "CANCEL");
	return 1;
}

CMD:yopen(playerid, params[]) {
	if(!GateInfo[E_GATE_YAKUZA][E_GATE_STATUS] && GetFracID(playerid) == 6)
	{
		GateInfo[E_GATE_YAKUZA][E_GATE_STATUS] = 1;
		MoveDynamicObject(GateInfo[E_GATE_YAKUZA][E_GATE_OBJECT], 1524.80664062,2773.15625000,6.44526672,2.0);
		SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_YAKUZA][E_GATE_OBJECT]);
	}
	return 1;
}

CMD:hirecar(playerid, params[]) { new string[144];
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	new vehicle = ClosestVeh(playerid, 3.0);
	if(vehicle == INVALID_VEHICLE_ID) return Send(playerid, COLOR_GREY, "* С вами рядом нет машин!");
	HireCar[playerid] = vehicle;
	format(string, sizeof string, "* Вы сделали ключи для машины %i.", vehicle);
	Send(playerid, COLOR_GRAD4, string);
	Send(playerid, COLOR_WHITE, "* Используйте: /lock.");
	return 1;
}

CMD:unrentcar(playerid, params[]) {
	if(IsPlayerConnected(playerid)) {
		if(HireCar[playerid] != INVALID_VEHICLE_ID) {
			ToggleVehicleDoor(HireCar[playerid], true);
			HireCar[playerid] = INVALID_VEHICLE_ID;
			GameTextForPlayer(playerid, "~w~You no longer rent a car", 5000, 3);
		}
	}
	return 1;
}

CMD:jack(playerid, params[]) {
	if(Pl::Info[playerid][pJob] == 5)
	{
		if(JobWaitTime[playerid] != 0) return Send(playerid, COLOR_GREY, "* Машины можно взламывать раз в 3 минуты!");
		if(GetPlayerState(playerid) == 1 && GetPlayerInterior(playerid) == 0)
		{
			new c = ClosestVeh(playerid, 3.0);
			if(c != INVALID_VEHICLE_ID) {
				if(!gCarLock{c}) return Send(playerid, COLOR_GREY, "* Эта машины уже открыта!");
				ToggleVehicleDoor(c, true);
				JobWaitTime[playerid] = 180;
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "~w~Vehicle ~r~Hacked", 5000, 4);
				
				params[0] = GetClosestPlayer(playerid, 20.0);
				if(Pl::isLogged(params[0])) {
					WantedTime[playerid] = 180;
					SetPlayerWL(playerid, Pl::Info[playerid][pWantedL]+params[1]);
					SetPlayerCriminal(playerid, 255, "Угон ТС");
				}
			}
		}
	}
	return 1;
}

CMD:lock(playerid, params[]) {
	new carid = GetPlayerVehicleID(playerid);
	new houseid = Pl::Info[playerid][pHouseKey];
	if(carid == 0) carid = ClosestVeh(playerid, 3.0);
	if(carid != INVALID_VEHICLE_ID) {
		if(HireCar[playerid] == carid) {
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, (!gCarLock{carid})?("~w~Vehicle ~r~Locked"):("~w~Vehicle ~g~Unlocked"), 5000, 6);
			ToggleVehicleDoor(carid, gCarLock{carid});
		} else if(IsValidHouse(houseid) && HouseInfo[houseid][hAuto] == carid) {
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, (!gCarLock{carid})?("~w~Vehicle ~r~Locked"):("~w~Vehicle ~g~Unlocked"), 5000, 6);
			ToggleVehicleDoor(carid, gCarLock{carid});
		}
		else Send(playerid, COLOR_GREY, "* У Вас нет ключа от этого автомобиля");
	}
	else Send(playerid, COLOR_GREY, "Нет машин поблизости");
	
	return 1;
}

CMD:gift(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid, COLOR_GRAD1, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /gift [id]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pLevel] > 1) return Send(playerid, COLOR_GREY, "* Этот игрок не первого лвл!");
	if(Pl::Info[params[0]][pTime] < 2) return Send(playerid, COLOR_GREY, "* Игрок должен отыграть 2 часов на сервере!");
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "Админ %s предлогает вам бонус!\nПринять бонус?",sendername);
	SPD(params[0], D_GIFT, 0, "ПОДАРОК", string, "Принять", "Нет");
	format(string, sizeof string, "[AdmWarn] * %s применил команду /gift к игроку %s[%i]", sendername, playername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	return 1;
}

CMD:tazer(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не законник!");
	if(IsPlayerInAnyVehicle(playerid)) return Send(playerid, COLOR_GREY, "* Нельзя использовать это в автомобиле!");
	if(PlayerUseTazed[playerid]) return Send(playerid, COLOR_GREY,"* Пользоватся тазером можно раз в 8 секунд");
	params[0] = GetClosestPlayer(playerid, 4.0);
	if(params[0] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Около вас нет никого!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(IsACop(params[0])) return Send(playerid, COLOR_GREY, "Нельзя заэлектрошокить закон!!");
	if(IsPlayerInAnyVehicle(params[0])) return Send(playerid, COLOR_GREY, "* Подозреваемый находится в автомобиле, выведити его сначала!");
	
	getname(playerid -> sendername,params[0] -> playername);
	if(Pl::Info[params[0]][pMaskOn])
	{
		format(string, sizeof string, "* Вы ударили электрошоком по неизвесному он паролизован на 8 секунд.");
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* Вы ударины электрошоком и паролизованы %s на 8 секунд.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* %s выстрелил электрошоком в неизвесного и он был паролизован,.", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
		format(string, sizeof string, "* Вы ударили электрошоком по %s он паролизован на 8 секунд.", playername);
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* Вы ударины электрошоком и паролизованы %s на 8 секунд.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* %s выстрелил электрошоком в %s и он был паролизован,.", sendername, playername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	PlayerUseTazed[playerid] = true;
	GameTextForPlayer(params[0], "~r~Tazed", 3000, 3);
	Rac::TogglePlayerControllable(params[0], 0);
	SetTimerEx("TazerTime", 1000*8, false, "i", playerid);
	SetTimerEx("AC_TogglePlayerControllable", 1000*8 , false, "ii", params[0], 1);
	return 1;
}

CMD:unmask(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не законник!");
	params[0] = GetClosestPlayer(playerid, 3.0);
	if(params[0] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Около вас нет никого!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!Pl::Info[params[0]][pMaskOn]) return Send(playerid, COLOR_GREY, "Около вас нет никого в маске!");
	
	HideNameTag( params[0], false );
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* %s снял с вас маску", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы сняли маску с %s", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s снимает маску с %s", sendername, playername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	
	return 1;
}

CMD:jailed(playerid, params[]) { new string[144];
	switch(GetFracID(playerid)) {
		case 1..3 : {
			Send(playerid, COLOR_WHITE, "________________ {0080ff}Заключенные в камере {ffffff}_________________");
			foreach(new i: Player) {
				if(Pl::Info[i][pJailed] == 1) {
					format(string, sizeof string, "* Заключенный: %s | Осталось времени: %d", GetName(i), Pl::Info[i][pJailTime]);
					Send(playerid, COLOR_LIGHTBLUE, string);
				}
			}
		}
	}
	return 1;
}

CMD:cuff(playerid, params[]) { new string[144];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не коп!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /cuff [id/Name]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "*Вы неможете надеть наручники на самого себя!");
	if(IsACop(params[0])) return Send(playerid, COLOR_GREY, "*Вы неможете надевать наручники на законников!");
	if(PlayerCuffed[params[0]]) return Send(playerid, COLOR_GREY, "* На игрока уже надеты наручники !");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid, COLOR_GREY, "* Игрок слишком далеко!");
	SetPlayerAttachedObject(params[0], 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	SetPlayerSpecialAction(params[0], SPECIAL_ACTION_CUFFED);
	format(string, sizeof string, "* Офицер %s надел на вас наручники", GetName(playerid));
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы надели наручники на %s.", GetName(params[0]));
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Офицер %s надевает наручники на %s", GetName(playerid), GetName(params[0]));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	GameTextForPlayer(params[0], "~r~Cuffed", 3000, 3);
	PlayerCuffed[params[0]] = true;
	Pl::CuffedTime[params[0]] = 240;
	return 1;
}

CMD:uncuff(playerid, params[]) { new string[144];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не коп!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /uncuff [id/Name]");
	if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы неможете снять наручники на самого себя!");
	if(IsACop(params[0])) return Send(playerid, COLOR_GREY, "* Вы неможете надевать наручники на законников!");
	if(!PlayerCuffed[params[0]]) return Send(playerid, COLOR_GREY, "* На игрока не надеты наручники!");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid, COLOR_GREY, "* Игрок слишком далеко!");
	RemovePlayerAttachedObject(params[0], 0);
	SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
	format(string, sizeof string, "* Офицер %s снял с вас наручники", GetName(playerid));
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы снили наручники с %s", GetName(params[0]));
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Офицер %s снимает наручники с %s", GetName(playerid), GetName(params[0]));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	GameTextForPlayer(params[0], "~g~Uncuffed", 2500, 3);
	PlayerCuffed[params[0]] = false;
	Pl::CuffedTime[params[0]] = 0;
	return 1;
}

CMD:find(playerid, params[]) {
	if(Pl::Info[playerid][pJob] != 1) return Send(playerid, COLOR_GREY, "* Вы не детектив!");
	if(UsedFind[playerid] != 0) return Send(playerid, COLOR_GREY, "* Вы уже искали кого-то, подождите!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /find [id]");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете отыскать самого себя!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Неправильное имя/ID!");
	
	FindTime[playerid] = 10;
	UsedFind[playerid] = (60-(Pl::Info[playerid][pDetSkill]/10));
	GetPlayerPos(params[0], posx, posy, posz);
	SetPlayerCheckpointEx(playerid, FIND_ICON, posx, posy, posz, 60, 0, -1, -1, true);
	
	if(Pl::Info[playerid][pDetSkill] < 500) {
		switch(++Pl::Info[playerid][pDetSkill]) {
			case 50 : Send(playerid, COLOR_YELLOW, "* Ваш навык детектива теперь 2 уровня, скоро Вы сможете находить членов фракций.");
			case 100 : Send(playerid, COLOR_YELLOW, "* Ваш навык детектива теперь 3 уровня, скоро Вы сможете находить членов фракций.");
			case 200 : Send(playerid, COLOR_YELLOW, "* Ваш навык детектива теперь 4 уровня, теперь Вы сможете находить членов фракций.");
			case 400 : Send(playerid, COLOR_YELLOW, "* Ваш навык детектива теперь 5 уровня, теперь Вы сможете находить членов фракций.");
		}
	}
	
	return 1;
}

CMD:giveorder(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsACop(playerid)) return Send(playerid,COLOR_GREY,"* Вы не законник!");
	if(Pl::Info[playerid][pRank] < 8) return Send(playerid,COLOR_GREY,"* Только с 8 ранга!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /giveoder [playerid]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsALawyer(params[0])) return Send(playerid, COLOR_GREY,"* Этот человек не адвокат!");
	if(ApprovedLawyer[params[0]]) return Send(playerid, COLOR_GREY,"* У него уже есть ордер!");
	ApprovedLawyer[params[0]] = 1;
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "* Вы выдали ордер на освобождение из тюрьмы %s игроку", playername);
	Send(playerid, COLOR_LIGHTBLUE,string);
	format(string, sizeof string, "* Офицер %s выдал вам ордер на освобождение игрока(Используйте /free)", sendername);
	Send(params[0], COLOR_LIGHTBLUE,string);
	
	return 1;
}

CMD:free(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsALawyer(playerid)) return Send(playerid, COLOR_GREY,"* Вы не адвокат!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /free [playerid]");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "Вы не можете Освободить себя!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(Pl::Info[params[0]][pJailed] != 1) return Send(playerid, COLOR_GREY, "* Игрок не в тюрьме!");
	if(ApprovedLawyer[playerid] != 1) return Send(playerid, COLOR_GREY, "* У Вас нет ордера на освобождение!");
	
	Pl::Info[playerid][pLawSkill] ++;
	if(Pl::Info[playerid][pLawSkill] == 50)
	{ Send(playerid, COLOR_YELLOW, "* Ваш Адвокат Скилл - теперь Уровень 2, Вы заработаете больше Денег, и более быстрый Перезаряжают Время."); }
	else if(Pl::Info[playerid][pLawSkill] == 100)
	{ Send(playerid, COLOR_YELLOW, "* Ваш Адвокат Скилл - теперь Уровень 3, Вы заработаете больше Денег, и более быстрый Перезаряжают Время."); }
	else if(Pl::Info[playerid][pLawSkill] == 200)
	{ Send(playerid, COLOR_YELLOW, "* Ваш Адвокат Скилл - теперь Уровень 4, Вы заработаете больше Денег, и более быстрый Перезаряжают Время."); }
	else if(Pl::Info[playerid][pLawSkill] == 400)
	{ Send(playerid, COLOR_YELLOW, "* Ваш Адвокат Скилл - теперь Уровень 5, Вы заработаете больше Денег, и более быстрый Перезаряжают Время."); }
	
	ApprovedLawyer[playerid] = 0;
	WantLawyer[params[0]] = 0;
	CallLawyer[params[0]] = 0;
	JailPrice[params[0]] = 0;
	
	UnJail(params[0], 1);
	Pl::Info[params[0]][pJailTime] = 0;
	getname(playerid->sendername,params[0]->playername);
	format(string, sizeof string, "* Вы освободили %s из тюрьмы.", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы были освобождены из тюрьмы, Адвокатом %s.", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:cancel(playerid, params[]) { new string[144], sendername[24];
	if(sscanf(params, "s[15]U(65535)", temp, params[0]))
	{
		Send(playerid, COLOR_WHITE, "|__________________ Аннулировать __________________|");
		Send(playerid, COLOR_WHITE, "{ffffff}Введите: /cancel [name]");
		Send(playerid, COLOR_GREY, "Доступные названия: Sex, Drugs, Repair, Lawyer, Live, Refill, Car, Taxi, Bus");
		Send(playerid, COLOR_GREY, "Доступные названия: Medic, Mechanic, Ticket, Nick");
		Send(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}
	GetPlayerName(playerid, sendername, 24);
	if(strfind(temp,"nick",true) >= 0) {
		if(!IsPlayerConnected(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подключен!");
		if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
		if(!GetPVarString(params[0], "NewName", plname, 24)) return Send(playerid, COLOR_GREY, "* Этот игрок не подавал заявку на смену ника!");
		NameChange{params[0]} = 0;
		DeletePVar(params[0], "NewName");
		GetPlayerName(playerid, plname, 24);
		format(string, sizeof string, "* Администратор %s отменил смену вашего ника!", plname);
		return Send(params[0], COLOR_LIGHTRED, string);
	
	} else if(strcmp(temp,"sex",true) == 0) {
		SexOffer[playerid] = INVALID_PLAYER_ID;
		SexPrice[playerid] = 0;
	
	} else if(strcmp(temp,"drugs",true) == 0) {
		DrugOffer[playerid] = INVALID_PLAYER_ID;
		DrugPrice[playerid] = 0;
		DrugGram[playerid] = 0;
	
	} else if(strcmp(temp,"repair",true) == 0) {
		RepairOffer[playerid] = INVALID_PLAYER_ID;
		RepairPrice[playerid] = 0;
		RepairCar[playerid] = 0;

	} else if(strcmp(temp,"live",true) == 0) {
		LiveOffer[playerid] = INVALID_PLAYER_ID;
	
	} else if(strcmp(temp,"refill",true) == 0) {
		RefillOffer[playerid] = INVALID_PLAYER_ID;
		RefillPrice[playerid] = 0;
	
	} else if(strcmp(temp,"car",true) == 0) {
		CarOffer[playerid] = INVALID_PLAYER_ID;
		CarPrice[playerid] = 0;
		CarID[playerid] = 0;
	
	} else if(strcmp(temp,"ticket",true) == 0) {
		TicketOffer[playerid] = INVALID_PLAYER_ID;
		TicketMoney[playerid] = 0;

	} else if(strcmp(temp,"medic",true) == 0) {
		if(Iter_Count(MedicCalls)) {
			if(Iter_Contains(MedicCalls, playerid)) {
				Iter_Remove(MedicCalls, playerid);
				format(string, sizeof string, "* Клиент %s, отменил вызов.", GetName(playerid));
				sendToFamily(4, COLOR_AZTECAS, string);
				Send(playerid, COLOR_GREY, "* Вы отменили вызов!");
			}
		} else if(Iter_Count(TeamPlayers[4])) {
			foreach(new med : TeamPlayers[4]) {
				if(MedicCallTime[med][0] == playerid) {
					MedicCallTime[med][1] = 300;
					format(string, sizeof string, "* Клиент %s, отменил вызов.", GetName(playerid));
					Send(med, COLOR_AZTECAS, string), Send(playerid, COLOR_GREY, "* Вы отменили вызов!");
					break;
				}
			}
		} else {
			Send(playerid, COLOR_GREY, "* Вы не вызывали медика!");
		}
	
	} else if(strcmp(temp,"mechanic",true) == 0) {
		if(Iter_Count(MechanicCalls)) {
			if(Iter_Contains(MechanicCalls, playerid)) {
				Iter_Remove(MechanicCalls, playerid);
				format(string, sizeof string, "* Клиент %s, отменил вызов.", GetName(playerid));
				SendJobMessage(6, COLOR_AZTECAS, string);
				Send(playerid, COLOR_GREY, "* Вы отменили вызов!");
			}
		} else if(Iter_Count(JobPlayers[6]) > 0) {
			foreach(new meh : JobPlayers[6]) {
				if(MechanicCallTime[meh][0] == playerid) {
					MechanicCallTime[meh][1] = 300;
					format(string, sizeof string, "* Клиент %s, отменил вызов.", GetName(playerid));
					Send(meh, COLOR_AZTECAS, string), Send(playerid, COLOR_GREY, "* Вы отменили вызов!");
					break;
				}
			}
		} else {
			Send(playerid, COLOR_GREY, "* Вы не вызывали механика!");
		}
	
	} else if(strcmp(temp,"taxi",true) == 0) {
		if(TaxiCall != INVALID_PLAYER_ID) {
			if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0) {
				TaxiAccepted[playerid] = INVALID_PLAYER_ID;
				GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
				TaxiCallTime[playerid] = 0;
				DestroyDynamicCP(checkpoints[playerid]);
				TaxiCall = INVALID_PLAYER_ID;
			} else {
				if(IsPlayerConnected(TaxiCall)) if(TaxiCall == playerid) TaxiCall = INVALID_PLAYER_ID;
				foreach(new i: Player) {
					if(Pl::isLogged(i)) {
						if(TaxiAccepted[i] != INVALID_PLAYER_ID) {
							if(TaxiAccepted[i] == playerid) {
								TaxiAccepted[i] = INVALID_PLAYER_ID;
								GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Canceled the call", 5000, 1);
								TaxiCallTime[i] = 0;
								DestroyDynamicCP(checkpoints[playerid]);
							}
						}
					}
				}
			}
		}
	
	} else if(strcmp(temp,"bus",true) == 0) {
		if(BusCall != INVALID_PLAYER_ID) {
			if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0) {
				BusAccepted[playerid] = INVALID_PLAYER_ID;
				GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
				BusCallTime[playerid] = 0;
				DestroyDynamicCP(checkpoints[playerid]);
				BusCall = INVALID_PLAYER_ID;
			} else {
				if(IsPlayerConnected(BusCall)) if(BusCall == playerid) BusCall = INVALID_PLAYER_ID;
				foreach(new i: Player) {
					if(Pl::isLogged(i)) {
						if(BusAccepted[i] != INVALID_PLAYER_ID) {
							if(BusAccepted[i] == playerid) {
								BusAccepted[i] = INVALID_PLAYER_ID;
								GameTextForPlayer(i, "~w~Bus Caller~n~~r~Canceled the call", 5000, 1);
								BusCallTime[i] = 0;
								DestroyDynamicCP(checkpoints[playerid]);
							}
						}
					}
				}
			}
		}
	} else {
		return 1;
	}
	format(string, sizeof string, "* Вы отменили: %s.", temp);
	Send(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:accept(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(Pl::isLogged(playerid)) {
		if(sscanf(params, "s[32]U(65535)", temp, params[0])) {
			Send(playerid, COLOR_WHITE, "|__________________ Принимать __________________|");
			Send(playerid, COLOR_WHITE, "* Введите: accept [name]");
			Send(playerid, COLOR_GREY, "Доступные названия: Sex, Drugs, Repair, Lawyer, Live, Refill,House");
			Send(playerid, COLOR_GREY, "Доступные названия: Car, Taxi, Bus, Boxing, Medic, Mechanic, Ticket, Nick");
			Send(playerid, COLOR_WHITE, "|____________________________________________|");
			return 1;
		}
		
		if(strcmp(temp, "invite",true) == 0) {
			new frac = GetPVarInt(playerid, "InvateFrac");
			if(!(1 <= frac <= 20)) return Send(playerid, COLOR_GREY, "* Вас не приглашали во фракцию!");
			Pl::Info[playerid][pMember] = frac;
			Pl::Info[playerid][pRank] = 1;
			Rac::SetPlayerInterior(playerid, 3);
			Rac::SetPlayerVirtualWorld(playerid, 7);
			Pl::Info[playerid][pLocal] = (99*GetBizIndex(7));
			Rac::SetPlayerPos(playerid,207.4872,-129.2266,1003.5078);
			SelectCharPlace[playerid] = 0;
			SetPColor(playerid);
			SetPVarInt(playerid, "InvateFrac", 0);
			Iter_Add(TeamPlayers[frac], playerid);
			skin::goto(GetFracID(playerid), skin::first, SelectCharPlace[playerid], ChosenSkin[playerid]);
			SetPlayerSkin(playerid, ChosenSkin[playerid]);
			Pl::Info[playerid][pChar] = ChosenSkin[playerid];
			format(string, sizeof string, "* Вы были приняты в %s", FracInfo[frac][fName]);
			Send(playerid, COLOR_LIGHTBLUE, string);
		} else if(strcmp(temp, "nick",true) == 0) {
			if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
			if(NameChange{params[0]}) return Send(playerid, COLOR_GREY, "* Этому игроку уже изменили ник!");
			if(!GetPVarString(params[0], "NewName", plname, 24)) return Send(playerid, COLOR_GREY, "* Этот игрок не подавал заявку на смену ника!");
			Send(params[0],COLOR_LIGHTBLUE,"Администратор одобрил ваш ник. В течении пяти секунд изменения вступят в силу");
			Send(playerid,COLOR_LIGHTBLUE,"Вы одобрили смену ника. В течении пяти секунд изменения всупят в силу");
			NameChange{params[0]} = 5;
		
		} else if(strcmp(temp,"car",true) == 0) {
			if(CarOffer[playerid] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Никто не предложил покупать Автомобиль!");
			if(!Pl::isLogged(CarOffer[playerid])) return 1;
			if(Rac::GetPlayerMoney(playerid) < CarPrice[playerid]) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
			if(!IsPlayerInVehicle(CarOffer[playerid], CarID[playerid])) return Send(playerid, COLOR_GREY, "* Агент по продаже легковых автомобилей не находится в продоваемом Автомобиле!");
			new points;
			new level = Pl::Info[CarOffer[playerid]][pCarSkill];
			if(level == 50)
			{ Send(CarOffer[playerid], COLOR_YELLOW, "* Ваш Навык Агента по продаже легковых автомобилей - теперь Уровень 2, Игроки, которые покупают Автомобили от Вас, могут назвать это чаще."); }
			else if(level == 100)
			{ Send(CarOffer[playerid], COLOR_YELLOW, "* Ваш Навык Агента по продаже легковых автомобилей - теперь Уровень 3, Игроки, которые покупают Автомобили от Вас, могут назвать это чаще."); }
			else if(level == 200)
			{ Send(CarOffer[playerid], COLOR_YELLOW, "* Ваш Навык Агента по продаже легковых автомобилей - теперь Уровень 4, Игроки, которые покупают Автомобили от Вас, могут назвать это чаще."); }
			else if(level == 400)
			{ Send(CarOffer[playerid], COLOR_YELLOW, "* Ваш Навык Агента по продаже легковых автомобилей - теперь Уровень 5, Игроки, которые покупают Автомобили от Вас, могут назвать это чаще."); }
			if(level >= 0 && level <= 50) { points = 1; }
			else if(level >= 51 && level <= 100) { points = 2; }
			else if(level >= 101 && level <= 200) { points = 3; }
			else if(level >= 201 && level <= 400) { points = 4; }
			else if(level >= 401) { points = 4; }
			format(string, sizeof string, "* Вы купили Автомобиль за $%d, от Агента по продаже легковых автомобилей %s. (Вы можете использовать /callcar %d время)",CarPrice[playerid], GetName(CarOffer[playerid]), points);
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* Вы продали свой Автомобиль %s для $%d, игрок может использовать /callcar %d время.", GetName(playerid), CarPrice[playerid], points);
			Send(CarOffer[playerid], COLOR_LIGHTBLUE, string);
			Pl::Info[CarOffer[playerid]][pPayCheck] += CarPrice[playerid];
			Rac::GivePlayerMoney(playerid, -CarPrice[playerid]);
			Rac::RemovePlayerFromVehicle(CarOffer[playerid]);
			Rac::TogglePlayerControllable(CarOffer[playerid], 1);
			CarCalls[playerid] = points;
			CarOffer[playerid] = INVALID_PLAYER_ID;
			CarPrice[playerid] = 0;
		
		} else if(strcmp(temp,"ticket",true) == 0) {
			if(!Pl::isLogged(TicketOffer[playerid])) return 1;
			if(TicketOffer[playerid] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Вам не выписывали штраф!");
			if(!IsPlayerInRangeOfPlayer(playerid, 5.0, TicketOffer[playerid])) return Send(playerid, COLOR_GREY, "* Офицер не около вас!");
			if(TicketMoney[playerid] > Rac::GetPlayerMoney(TicketOffer[playerid])) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег на оплату штрафа.");
			format(string, sizeof string, "* Вы заплатили штар $%d офицеру %s.", TicketMoney[playerid], GetName(TicketOffer[playerid]));
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* %s заплатил штраф $%d.", GetName(playerid), TicketMoney[playerid]);
			Send(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
			Rac::GivePlayerMoney(playerid, -TicketMoney[playerid]);
			Rac::GivePlayerMoney(TicketOffer[playerid], TicketMoney[playerid]);
			TicketOffer[playerid] = INVALID_PLAYER_ID;
			TicketMoney[playerid] = 0;

		} else if(strcmp(temp,"taxi",true) == 0) {
			if(TransportDuty[playerid] != 1) return Send(playerid, COLOR_GREY, "* Вы не таксист!");
			if(TaxiCallTime[playerid] > 0) return Send(playerid, COLOR_GREY, "* Вы уже приняли вызов!");
			if(TaxiCall == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Никто еще не вызывал такси!");
			if(!Pl::isLogged(TaxiCall)) return 1;
			format(string, sizeof string, "* Вы вызвали Такси от %s, Вы будете видеть маркер, пока Вы не достигли его.", GetName(TaxiCall));
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* Таксист %s принял Вашу Призыву Такси, пожалуйста ждите на своем настоящем положении.", GetName(playerid));
			Send(TaxiCall, COLOR_LIGHTBLUE, string);
			GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Goto redmarker", 5000, 1);
			TaxiCallTime[playerid] = 1;
			TaxiAccepted[playerid] = TaxiCall;
			TaxiCall = INVALID_PLAYER_ID;
		
		} else if(strcmp(temp,"bus",true) == 0) {
			if(TransportDuty[playerid] != 2) return Send(playerid, COLOR_GREY, "Вы не водитель автобуса!");
			if(BusCallTime[playerid] > 0) return Send(playerid, COLOR_GREY, "* Вы уже приняли вызов!");
			if(BusCall == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Никто еще не вызывал автобус!");
			if(!Pl::isLogged(BusCall)) return 1;
			format(string, sizeof string, "* Вы вняли Автобусному Призыву от %s, Вы будете видеть маркер, непока Вы не достигли этого.", GetName(BusCall));
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* Автобусный Водитель %s принял Вашу Автобусную Призыву, пожалуйста ждите в своем настоящем положении.", GetName(playerid));
			Send(BusCall, COLOR_LIGHTBLUE, string);
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(BusCall, X, Y, Z);
			DestroyDynamicCP(checkpoints[playerid]);
			checkpoints[playerid] = CreateDynamicCP(X, Y, Z,8.0,-1,-1,playerid,99999.9);
			GameTextForPlayer(playerid, "~w~Bus Caller~n~~r~Goto redmarker", 5000, 1);
			BusCallTime[playerid] = 1;
			BusAccepted[playerid] = BusCall;
			BusCall = INVALID_PLAYER_ID;
		
		} else if(strcmp(temp,"medic",true) == 0) {
			if(GetFracID(playerid) != 4) return Send(playerid, COLOR_GREY, "* Вы не медик!");
			if(MedicCallTime[playerid][0] != 0xffff) return Send(playerid, COLOR_GREY, "* Вы уже приняли вызов!");
			if(!Iter_Count(MedicCalls)) return Send(playerid, COLOR_GREY, "* Никто еще не вызывал медика!");
			foreach(new caller : MedicCalls) {
				MedicCallTime[playerid][0] = caller;
				MedicCallTime[playerid][1] = 1;
				Iter_Remove(MedicCalls, caller);
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(caller, X, Y, Z);
				pickupd[playerid][1] = CreateDynamicMapIcon(X, Y, Z, 20, 0, 0, 0, playerid, 99999.9);
				streamer::SetIntData(4, pickupd[playerid][1], E_STREAMER_STYLE, MAPICON_GLOBAL_CHECKPOINT);
				GameTextForPlayer(playerid, "~w~Medic Caller~n~~r~Goto redmarker", 5000, 1);
				getname(playerid->sendername,caller->playername);
				format(string, sizeof string, "* Вы приняли вызов от %s, у вас есть 300 секунд, чтобы добраться до него.", playername);
				Send(playerid, COLOR_LIGHTBLUE, string);
				Send(playerid, COLOR_LIGHTBLUE, "* После этих 300 секунд красный маркер будет удален.");
				format(string, sizeof string, "* %s %s принял ваш вызов. Он будет в течении 300 секунд", RankInfo[GetFracID(playerid)][Pl::Info[playerid][pRank]], sendername);
				Send(caller, COLOR_LIGHTBLUE, string);
				return 1;
			}
		
		} else if(strcmp(temp,"mechanic",true) == 0) {
			if(Pl::Info[playerid][pJob] != 6) return Send(playerid, COLOR_GREY, "* Вы не автомеханик!");
			if(MechanicCallTime[playerid][0] != 0xffff) return Send(playerid, COLOR_GREY, "* Вы уже приняли другой вызов!");
			if(!Iter_Count(MechanicCalls)) return Send(playerid, COLOR_GREY, "* В настоящие время нет вызовов!");
			foreach(new caller : MechanicCalls) {
				MechanicCallTime[playerid][0] = caller;
				MechanicCallTime[playerid][1] = 1;
				Iter_Remove(MechanicCalls, caller);
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(caller, X, Y, Z);
				pickupd[playerid][1] = CreateDynamicMapIcon(X, Y, Z, 20, 0, 0, 0, playerid, 99999.9);
				streamer::SetIntData(4, pickupd[playerid][1], E_STREAMER_STYLE, MAPICON_GLOBAL_CHECKPOINT);
				GameTextForPlayer(playerid, "~w~Mechanic Caller~n~~r~Goto redmarker", 5000, 1);
				getname(playerid -> sendername, caller -> playername);
				format(string, sizeof string, "* Вы приняли вызов от %s, у вас есть 300 секунд, чтобы добраться туда.", playername);
				Send(playerid, COLOR_LIGHTBLUE, string);
				Send(playerid, COLOR_LIGHTBLUE, "* После этих 300 секунд красный маркер будет удален.");
				format(string, sizeof string, "* Автомеханик %s принял ваш вызов, пожалуйста ждите в своем настоящем положении.", sendername);
				Send(caller, COLOR_LIGHTBLUE, string);
				format(string, sizeof string, "** %s принял вызов и следует к %s.", sendername, playername);
				SendJobMessage(6, COLOR_AZTECAS, string);
				break ;
			}
		
		} else if(strcmp(temp,"refill",true) == 0) {
			if(RefillOffer[playerid] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Вам не предлогали заправить транспорт!");
			if(!Pl::isLogged(RefillOffer[playerid])) return 1;
			if(RefillPrice[playerid] > Rac::GetPlayerMoney(playerid)) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
			
			new fuel, car = gLastCar[playerid];
			switch(++Pl::Info[RefillOffer[playerid]][pMechSkill]) {
				case 50 : Send(RefillOffer[playerid], COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 2, Вы можете добавить больше Топлива к любым Автомобилям Игроков.");
				case 100 : Send(RefillOffer[playerid], COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 3, Вы можете добавить больше Топлива к любым Автомобилям Игроков.");
				case 200 : Send(RefillOffer[playerid], COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 4, Вы можете добавить больше Топлива к любым Автомобилям Игроков.");
				case 400 : Send(RefillOffer[playerid], COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 5, Вы можете добавить больше Топлива к любым Автомобилям Игроков.");
			}
			switch(Pl::Info[RefillOffer[playerid]][pMechSkill]) {
				case 0..50		: fuel = 15;
				case 51..100	: fuel = 25;
				case 101..200	: fuel = 35;
				case 201..300 	: fuel = 45;
				case 301..400 	: fuel = 55;
				case 401..501 	: fuel = 65;
			}

			format(string, sizeof string, "* Вы снова наполняли свой автомобиль с %d%, за $%d на машине Механический %s.", fuel, RefillPrice[playerid], GetName(RefillOffer[playerid]));
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* Вы снова наполняли %s's автомобиль с %d%, $%d был добавлен к Вашей Зарплате.", GetName(playerid), fuel, RefillPrice[playerid]);
			Send(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
			Pl::Info[RefillOffer[playerid]][pPayCheck] += RefillPrice[playerid];
			Rac::GivePlayerMoney(playerid, -RefillPrice[playerid]);
			if(Benzin{car} < 110) {
				Benzin{car}+=fuel;
			}
			RefillOffer[playerid] = INVALID_PLAYER_ID;
			RefillPrice[playerid] = 0;
		
		} else if(strcmp(temp,"live",true) == 0) {
			if(LiveOffer[playerid] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Вам не придлогали дать интервью!");
			if(!Pl::isLogged(LiveOffer[playerid])) return 1;
			if(!IsPlayerInRangeOfPlayer(playerid, 3.0, LiveOffer[playerid])) return Send(playerid, COLOR_GREY, "* Вы слишком далеко от репортера!");
			Send(playerid, COLOR_LIGHTBLUE, "* Вы заморожены до окончания интервью");
			Send(LiveOffer[playerid], COLOR_LIGHTBLUE, "* Вы заморожены до окончания интервью (используйте /live again).");
			Rac::TogglePlayerControllable(playerid, 0); Rac::TogglePlayerControllable(LiveOffer[playerid], 0);
			TalkingLive[playerid] = LiveOffer[playerid];
			TalkingLive[LiveOffer[playerid]] = playerid;
			LiveOffer[playerid] = INVALID_PLAYER_ID;
		
		} else if(strcmp(temp,"drugs",true) == 0) {
			if(DrugOffer[playerid] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Вам не придлогали наркотики!");
			if(DrugPrice[playerid] > Rac::GetPlayerMoney(playerid)) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
			if(Pl::Info[playerid][pDrugs] > 9) return Send(playerid, COLOR_GREY, "* У Вас уже слишком много наркотиков!");
			if(!Pl::isLogged(DrugOffer[playerid])) return 1;
			format(string, sizeof string, "* Вы купили %d грамм за $%d от Торговца наркотиками %s.", DrugGram[playerid], DrugPrice[playerid], GetName(DrugOffer[playerid]));
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* %s купил Ваш %d грамм, $%d был добавлен к Вашей Зарплате.", GetName(playerid), DrugGram[playerid], DrugPrice[playerid]);
			Send(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
			Pl::Info[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid];
			Pl::Info[DrugOffer[playerid]][pDrugsSkill] ++;
			Rac::GivePlayerMoney(playerid, -DrugPrice[playerid]);
			Pl::Info[playerid][pDrugs] += DrugGram[playerid];
			Pl::Info[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
			if(Pl::Info[DrugOffer[playerid]][pDrugsSkill] == 50)
			{ Send(DrugOffer[playerid], COLOR_YELLOW, "* Ваш Навык Торговца наркотиками - теперь Уровень 2, Вы можете купить больше Граммов и Более дешевый."); }
			else if(Pl::Info[DrugOffer[playerid]][pDrugsSkill] == 100)
			{ Send(DrugOffer[playerid], COLOR_YELLOW, "* Ваш Навык Торговца наркотиками - теперь Уровень 3, Вы можете купить больше Граммов и Более дешевый."); }
			else if(Pl::Info[DrugOffer[playerid]][pDrugsSkill] == 200)
			{ Send(DrugOffer[playerid], COLOR_YELLOW, "* Ваш Навык Торговца наркотиками - теперь Уровень 4, Вы можете купить больше Граммов и Более дешевый."); }
			else if(Pl::Info[DrugOffer[playerid]][pDrugsSkill] == 400)
			{ Send(DrugOffer[playerid], COLOR_YELLOW, "* Ваш Навык Торговца наркотиками - теперь Уровень 5, Вы можете купить больше Граммов и Более дешевый."); }
			DrugOffer[playerid] = INVALID_PLAYER_ID; DrugPrice[playerid] = 0; DrugGram[playerid] = 0;
		
		} else if(strcmp(temp,"sex",true) == 0) {
			if(SexOffer[playerid] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Вам не придлагали секс!");
			if(Rac::GetPlayerMoney(playerid) > SexPrice[playerid]) return Send(playerid, COLOR_GREY, "* Вы не сможите заплатить шлюхе!");
			if(!Pl::isLogged(SexOffer[playerid])) return 1;
			new Car = GetPlayerVehicleID(playerid);
			if(!IsPlayerInAnyVehicle(playerid) && !IsPlayerInVehicle(SexOffer[playerid], Car)) return Send(playerid, COLOR_GREY, "* Вы нили шлюха не находитесь в машине!");
			format(string, sizeof string, "* У Вас был секс со Шлюхой %s, для $%d.", GetName(SexOffer[playerid]), SexPrice[playerid]);
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* %s имел секс с Вами, $%d был добавлен к Вашей Зарплате.", GetName(playerid), SexPrice[playerid]);
			Send(SexOffer[playerid], COLOR_LIGHTBLUE, string);
			Pl::Info[SexOffer[playerid]][pPayCheck] += SexPrice[playerid];
			Rac::GivePlayerMoney(playerid, -SexPrice[playerid]);
			Pl::Info[SexOffer[playerid]][pSexSkill] ++;
			if(Pl::Info[SexOffer[playerid]][pSexSkill] == 50)
			{ Send(SexOffer[playerid], COLOR_YELLOW, "* наш Сексуальный Навык - теперь Уровень 2, Вы предлагаете лучший Пол (здоровье), и меньше случайно натыкается на СТАНД."); }
			else if(Pl::Info[SexOffer[playerid]][pSexSkill] == 100)
			{ Send(SexOffer[playerid], COLOR_YELLOW, "* наш Сексуальный Навык - теперь Уровень 3, Вы предлагаете лучший Пол (здоровье), и меньше случайно натыкается на СТАНД."); }
			else if(Pl::Info[SexOffer[playerid]][pSexSkill] == 200)
			{ Send(SexOffer[playerid], COLOR_YELLOW, "* наш Сексуальный Навык - теперь Уровень 4, Вы предлагаете лучший Пол (здоровье), и меньше случайно натыкается на СТАНД."); }
			else if(Pl::Info[SexOffer[playerid]][pSexSkill] == 400)
			{ Send(SexOffer[playerid], COLOR_YELLOW, "* наш Сексуальный Навык - теперь Уровень 5, Вы предлагаете лучший Пол (здоровье), и меньше случайно натыкается на СТАНД."); }
			if(Condom[playerid] < 1) {
				new rand, level = Pl::Info[SexOffer[playerid]][pSexSkill];
				if(level >= 0 && level <= 50) {
					if(Rac::GetPlayerHealth(playerid) < 150) Rac::GivePlayerHealth(playerid, 30.0);
					rand = random(sizeof(STD1)); STDPlayer[playerid] = STD1[rand];
					STDPlayer[SexOffer[playerid]] = STD1[rand];
					switch(STDPlayer[SexOffer[playerid]]) {
						case 0: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 30 здоровья имея секс.");
						case 1: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 30 здоровья + Хломидию из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Хломидией.");
						case 2: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 30 здоровья + Гонорею из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Гонореей.");
						case 3: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 30 здоровья + Сифилис из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Сифилисом");
					}
				} else if(level >= 51 && level <= 100) {
					if(Rac::GetPlayerHealth(playerid) < 150) Rac::GivePlayerHealth(playerid, 60.0);
					rand = random(sizeof(STD2)); STDPlayer[playerid] = STD2[rand];
					STDPlayer[SexOffer[playerid]] = STD2[rand];
					switch(STDPlayer[SexOffer[playerid]]) {
						case 0: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья имея секс.");
						case 1: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Хломидию из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Хломидией.");
						case 2: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Гонорею из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Гонореей.");
						case 3: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Сифилис из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Сифилисом");
					}
				} else if(level >= 101 && level <= 200) {
					if(Rac::GetPlayerHealth(playerid) < 150) Rac::GivePlayerHealth(playerid, 90.0);
					rand = random(sizeof(STD3)); STDPlayer[playerid] = STD3[rand];
					STDPlayer[SexOffer[playerid]] = STD3[rand];
					switch(STDPlayer[SexOffer[playerid]]) {
						case 0: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья имея секс.");
						case 1: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Хломидию из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Хломидией.");
						case 2: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Гонорею из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Гонореей.");
						case 3: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Сифилис из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Сифилисом");
					}
				} else if(level >= 201 && level <= 400) {
					if(Rac::GetPlayerHealth(playerid) < 150) Rac::GivePlayerHealth(playerid, 120.0);
					rand = random(sizeof(STD4)); STDPlayer[playerid] = STD4[rand];
					STDPlayer[SexOffer[playerid]] = STD4[rand];
					switch(STDPlayer[SexOffer[playerid]])
					{
						case 0: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья имея секс.");
						case 1: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Хломидию из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Хломидией.");
						case 2: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Гонорею из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Гонореей.");
						case 3: Send(playerid, COLOR_LIGHTBLUE, "* Вы получили 60 здоровья + Сифилис из-за секса."), Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Вы зарозили своего клиента Сифилисом");
					}
				} else if(level >= 401) {
					if(Rac::GetPlayerHealth(playerid) < 150) Rac::GivePlayerHealth(playerid, 150.0);
					Send(playerid, COLOR_LIGHTBLUE, "* Ваш уровень квалификации Шлюхи очень высок, что вы дали своему клиенту очень высокое здоровье.");
					Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Уровень квалификации Шлюхи очень высок, Вы получили высокое здоровье и никакой болезни");
				}
			} else {
				Send(SexOffer[playerid], COLOR_LIGHTBLUE, "* Игрок использовал Презерватив.");
				Send(playerid, COLOR_LIGHTBLUE, "* Вы использовали Презерватив.");
				Condom[playerid] --;
			}
			SexOffer[playerid] = INVALID_PLAYER_ID;
		
		} else if(strcmp(temp,"repair",true) == 0) {
			if(RepairOffer[playerid] == INVALID_PLAYER_ID) return Send(playerid, COLOR_GREY, "* Вам не предлагали починить автомобиль!");
			if(RepairPrice[playerid] > Rac::GetPlayerMoney(playerid)) return Send(playerid, COLOR_GREY, "* У Вас не хватит денег на починку!");
			if(!IsPlayerInAnyVehicle(playerid)) return 1;
			if(!Pl::isLogged(RepairOffer[playerid])) return 1;
			RepairCar[playerid] = GetPlayerVehicleID(playerid);
			Rac::RepairVehicle(GetPlayerVehicleID(RepairCar[playerid]));
			format(string, sizeof string, "* Вы восстановили свой автомобиль за $%d на машине Механик %s.", RepairPrice[playerid], GetName(RepairOffer[playerid]));
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* Вы установили %s's автомобиль, $%d был добавлен к Вашей Зарплате.", GetName(playerid), RepairPrice[playerid]);
			Send(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
			Pl::Info[RepairOffer[playerid]][pMechSkill] ++;
			if(Pl::Info[RepairOffer[playerid]][pMechSkill] == 50)
			{ Send(RepairOffer[playerid], COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 2, Вы можете добавить больше Топлива к любым Автомобилям Игроков."); }
			else if(Pl::Info[RepairOffer[playerid]][pMechSkill] == 100)
			{ Send(RepairOffer[playerid], COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 3, Вы можете добавить больше Топлива к любым Автомобилям Игроков."); }
			else if(Pl::Info[RepairOffer[playerid]][pMechSkill] == 200)
			{ Send(RepairOffer[playerid], COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 4, Вы можете добавить больше Топлива к любым Автомобилям Игроков."); }
			else if(Pl::Info[RepairOffer[playerid]][pMechSkill] == 400)
			{ Send(RepairOffer[playerid], COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 5, Вы можете добавить больше Топлива к любым Автомобилям Игроков."); }
			Pl::Info[RepairOffer[playerid]][pPayCheck] += RepairPrice[playerid];
			Rac::GivePlayerMoney(playerid, -RepairPrice[playerid]);
			RepairOffer[playerid] = INVALID_PLAYER_ID;
			RepairPrice[playerid] = 0;
		}
	}
	return 1;
}

CMD:refill(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(Pl::Info[playerid][pJob] != 6) return Send(playerid, COLOR_GREY, "Вы не работаете Механиком!");
	if(sscanf(params, "ui", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /refill [playerid] [price]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsAMehCar(GetPlayerVehicleID(playerid))) return Send(playerid,COLOR_GREY,"Вы не в тачке механика");
	if(params[1] < 1 || params[1] > 5000) return Send(playerid, COLOR_GREY, "Цена не должна быть меньше 1, или выше 5000!");
	if(!IsPlayerInRangeOfPlayer(playerid, 8.0, params[1]) && !IsPlayerInAnyVehicle(params[1])) return Send(playerid, COLOR_GREY, "* Этот инрок слишком далеко от вас");
	RefillOffer[params[0]] = playerid;
	RefillPrice[params[0]] = params[1];
	getname(playerid -> sendername, params[0] -> playername);
	format(string, sizeof string, "* Вы предложили %s заправить его автомобиль за $%d .", sendername, params[1]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Механик %s предлагает заправить ваш автомобиль за $%d (пишите /accept refill чтобы согласиться)", playername, params[1]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:at(playerid, params[]) {
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return Send(playerid, COLOR_GREY, "* Вы не в машине механика!");
	new veh = GetPlayerVehicleID(playerid);
	if(IsTrailerAttachedToVehicle(veh)) return Send(playerid, COLOR_GREY, "* Машина подцеплена!");
	new trailer = GetPlayerBootVehicle(playerid, veh);
	if(trailer == INVALID_VEHICLE_ID) return Send(playerid, COLOR_GREY,"* Нет машин поблизости!");
	if(IsTrailerAttachedToVehicle(trailer)) return Send(playerid, COLOR_GREY, "* Машина уже прицеплена!");
	AttachTrailerToVehicle(trailer, veh); Send(playerid, COLOR_YELLOW, "* Машина подцеплена!");
	return 1;
}

CMD:dt(playerid, params[]) {
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return Send(playerid, COLOR_GREY, "* Вы не в машине механика!");
	new veh = GetPlayerVehicleID(playerid);
	if(!IsTrailerAttachedToVehicle(veh)) return Send(playerid, COLOR_GREY, "* Машина не прицеплена!");
	DetachTrailerFromVehicle(veh); Send(playerid, COLOR_YELLOW, "* Машина отцеплена!");
	return 1;
}

CMD:repair(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(Pl::Info[playerid][pJob] != 6) return Send(playerid, COLOR_GREY, "Вы не Автомобильный Механик!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "* Введите: /repair [playerid] [price]");
	if(params[1] < 1 || params[1] > 1000) return Send(playerid, COLOR_GREY, "Цена не должна быть меньше 1, или выше 1000!");
	if(!IsPlayerInRangeOfPlayer(playerid, 8.0, params[0]) && !IsPlayerInAnyVehicle(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок слишком далеко от вас!");
	if(IsAMehCar(GetPlayerVehicleID(playerid))) {
		getname(playerid->sendername,params[0]->playername);
		format(string, sizeof string, "* Вы предложили %s починить его автомобиль за $%d .", playername, params[1]);
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* Механик %s предлагает починить ваш автомобиль за $%d, (пишите /accept repair чтобы согласиться)", sendername, params[1]);
		Send(params[0], COLOR_LIGHTBLUE, string);
		RepairOffer[params[0]] = playerid;
		RepairPrice[params[0]] = params[1];
	}
	return 1;
}

CMD:callcar(playerid, params[]) { new string[144];
	if(!CarCalls[playerid]) Send(playerid, COLOR_GREY, "Недействительное действие !");
	GetPlayerPos(playerid, posx, posy, posz);
	SetVehiclePos(CarID[playerid],posx, posy+4, posz);
	Send(playerid, COLOR_LIGHTBLUE, "* Купленный Автомобиль прибыл.");
	format(string, sizeof string, "* Вы можете назвать свой Купленный Автомобиль в течение %d времен больше.", CarCalls[playerid]);
	Send(playerid, COLOR_LIGHTBLUE, string); CarCalls[playerid] -= 1;
	return 1;
}

CMD:f(playerid, params[]) { new string[144], sendername[24], replacecmdtext[255];
	if(IsPMuted(playerid)) return Send(playerid, COLOR_CYAN, "Вы не можете говорить!");
	if(isnull(params) || params[0] == ' ') return Send(playerid, COLOR_GREY, "Введите: /f [текст]");
	if(!IsAFamily(playerid)) return Send(playerid, COLOR_GREY, "* Вы не член семьи!");
	GetPlayerName(playerid, sendername, 24);
	regex_replace_exid(params, ADBlock, REPLACE_TEXT, replacecmdtext, sizeof replacecmdtext);
	format(string, sizeof string, "[F] %s %s: %s.**", RankInfo[ GetFracID(playerid) ][ Pl::Info[playerid][pRank] ], sendername, replacecmdtext);
	sendToFamily(GetFracID(playerid), COLOR_AZTECAS, string);
	return 1;
}

CMD:news(playerid, params[]) {
	if(IsPMuted(playerid)) return Send(playerid, COLOR_GREY, "* У Вас молчанка!");
	if(GetFracID(playerid) != 9) return Send(playerid, COLOR_GREY, "* Вы не репартер!");
	if(!OnAir[playerid]) {
		if(OnAirMax >= 2) return Send(playerid, COLOR_GREY, "* В эфире уже видут другие люди!");
		new veh = GetPlayerVehicleID(playerid);
		if((!veh &&IsANews(veh)) || IsPlayerInRangeOfPoint(playerid,5.0,353.4343,272.8408,1008.6656)) {
			Send(playerid, COLOR_GREY, "Вы не находитесь в фургоне новостей, вертолете или в студии!");
		} else {
			OnAirMax++;
			OnAir[playerid] = true;
			Send(playerid,COLOR_LIGHTBLUE,"* Вы начали эфир! Говорите просто в чат, и ваши сообщения будут новостями");
		}
	} else {
		OnAirMax--;
		OnAir[playerid] = false;
		Send(playerid,COLOR_LIGHTBLUE,"* Вы закончили эфир!");
	}
	return 1;
}

CMD:live(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(GetFracID(playerid) != 9) return Send(playerid, COLOR_GREY, "* Вы не репортер!");
	if(TalkingLive[playerid] != INVALID_PLAYER_ID) {
		Send(playerid, COLOR_LIGHTBLUE, "* Интервью окончено");
		Send(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Интервью окончено");
		Rac::TogglePlayerControllable(playerid, 1);
		Rac::TogglePlayerControllable(TalkingLive[playerid], 1);
		TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
		TalkingLive[playerid] = INVALID_PLAYER_ID;
	} else {
		if(Pl::Info[playerid][pRank] <= 4) return Send(playerid, COLOR_GREY, "Ваш ранг репортера низок, чтобы брать интервью!");
		if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /live [id/Name]");
		if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете брать у самого себя интервью");
		if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) Send(playerid, COLOR_GREY, "* Вы далеко от этого игрока!");
		Rac::TogglePlayerControllable(playerid, 0);
		Rac::TogglePlayerControllable(params[0], 0);
		getname(playerid -> sendername,params[0] -> playername);
		format(string, sizeof string, "* Вы предложили интервью %s.", playername);
		Send(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* Репортер %s предлагает вам дать интервью (/accept live) принять.", sendername);
		Send(params[0], COLOR_LIGHTBLUE, string);
		LiveOffer[params[0]] = playerid;
	}
	return 1;
}

CMD:selldrugs(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(Pl::Info[playerid][pJob] != 4) Send(playerid, COLOR_GREY, "Вы не Наркодилер!");
	if(sscanf(params, "uii", params[0], params[1], params[2])) return Send(playerid, COLOR_GREY, "Введите: /selldrugs [playerid] [ammount] [price]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Зачем вам покупать нарко у самого себя?");
	if(params[1] < 1 || params[1] > 99) return Send(playerid, COLOR_GREY, "* Граммы не должны быть меньше 1, или выше 99!");
	if(params[2] < 1 || params[2] > 99999) return Send(playerid, COLOR_GREY, "* Цена не должна быть не меньше 1, или выше 99999!");
	if(params[1] > Pl::Info[playerid][pDrugs]) return Send(playerid, COLOR_GREY, "* Вы не имеете столько наркотиков!");
	if(!IsPlayerInRangeOfPlayer(playerid, 8.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не рядом с вами!");
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы предложили %s купить %d грамм за $%d", playername, params[1], params[2]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Наркоторговец %s предлагает вам купить %d грамм за $%d (пишите /accept drugs чтобы согласиться)", sendername, params[1], params[2]);
	Send(params[0], COLOR_LIGHTBLUE, string); DrugOffer[params[0]] = playerid;
	DrugPrice[params[0]] = params[2]; DrugGram[params[0]] = params[1];
	
	return 1;
}

CMD:usedrugs(playerid, params[]) {
	if(Pl::Info[playerid][pDrugs] > 0) {
		Pl::Stoned[playerid] += 1;
		DrugIntoxic[playerid] = DrugIntoxic[playerid] + 60;
		SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+2000);
		Pl::Info[playerid][pDrugs] -= 2;
		if(Pl::Info[playerid][pDrugs] < 0) {
			Pl::Info[playerid][pDrugs] = 0;
		}
		Rac::GivePlayerHealth(playerid, 20.0);
		SetPlayerChatBubble(playerid, "принял наркотик", COLOR_PURPLE, 40.0, 4000);
		Send(playerid, COLOR_PURPLE, "* Вы использовали 2 грамма наркотика!");
		if(Pl::Stoned[playerid] >= 2) {
			GameTextForPlayer(playerid, "~w~You are~n~~p~Stoned", 4000, 1);
		}
		if(STDPlayer[playerid]) {
			STDPlayer[playerid] = 0;
			Send(playerid, COLOR_LIGHTBLUE, "* Вы больше не болеете сифилисом из-за Наркотиков!");
		}
	} else {
		Send(playerid, COLOR_GREY, "* У Вас нет нарко!");
	}
	return 1;
}

CMD:setmats(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return 1;
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_WHITE, "Введите: /makemats [playerid] [кол-во]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /setmats к игроку %s[%s]. Было: %i; Стало: %i",
	sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], Pl::Info[params[0]][pMats], params[1]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3); Pl::Info[params[0]][pMats] = params[1];
	return 1;
}

CMD:setdrugs(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, DEV_ADMIN)) return 1;
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_WHITE, "Введите: /makedrugs [playerid] [кол-во]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /makedrugs к игроку %s[%s]. Было: %i; Стало: %i",
	sendername, playername, FracInfo[ GetFracID(params[0]) ][ fName ], Pl::Info[params[0]][pDrugs], params[1]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3); Pl::Info[params[0]][pDrugs] = params[1];
	return 1;
}

CMD:givedrugs(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GRAD2, "Введите: /givedrugs [playerid] [ammount]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "Нельзя себе отдать нарко!");
	if(params[1] < 1 || params[1] > 99) return Send(playerid, COLOR_GREY, "* Граммы не должны быть меньше 1, или выше 99!");
	if(Pl::Info[playerid][pDrugs] < params[1]) return Send(playerid,COLOR_GREY,"* У Вас нет столько нарко!");
	if(!IsPlayerInRangeOfPlayer(playerid, 8.0, params[0])) return Send(playerid, COLOR_GREY, "* Тот игрок не около Вас!");
	Pl::Info[playerid][pDrugs] -= params[1];
	Pl::Info[params[0]][pDrugs] += params[1];
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы отдали %s %d грамм нарко", playername, params[1]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s отдал вам %d грамм нарко", sendername, params[1]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s передает %s наркотики", sendername, playername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	
	return 1;
}

CMD:hopen(playerid, params[]) {
	if(!GateInfo[E_GATE_HITMAN_1][E_GATE_STATUS] && GetFracID(playerid) == 8) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_HITMAN_1][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_HITMAN_1][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_HITMAN_1][E_GATE_OBJECT], 1040.50524902,-367.12911987,74.69999695, 3);
			MoveDynamicObject(GateInfo[E_GATE_HITMAN_2][E_GATE_OBJECT], 1016.79907227,-367.43820190,74.69999695, 3);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_HITMAN_1][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:mopen(playerid, params[]) {
	if(!GateInfo[E_GATE_MED][E_GATE_STATUS] && GetFracID(playerid) == 4) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_MED][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_MED][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_MED][E_GATE_OBJECT], -2666.6979980469, 577.875, 20.325000762939, 3.0);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_MED][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:vopen(playerid, params[]) {
	if(!GateInfo[E_GATE_VAGOS][E_GATE_STATUS] && GetFracID(playerid) == 18) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_VAGOS][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_VAGOS][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_VAGOS][E_GATE_OBJECT],2802.63452148,-1598.97546387,11.63015938, 3);
			SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_VAGOS][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:sdopen(playerid, params[]) {
	if(!GateInfo[E_GATE_SD][E_GATE_STATUS] && GetFracID(playerid) == 19) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_SD][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_SD][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_SD][E_GATE_OBJECT],1017.47497559,2133.40698242,6.59399986, 3.0);
			SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_SD][E_GATE_OBJECT]);
			Send(playerid, 0x15AAEAAA, "* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:bopen(playerid, params[]) {
	if(!GateInfo[E_GATE_BALLAS_1][E_GATE_STATUS] && GetFracID(playerid) == 16) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_BALLAS_1][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_BALLAS_1][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_BALLAS_1][E_GATE_OBJECT], 952.28033447,-1091.89526367,24.20000076, 3);
			MoveDynamicObject(GateInfo[E_GATE_BALLAS_2][E_GATE_OBJECT], 952.06695557,-1114.79016113,24.21918869, 3);
			SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_BALLAS_1][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:nopen(playerid, params[]) {
	if(!GateInfo[E_GATE_KOLXOZ][E_GATE_STATUS] && GetFracID(playerid) == 20) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_KOLXOZ][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_KOLXOZ][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_KOLXOZ][E_GATE_OBJECT], -1043.14575195,-1348.43676758,131.00000000, 3);
			SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_KOLXOZ][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:armopen(playerid, params[]) {
	if(sscanf(params, "i", params[0])) return Send(playerid, COLOR_GREY, "Введите: /armopen (1-2)");
	if(params[0] < 1 || params[0] > 2) return Send(playerid, COLOR_GREY, "* Нету таких ворот!");
	if(IsACop(playerid) || GetFracID(playerid) == 7) {
		switch(params[0]) {
			case 1 : {
				if(!GateInfo[E_GATE_ARMY][E_GATE_STATUS]) {
					if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_ARMY][E_GATE_OBJECT], true)) {
						GateInfo[E_GATE_ARMY][E_GATE_STATUS] = 1;
						MoveDynamicObject(GateInfo[E_GATE_ARMY][E_GATE_OBJECT], 96.934,1920.112,13.026,3);
						SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_ARMY][E_GATE_OBJECT]);
						Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
					} else {
						Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
					}
				}
			}
			
			case 2 : {
				if(!GateInfo[E_GATE_ZONA_1][E_GATE_STATUS]) {
					if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_ZONA_1][E_GATE_OBJECT], true)) {
						GateInfo[E_GATE_ZONA_1][E_GATE_STATUS] = 1;
						MoveDynamicObject(GateInfo[E_GATE_ZONA_1][E_GATE_OBJECT],207.70809937,1875.70617676,13.93265820, 3);
						MoveDynamicObject(GateInfo[E_GATE_ZONA_2][E_GATE_OBJECT],220.31614685,1875.51049805,13.93265820, 3);
						SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_ZONA_1][E_GATE_OBJECT]);
					} else {
						Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
					}
				}
			}
		}
	}
	return 1;
}

CMD:fcopen(playerid, params[]) {
	if(!GateInfo[E_GATE_FLAMING][E_GATE_STATUS] && GetFracID(playerid) == 12) {
		if(IsPlayerInRangeOfObject(playerid, 15.0, GateInfo[E_GATE_FLAMING][E_GATE_OBJECT], true)) {
			GateInfo[E_GATE_FLAMING][E_GATE_STATUS] = 1;
			MoveDynamicObject(GateInfo[E_GATE_FLAMING][E_GATE_OBJECT], 699.50799561,-479.26757812,17.00000000, 3);
			SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_FLAMING][E_GATE_OBJECT]);
			Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
		} else {
			Send(playerid, COLOR_GREY,"* Вы слишко далеко от ворот!");
		}
	}
	return 1;
}

CMD:outdrugs(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pDrugs] <= 0) return Send(playerid, COLOR_GREY, "У Вас нет нарко!");
	format(string, sizeof string, "* %s выкидывает все наркотики.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Pl::Info[playerid][pDrugs] = 0;
	return 1;
}

CMD:outmats(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pMats] <= 0) return Send(playerid, COLOR_GREY, "* У Вас нет материалов!");
	format(string, sizeof string, "* %s выкидывает все материалы.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Pl::Info[playerid][pMats] = 0;
	return 1;
}

CMD:healme(playerid, params[]) {
	if(Pl::Info[playerid][pLocal] != 0) {
		new playervirt = GetPlayerVirtualWorld(playerid);
		if( playervirt != 0 )
		for(new i = FIRST_HOUSE; i < TOTAL_HOUSES; i++)
			if(IsPlayerInRangeOfPoint(playerid, 9.0, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && HouseInfo[i][hVirtual] == playervirt)
				SPD(playerid, D_HEALME, 0, "Что использовать?", "Аптечку\nБроню", "Выбрать", "Отмена");
	} else {
		if(IsPlayerInRangeOfPoint(playerid,3,1173.2563,-1323.3102,15.3943)||
		IsPlayerInRangeOfPoint(playerid,3,2029.5945,-1404.6426,17.2512)) return Send(playerid, COLOR_GREY, "Вы не в Больнице !");
		if(STDPlayer[playerid] <= 0) return Send(playerid, COLOR_GREY, "Вы не больны!");
		switch(STDPlayer[playerid]) {
			case 1: Send(playerid, COLOR_LIGHTBLUE, "* Вы были вылечены от Хломидии.");
			case 2: Send(playerid, COLOR_LIGHTBLUE, "* Вы были вылечены от Гонореи.");
			case 3: Send(playerid, COLOR_LIGHTBLUE, "* Вы были вылечены от Сифилиса.");
		}
		STDPlayer[playerid] = 0; Rac::GivePlayerMoney(playerid, -1000);
		Send(playerid, COLOR_CYAN, "Доктор: Ваш медицинский счет составил 1000$. Всего хорошего!");
	}
	return 1;
}

CMD:kickjob(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 1)) return Send(playerid,COLOR_GREY,"* Вам не доступна эта функция");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /kickjob [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	Iter_Remove(JobPlayers[Pl::Info[params[0]][pJob]], playerid);
	Pl::Info[params[0]][pJob] = 0;
	Pl::Info[params[0]][pContractTime] = 0;
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /kickjob к игроку %s[%d]", sendername, playername, params[0]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Администратор %s уволил вас с работы!", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	
	return 1;
}

CMD:uval(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid,COLOR_GREY,"* Вам не доступна эта функция");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GRAD2, "Введите: /uval [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!Pl::Info[params[0]][pMember]) return Send(playerid, COLOR_GREY, "* Этот не состоит не где!");
	new fracid = Pl::Info[params[0]][pMember];
	Pl::Info[params[0]][pMember] = 0;
	Pl::Info[params[0]][pRank] = 0;
	switch(Pl::Info[params[0]][pSex]) {
		case 1: Pl::Info[params[0]][pChar] = 72;
		case 2: Pl::Info[params[0]][pChar] = 55;
		default: Pl::Info[params[0]][pChar] = 79;
	}
	MedicBill[params[0]] = false;
	Pl::setSpawnInfo(playerid);
	Rac::SpawnPlayer(params[0]);
	Iter_Remove(TeamPlayers[fracid], params[0]);
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "[AdmWarn] * %s применил команду /uval к игроку %s[%d][%s]", sendername, playername, params[0], FracInfo[ fracid ][ fName ]);
	SendToAdmin(COLOR_YELLOW, string, 1, 3);
	format(string, sizeof string, "* Администратор %s уволил вас из фракции!", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:eject(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(GetPlayerState(playerid) != 2) return Send(playerid,COLOR_GREY,"* Вы не за рулем!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Введите: /eject [playerid]");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "Вы не можете изгнать себя!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsPlayerInVehiclePlayer(playerid, params[0])) return Send(playerid, COLOR_GREY, "* Тот игрок не находится в вашем автомобиле!");
	
	new Float:x, Float:y, Float:z;
	GetCoordVehicleParams(GetPlayerVehicleID(playerid), 1, x, y, z);
	SetPlayerPos(params[0], x, y, z);
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы выкинули %s из автомобиля!", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Вы были выкинуты из автомобиля %s!", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:sex(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(Pl::Info[playerid][pJob] == 3) return Send(playerid, COLOR_GREY, "Вы не Шлюха!");
	if(!IsPlayerInAnyVehicle(playerid)) return Send(playerid, COLOR_GREY, "* Вы не в автомобиле!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /sex [playerid] [price]");
	if(params[1] < 1 || params[1] > 99999) return Send(playerid, COLOR_GREY, "* Цена не должна быть меньше 1, или выше 99999!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можите ублажать сами себя!");
	if(!IsPlayerInRangeOfPlayer(playerid, 8.0, params[0])) return Send(playerid, COLOR_GREY, "* Тот игрок не около Вас!");
	if(!IsPlayerInAnyVehicle(playerid) && !IsPlayerInVehicle(params[0], GetPlayerVehicleID(playerid))) return Send(playerid, COLOR_GREY, "* Вы или другой игрок должны быть в автомобиле!");
	SexOffer[params[0]] = playerid; SexPrice[params[0]] = params[1];
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы придложили клиенту %s занятся сексом за $%d.", playername, params[1]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Шлюха %s вас секс за $%d (чтобы принять /accept sex)", sendername, params[1]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:wanted(playerid, params[]) { new string[144], playername[24];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не законник!");
	Send(playerid, COLOR_GREEN, "* В РОЗЫСКЕ:");
	foreach(new i: WantedPlayers) {
		static count;
		if(count >= 5) {
			count = 0;
			string[strlen(string)-2] = '\0';
			Send(playerid, COLOR_YELLOW, string);
			string[0] = '\0';
		} else {
			count ++;
			GetPlayerName(i, playername, 24);
			scf(string, temp, "%s[%i]: %i. ", playername, i, Pl::Info[i][pWantedL]);
		}
	}
	if(strlen(string)) Send(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:dropcar(playerid, params[]) {
	if(Pl::Info[playerid][pJob] != 5) return Send(playerid, COLOR_GREY, "Вы не Автоугонщик !");
	if(Pl::Info[playerid][pCarTime] != 0) return Send(playerid, COLOR_GREY, "Вы уже продали автомобиль, ждите пока закончится время!");
	GameTextForPlayer(playerid, "~w~Car Selling ~n~~r~Drop the car at the Crane", 5000, 1);
	CP[playerid] = 1;
	DestroyDynamicCP(checkpoints[playerid]);
	checkpoints[playerid] = CreateDynamicCP(-1548.3618,123.6438,3.2966,8.0,-1,-1,playerid,99999.9);
	return 1;
}

CMD:quitjob(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pJob] <= 0) return Send(playerid, COLOR_GREY, "* Вы не устроены на работу!");
	if(Pl::Info[playerid][pVip] > 0) {
		if(Pl::Info[playerid][pContractTime] <= 4) {
			Iter_Remove(JobPlayers[Pl::Info[playerid][pJob]], playerid);
			Pl::Info[playerid][pJob] = 0;
			Pl::Info[playerid][pContractTime] = 0;
			Send(playerid, COLOR_LIGHTBLUE, "* Вы уволились с работы!");
		} else {
			format(string, sizeof string, "* Вам нужно отработать %d часов, чтобы уволиться с работы!", Pl::Info[playerid][pContractTime]);
			Send(playerid, COLOR_LIGHTBLUE, string);
		}
	} else {
		if(!Pl::Info[playerid][pContractTime]) {
			Iter_Remove(JobPlayers[Pl::Info[playerid][pJob]], playerid);
			Pl::Info[playerid][pJob] = 0;
			Pl::Info[playerid][pContractTime] = 0;
			Send(playerid, COLOR_LIGHTBLUE, "* Вы отработали 5 часов по контракту и уволились с работы.");
		} else {
			format(string, sizeof string, "* Вам нужно отработать %d часов, чтобы уволиться с работы!", Pl::Info[playerid][pContractTime]);
			Send(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	return 1;
}

CMD:bail(playerid, params[]) { new string[144];
	if(Pl::Info[playerid][pJailed] != 1) return Send(playerid, COLOR_GREY, "* Вы не находитесь в тюрьме!");
	if(JailPrice[playerid] <= 0) Send(playerid, COLOR_GREY, "* Вы не можите выйти под залог!");
	if(Rac::GetPlayerMoney(playerid) > JailPrice[playerid]) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
	JailPrice[playerid] = 0; WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
	Pl::Info[playerid][pJailTime] = 1; Rac::GivePlayerMoney(playerid, -JailPrice[playerid]);
	format(string, sizeof string, "* Вы выпустили себя за: $%d", JailPrice[playerid]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:clear(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Ввелите: /clear [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете оправдаться!");
	if(IsPlayerInRangeOfPoint(playerid,3.0, 253.9280,69.6094,1003.6406) || IsPlayerInRangeOfPoint(playerid,3.0, 256.7318,188.2524,1008.1719)) {
		if(IsACop(playerid)) {
			// Очищаем розыск
			SetPlayerWL(params[0], 0);
			ClearCrime(params[0]);

			// Выводим сообщение
			getname(playerid -> sendername,params[0] -> playername);
			format(string, sizeof string, "* Вы очистили уровень розыска подозреваемого %s.", playername);
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* Офицер %s очистил Ваш уровень розыска.", sendername);
			Send(params[0], COLOR_LIGHTBLUE, string);
		
		} else if(IsAMafia(playerid)) {
			if(GetFracID(params[0]) != GetFracID(playerid)) return Send(playerid, COLOR_GREY, "* Тот игрок не находится в вашей семье!");
			if(Pl::Info[params[0]][pRank] < 4) return Send(playerid, COLOR_GREY, "Вы нуждаетесь в 4 ранге, чтобы очистить уровни розыска!");
			if(Rac::GetPlayerMoney(playerid) < 5000) return Send(playerid, COLOR_GREY, "Вы нуждаетесь в 5000$, чтобы очистить розыск вашему члену семьи!");

			// Очищаем розыск
			SetPlayerWL(params[0], 0);
			ClearCrime(params[0]);
			Rac::GivePlayerMoney(playerid, -5000);

			// Выводим сообщение
			getname(playerid -> sendername,params[0] -> playername);
			format(string, sizeof string, "* Вы очистили розыск подозреваемого %s за 5000$.", playername);
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* Член семьи %s %s, очистил Ваш розыск.", RankInfo[ GetFracID(playerid) ][ Pl::Info[playerid][pRank] ], sendername);
			Send(params[0], COLOR_LIGHTBLUE, string);
		
		} else if(IsAGang(playerid)) {
			if(GetFracID(params[0]) != GetFracID(playerid)) return Send(playerid, COLOR_GREY, "* Тот игрок не находится в вашей семье!");
			if(Pl::Info[params[0]][pRank] < 4) return Send(playerid, COLOR_GREY, "Вы нуждаетесь в 4 ранге, чтобы очистить уровни розыска!");
			if(Rac::GetPlayerMoney(playerid) < 5000) return Send(playerid, COLOR_GREY, "Вы нуждаетесь в 5000$, чтобы очистить розыск вашему члену семьи!");

			// Очищаем розыск
			SetPlayerWL(params[0], 0);
			ClearCrime(params[0]);
			Rac::GivePlayerMoney(playerid, - 5000);

			// Выводим сообщение
			getname(playerid -> sendername,params[0] -> playername);
			format(string, sizeof string, "* Вы очистили розыск подозреваемого %s за 5000$.", playername);
			Send(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof string, "* Член семьи %s %s, очистил Ваш розыск.", RankInfo[ GetFracID(playerid) ][ Pl::Info[playerid][pRank] ], sendername);
			Send(params[0], COLOR_LIGHTBLUE, string);
		}
	}
	else Send(playerid, COLOR_GRAD2, "Вы не в Отделении полиции!");

	return 1;
}

CMD:aclear(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!Pl::isAdmin(playerid, 3)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	if(sscanf(params, "u", params[0])) return Send(playerid, COLOR_GREY, "Ввелите: /clear [id/Name]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы не можете оправдаться!");

	// Очищаем розыск
	SetPlayerWL(params[0], 0);
	ClearCrime(params[0]);

	// Выводим сообщение
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы очистили уровень розыска подозреваемого %s.", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Администратор %s очистил ваш уровень розыска.", sendername);
	Send(params[0], COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:ticket(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не законник!");
	if(!OnDuty[playerid] && GetFracID(playerid) == 1) return Send(playerid, COLOR_GREY, "Вы не при исполнении служебных обязанностей!");
	if(sscanf(params, "uds[24]", params[0], params[1], params[2])) return Send(playerid, COLOR_GREY, "Введите: /ticket [playerid] [price] [reason]");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
	if(params[1] < 1 || params[1] > 99999) return Send(playerid, COLOR_GREY, "* Штраф не может быть ниже $1 или выше $99999!");
	if(!IsPlayerInRangeOfPlayer(playerid, 5.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не около вас!");
	
	TicketOffer[params[0]] = playerid;
	TicketMoney[params[0]] = params[1];
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы выписали %s штаф на сумму $%d | Причина: %s", playername, params[1], params[2]);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Офицер %s выписал вам штраф на сумму $%d, причина: %s", sendername, params[1], params[2]);
	Send(params[0], COLOR_LIGHTBLUE, string);
	Send(params[0], COLOR_LIGHTBLUE, "* Напишите /accept ticket, чтобы принять штраф.");
	return 1;
}

CMD:arrest(playerid, params[]) { new string[144], sendername[24], playername[24];
	if(!IsACop(playerid)) return Send(playerid, COLOR_GREY, "* Вы не законник!");
	if(!OnDuty[playerid] && GetFracID(playerid) == 1) return Send(playerid, COLOR_GREY, "* Вы не при исполнении служебных обязанностей!");
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 268.3327,77.8972,1001.0391)) return Send(playerid, COLOR_GREY, "* Вы не около камеры, не может арестовать!");
	if(sscanf(params, "uiiI(0)I(1)", params[0], params[1], params[2], params[3], params[4])) return Send(playerid, COLOR_GREY, "Введите: /arrest [id/Name] [price] [time] [bail] [bailprice]");
	if(params[1] < 1 || params[1] > 99999) return Send(playerid, COLOR_GREY, "* Цена на арест не может быть ниже 1$ или выше 99999$ !");
	if(params[2] < 1 || params[2] > 6000) return Send(playerid, COLOR_GREY, "* Секунды тюремного заключения не могут быть ниже 1, или выше 6000!");
	if(params[3] < 0 || params[3] > 1) return Send(playerid, COLOR_GREY, "* Выпуск Тюрьмы не может быть ниже 0 или выше 1!");
	if(params[4] < 0 || params[4] > 3000000) return Send(playerid, COLOR_GREY, "* Штраф не может быть ниже 0$ или выше 3000000$ !");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
	if(!IsPlayerInRangeOfPlayer(playerid, 3.0, params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок слишком далеко от вас");
	if(Pl::Info[params[0]][pWantedL] < 1) return Send(playerid, COLOR_GREY, "* Игрок должен по крайней мере быть в розыске!");
	if(IsACop(params[0])) return Send(playerid,COLOR_GREY,"* Нельзя сажать своих");
	
	Rac::GivePlayerMoney(params[0], -params[1]);
	Jailed(params[0], params[2], 1);
	SetPlayerFree(params[0], playerid, "Got Arrested");
	if(params[3] == 1) {
		JailPrice[params[0]] = params[4];
		format(string, sizeof string, "Вы заключены в тюрьму в течение %i секунд. Залог: $%d", Pl::Info[params[0]][pJailTime], JailPrice[params[0]]);
		Send(params[0], COLOR_LIGHTBLUE, string);
	} else {
		JailPrice[params[0]] = 0;
		format(string, sizeof string, "Вы заключены в тюрьму в течение %i секунд. Залог: Без залога", Pl::Info[params[0]][pJailTime]);
		Send(params[0], COLOR_LIGHTBLUE, string);
	}
	
	getname(playerid -> sendername,params[0] -> playername);
	format(string, sizeof string, "* Вы арестовали %s!", playername);
	Send(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "arrested by %s ~n~    for $%d", sendername, params[1]);
	GameTextForPlayer(params[0], string, 5000, 5);
	
	switch(GetFracID(playerid)) {
		case 1 : strunpack(temp, !"Офицер" );
		case 2 : strunpack(temp, !"Агент ФБР" );
		case 3 : strunpack(temp, !"Солдат" );
	}
	format(string, sizeof string, "<< %s %s арестовал подозреваемого %s >>", temp, sendername, playername);
	OOCNews(COLOR_LIGHTRED, string);

	return 1;
}

CMD:contract(playerid, params[]) {
	if(GetFracID(playerid) == 8) return Send(playerid, COLOR_GREY, "* Вы не можите устанавливать контракты!");
	if(Pl::Info[playerid][pLevel] < 3) return Send(playerid, COLOR_GREY, "*Вы должны быть 3 уровня чтобы заключать контракт!");
	if(sscanf(params, "ud", params[0], params[1])) return Send(playerid, COLOR_GREY, "Введите: /contract [id/name] [сумма]");
	if(params[1] < 10000 || params[1] > 1000000) return Send(playerid, COLOR_GREY, "* Вы можете поставить контракт не меньше чем $10000, и не больше чем $100000!");
	if(params[1] > 0 && Rac::GetPlayerMoney(playerid) < params[1]) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
	if(!Pl::isLogged(params[0])) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
	//if(params[0] == playerid) return Send(playerid, COLOR_GREY, "* Вы неможете поставить на себя!");
	if(IsACop(params[0]) && params[1] < 100000) return Send(playerid, COLOR_GREY, "* Только $100000 может быть установлено за контракт на полицейского!");
	addContract(playerid, params[0], params[1]);
	return 1;
}

CMD:portable(playerid, params[]) {
	if(GetFracID(playerid) != 8) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
	clear(dialog);
	if(Pl::Info[playerid][pRank] >= 4) {
		strcat(dialog, "• Назначить контракт\n");
	}
	strcat(dialog, "• Мой контракт\n");
	if(strlen(dialog)) {
		SPD(playerid, D_PORTABLE, 2, "Portable", dialog, "Выбор", "Отмена");
	} else {
		SPD(playerid, D_NONE, 0, "Portable", "Пусто", "Ок", "");
	}
	return 1;
}

CMD:dice(playerid, params[]) { new string[144];
	if(!gDice[playerid]) return Send(playerid, COLOR_GRAD2, "* У Вас нет костей!");
	new dice = random(6)+1;
	format(string, sizeof string, "* %s бросает кости. Выпало число %d", GetName(playerid), dice);
	ProxDetector(5.0, playerid, string, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN);
	return 1;
}


public OnPlayerText(playerid, text[]) {
	if(isnull(text) || text[0] == ' ') return 0;
	if(!Pl::isLogged(playerid)) return !Send(playerid, COLOR_GREY, "* Вы не авторизованы!");
	if(Gag[playerid]) return !Send(playerid,COLOR_GREY,"* У Вас кляп во рту!");
	if(IsPMuted(playerid))return !Send(playerid, COLOR_CYAN, "* Админ отнял у вас возможность говорить в главном чате.");

	new replacetext[144], tmp[32], string[144], sendername[24];
	regex_replace_exid(text, ADBlock, REPLACE_TEXT, replacetext, sizeof replacetext);

	if(OnAir[playerid]) {
		new veh = GetPlayerVehicleID(playerid);
		if(IsPlayerInRangeOfPoint(playerid,5.0,353.4343,272.8408,1008.6656)) {
			switch(++Pl::Info[playerid][pNewsSkill]) {
				case 50 : Send(playerid, COLOR_YELLOW, "* Ваш Навык Репортера Новостей - теперь Уровень 2");
				case 100 : Send(playerid, COLOR_YELLOW, "* Ваш Навык Репортера Новостей - теперь Уровень 3");
				case 200 : Send(playerid, COLOR_YELLOW, "* Ваш Навык Репортера Новостей - теперь Уровень 4, теперь вы можете управлять вертолетом");
				case 400 : Send(playerid, COLOR_YELLOW, "* Ваш Навык Репортера Новостей - теперь Уровень 5, теперь вы можете брать интервью");
			}
			GetPlayerName(playerid, sendername, 24);
			format(string, sizeof(string), "*[Пресса] %s: %s", sendername, replacetext);
			OOCNews(COLOR_LIGHTBLUE, string);
		} else if(veh != 0) {
			if(IsANews(veh)) {
				switch(++Pl::Info[playerid][pNewsSkill]) {
					case 50 : Send(playerid, COLOR_YELLOW, "* Ваш Навык Репортера Новостей - теперь Уровень 2");
					case 100 : Send(playerid, COLOR_YELLOW, "* Ваш Навык Репортера Новостей - теперь Уровень 3");
					case 200 : Send(playerid, COLOR_YELLOW, "* Ваш Навык Репортера Новостей - теперь Уровень 4, теперь вы можете управлять вертолетом");
					case 400 : Send(playerid, COLOR_YELLOW, "* Ваш Навык Репортера Новостей - теперь Уровень 5, теперь вы можете брать интервью");
				}
				GetPlayerName(playerid, sendername, 24);
				format(string, sizeof(string), "*[Пресса] %s: %s", sendername, replacetext);
				OOCNews(COLOR_LIGHTBLUE, string);
			}
		}
		return 0;
	}
	
	if(TalkingLive[playerid] != INVALID_PLAYER_ID) {
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(GetFracID(playerid) == 9) {
		    format(string, sizeof(string), "*[Пресса] Репортер %s: %s", sendername, replacetext);
			OOCNews(0x5CFEB9AA, string);
		} else {
		    format(string, sizeof(string), "*[Пресса] Интервьюер %s: %s", sendername, replacetext);
			OOCNews(0x5CFEB9AA, string);
		}
		return 0;
	}
	
	if(CallLawyer[playerid] == 111) {
	    sscanf(replacetext, "s[24]", tmp);
	    if((strcmp("yes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes"))) {
			WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "** %s находится в Тюрьме, и нуждается в Адвокате. Пройдите в Отделение полиции.", sendername);
	    	SendJobMessage(2, COLOR_AZTECAS, string);
	    	SendJobMessage(2, COLOR_AZTECAS, "* Когда Вы в Отделении полиции, попросите, чтобы офицер одобрил Вас с /accept lawyer.");
	    	Send(playerid, COLOR_LIGHTRED, "Сообщение послали всем доступным Адвокатам, пожалуйста ждите.");
	    	return 0;
		} else {
			WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    Send(playerid, COLOR_LIGHTRED, "Нет Адвоката, доступного для Вас, Тюремное заключение началось.");
		}
		return 0;
	}
	
	if(Mobile[playerid] != INVALID_PLAYER_ID) {
		if(Pl::isLogged(Mobile[playerid])) {
			if(Mobile[Mobile[playerid]] == playerid) {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s говорит (телефон): %s", sendername, replacetext);
				ProxDetector(10.0, playerid, string);
				Send(Mobile[playerid], COLOR_FADE1, string);
			}
		}
		return 0;
	}
	
	if(Pl::Info[playerid][pMaskOn]) {
		format(string, sizeof(string), "Неизвесный говорит: %s", replacetext);
		ProxDetector(20.0, playerid, string);
		if(!IsPlayerInAnyVehicle(playerid)) {
			AnimClear[playerid] = 4;
			ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1);
		}
	} else {
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "* %s[%i] сказал: %s", sendername, playerid, replacetext);
		SetPlayerChatBubble(playerid, replacetext, COLOR_GREEN, 50.0, 10000);
		ProxDetector(20.0, playerid, string);
		if(!IsPlayerInAnyVehicle(playerid)) {
			AnimClear[playerid] = 4;
			ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1);
		}
	}
	
	return 0;
}

stock FixHour(hour) {
	hour = timeshift+hour;
	if(hour < 0) {
		hour = hour+24;
	} else if(hour > 23) {
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {

	new string[256];
	switch(dialogid) {
		case D_NONE : {
		
		}
		case D_WAIT : {
			if(!response) return KickEx(playerid, "Для игры на сервере, Вы должны авторизоватся!", COLOR_LIGHTRED);	
			if(Pl::Info[playerid][pWait] > 0) {
				format(dialog, sizeof dialog,"Дождитесь полной загрузки игры и нажмите ENTER!\n\
				Осталось секунд: %d\n\nПравила сервера - www.rp-grandworld.ru/rules", Pl::Info[playerid][pWait]);
				SPD(playerid, D_WAIT, 0, "Добро пожаловать на ..::[RP]GrandWorld::..!",dialog, "ENTER", "");
			} else {
				GetPlayerName(playerid, plname, 24);
				if(Pl::isRegged(playerid)) {
					format(dialog, sizeof dialog, "Вы зашли как %s! Пожалуйста, авторизуйтесь!\n\
					Пароль необходимо вводить без команды /login", plname);
					SPD(playerid, D_AUTH, DIALOG_STYLE_PASSWORD, "[RP]GRANDWORLD AUTORISATION. Введите ваш пароль!", dialog, "LOGIN", "CANCEL");
				} else {
					if(StuffInfo[sRegged]) {
						format(dialog, sizeof dialog, "Персонаж %s не зарегистрирован! Перед началом игры ознакомтесь с правилами.", plname);
						SPD(playerid, D_REGG, DIALOG_STYLE_MSGBOX, "[RP]GrandWorld: Rules", dialog, "OK", "CANCEL");
					} else {
						LoadFile("list/noregged.lst", src);
						format(dialog, sizeof dialog, src, plname);
						SPD(playerid, D_NONE, 0, "[RP]GRANDWORLD REGISTRATION", dialog, "OK", "");
						Kick(playerid);
					}
				}
			}
			return 1;
		}
		
		case D_AUTH : {
			if(!WrongLogin[playerid]) return AddBanList(playerid, -1, 30, "Попытка взлома аккаунта", 2);
			if(!response) return KickEx(playerid, "Для игры на сервере, Вы должны авторизоватся!", COLOR_LIGHTRED);
			if(!sscanf(inputtext, "s[36]", inputtext[0])) return onPlayerLogin(playerid, inputtext[0]);
			GetPlayerName(playerid, plname, 24);
			format(dialog, sizeof dialog, "Вы зашли как %s! Пожалуйста, авторизуйтесь!\nВ случаии 3-х кратного неверного ввода выдается ВРЕМЕННЫЙ БАН!\n\
			Оталось папыток ввода: %i\nПароль необходимо вводить без команды /login", plname, WrongLogin[playerid]);
			return SPD(playerid, D_AUTH, DIALOG_STYLE_PASSWORD, "[RP]GRANDWORLD AUTORISATION. Введите ваш пароль!", dialog, "LOGIN", "CANCEL");
		}
		
		case D_REGG : {
			if(response) {
				ShowDialog(playerid, D_REGG+1, DIALOG_STYLE_MSGBOX, "Правила сервера", "dialog/rules.txt", "OK", "CANCEL");
			} else {
				KickEx(playerid, "Для игры на сервере, Вы должны ознокомится с правилами!", COLOR_LIGHTRED);
			}
		}
		
		case D_REGG+1 : {
			if(response) {
				GetPlayerName(playerid, plname, 24);
				format(dialog, sizeof dialog, "\tДля регистрации персанажа %s\n\
				\tвведите пароль и нажите \"REGISTER\"\n\nНЕ рекомендуется использовать простые пароли. Чтобы\n\
				 Пароль был надежным, он должен содержать цифры,\nзаглавные и малые буквы латинского алфавита.", plname);
				SPD(playerid, D_REGG+2, DIALOG_STYLE_INPUT, "[RP]GRANDWORLD REGISTRATION", dialog, "REGISTER", "CANCEL");
			} else {
				KickEx(playerid, "Для игры на сервере, Вы должны принять его правила.", COLOR_GREY);
			}
		}
		
		case D_REGG+2 : {
			if(!response) return KickEx(playerid, "Для игры на сервере, Вы должны зарегистрироваться!", COLOR_LIGHTRED);
			if(!sscanf(inputtext, "s[36]", inputtext[0])) return onPlayerRegister(playerid, inputtext[0]);
			GetPlayerName(playerid, plname, 24);
			format(dialog, sizeof dialog, "\tДля регистрации персанажа %s\n\
			\tвведите пароль и нажите \"REGISTER\"\n\nНЕ рекомендуется использовать простые пароли. Чтобы\n\
			 Пароль был надежным, он должен содержать цифры,\nзаглавные и малые буквы латинского алфавита.", plname);
			SPD(playerid, D_REGG, 1, "[RP]GRANDWORLD REGISTRATION", dialog, "Регист.","Выход");
		}
		
		case D_REGG+3 : {
			Pl::Info[playerid][pSex] = response?2:1;
			SPD(playerid, D_REGG+4, 2, "Location", "Los Santos\nLas Venturas", "SELECT", "CANCEL");
			return 1;
		}
		
		case D_REGG+4 : {
			if(response) {
				Pl::Info[playerid][pOrigin] = (listitem + 1);
				new skin;
				Rac::TogglePlayerControllable(playerid, 0);
				Rac::SetPlayerInterior(playerid, 3);
				SetPlayerCameraPos(playerid, 198.9349,-134.0221,1003.4432);
				SetPlayerCameraLookAt(playerid, 199.1248,-130.0272,1003.5120);
				Rac::SetPlayerPos(playerid, 198.9982,-129.7869,1003.5152);
				SetPlayerFacingAngle(playerid, 177.7717);
				skin::goto(99+Pl::Info[playerid][pSex], skin::first, SelectCharPlace[playerid], skin);
				SetPlayerSkin(playerid, skin);
				ShowMenuForPlayer(SkinMenu, playerid);
			} else {
				SPD(playerid, D_REGG+3, DIALOG_STYLE_MSGBOX, "Sex", " Выберете пол вашего персонажа.", "ЖЕН", "МУЖ");
			}
			return 1;
		}
		
		case D_DONATE : {
			if(response) {
				SPD(playerid, D_NONE, DIALOG_STYLE_MSGBOX, "[RP]GrandWorld: Donate", "#ERR", "OK", "");
			}
		}
		
		case D_COLORS : {
			if(response) {
				if(listitem == 0) {
					SetPColor(playerid);
				} else {
					SetPlayerColor(playerid, Colors[--listitem][e_color]);
				}
				Send(playerid,COLOR_GREY, "*[RP]GrandWorld: Цвет установлен!");
			}
		}
		
		case D_MASK	: {
			if(response) {
				switch(listitem) {
					case 0 : {
						SetPlayerSkin(playerid,280);
						HideNameTag( playerid, true );
						Send(playerid,COLOR_LIGHTBLUE,"* Вы скрылись в одежде Полиции");
					}
					
					case 1 : {
						SetPlayerSkin(playerid,286);
						HideNameTag( playerid, true );
						Send(playerid,COLOR_LIGHTBLUE,"* Вы скрылись в одежде агента FBI");
					}
					
					case 2 : {
						SetPlayerSkin(playerid,287);
						HideNameTag( playerid, true );
						Send(playerid,COLOR_LIGHTBLUE,"* Вы скрылись в одежде Армии");
					}
					
					case 3 : {
						new rnd = random_ex(2);
						switch(Pl::Info[playerid][pSex]) {
							case 1 : {
								switch(rnd) {
									case 0 : SetPlayerSkin(playerid,7);
									case 1 : SetPlayerSkin(playerid,19);
									case 2 : SetPlayerSkin(playerid,22);
								}
							}
							
							case 2 : {
								switch(rnd) {
									case 0 : SetPlayerSkin(playerid,12);
									case 1 : SetPlayerSkin(playerid,233);
									case 2 : SetPlayerSkin(playerid,211);
								}
							}
						}
						HideNameTag(playerid, true);
						Send(playerid,COLOR_LIGHTBLUE,"Вы скрылись в одежде гражданского!");
					}
					
					case 4 : {
						HideNameTag(playerid, false);
						SetPlayerSkin(playerid, Pl::Info[playerid][pChar]);
						Send(playerid,COLOR_LIGHTBLUE,"Вы вернули себе свою одежду");
					}
				}
			}
		}
		
		case D_MASK+1 : {
			if(response) {
				switch(listitem) {
					case 0: {
						SetPlayerSkin(playerid, 120);
						HideNameTag( playerid, true );
						Send(playerid,COLOR_LIGHTBLUE,"* Вы скрылись в одежде Японца");
					}

					case 1: {
						SetPlayerSkin(playerid, 115);
						HideNameTag( playerid, true );
						Send(playerid,COLOR_LIGHTBLUE,"* Вы скрылись в одежде Коронос");
					}
					
					case 2: {
						SetPlayerSkin(playerid, 104);
						HideNameTag( playerid, true );
						Send(playerid,COLOR_LIGHTBLUE,"* Вы скрылись в одежде Баллас");
					}
					
					case 3: {
						new rnd = random_ex(2);
						switch(Pl::Info[playerid][pSex]) {
							case 1 : {
								switch(rnd) {
									case 0 : SetPlayerSkin(playerid,7);
									case 1 : SetPlayerSkin(playerid,19);
									case 2 : SetPlayerSkin(playerid,22);
								}
							}
							case 2 : {
								switch(rnd) {
									case 0 : SetPlayerSkin(playerid,12);
									case 1 : SetPlayerSkin(playerid,233);
									case 2 : SetPlayerSkin(playerid,211);
								}
							}
						}
						Send(playerid,COLOR_LIGHTBLUE,"* Вы скрылись в одежде гражданского");
					}
					case 4: {
						SetPlayerSkin(playerid, Pl::Info[playerid][pChar]);
						Send(playerid,COLOR_LIGHTBLUE,"* Вы вернули себе свою одежду");
					}
				}
			}
			
			return 1;
		}
		
		case D_BARN :
		{
			if(response)
			{
				new vehid = GetPlayerVehicleID(playerid);
				if(!vehid) return Send(playerid,COLOR_GREY,"* Вы не в машине!");
				if(AutoInfo[vehid][aDrugs] <= 0) return Send(playerid,COLOR_GREY,"* В вашей машине нету наркотиков!");
				if(StuffInfo[sADrugs] >= 20000) return Send(playerid,COLOR_GREY,"* Амбар переполнен! Максимум 20000 грамм.");
				inputtext[0] = AutoInfo[vehid][aDrugs]*50;
				StuffInfo[sADrugs] += AutoInfo[vehid][aDrugs]; Rac::GivePlayerMoney(playerid, inputtext[0]);
				format(string, sizeof(string), "* Вы продали %i грамм притону за %i$", AutoInfo[vehid][aDrugs], inputtext[0]);
				Send(playerid,COLOR_LIGHTBLUE,string);
				AutoInfo[vehid][aDrugs] = 0;
			}
			return 1;
		}
		
		case D_BARN+1 :
		{
			if( response )
			{
				new vehid = GetPlayerVehicleID(playerid);
				if( !vehid ) return Send(playerid,COLOR_GREY,"* Вы не в машине!");
				if(AutoInfo[vehid][aDrugs] <= 0) return Send(playerid,COLOR_GREY,"* В вашей машине нету наркотиков!");
				if(StuffInfo[sADrugs] >= 20000) return Send(playerid,COLOR_GREY,"* Амбар переполнен! Максимум 20000 грамм.");
				inputtext[0] = AutoInfo[vehid][aDrugs]*70;
				StuffInfo[sPDrugs] += AutoInfo[vehid][aDrugs]; Rac::GivePlayerMoney(playerid, inputtext[0]);
				format(string, sizeof(string), "* Вы продали %d грамм притону за %d$", AutoInfo[vehid][aDrugs], inputtext[0]);
				Send(playerid,COLOR_LIGHTBLUE,string);
				AutoInfo[vehid][aDrugs] = 0;
			}
			return 1;
		}
		
		case D_BARN+2 :
		{
			if( response )
			{
				new vehid = GetPlayerVehicleID(playerid);
				if( !vehid ) return Send(playerid,COLOR_GREY,"* Вы не в машине!");
				if( sscanf(inputtext, "i", inputtext[0]) )
				{
					SPD(playerid, D_BARN+2, 1, "Амбар", "Кол-во мака которое хотите взять.", "Взять", "Отмена");
				}
				else if(inputtext[0] > 100)
				{
					Send(playerid,COLOR_GREY,"* Больше 100 грамм возить нельзя!");
					SPD(playerid, D_BARN+2, 1, "Амбар", "Кол-во мака которое хотите взять.", "Взять", "Отмена");
				}
				else
				{
					inputtext[1] = inputtext[0]*50;
					if(Rac::GetPlayerMoney(playerid) < inputtext[1]) Send(playerid,COLOR_GREY,"* У Вас не хватает денег!");
					else if(AutoInfo[vehid][aDrugs]+inputtext[0] > AutoInfo[vehid][aMaxDrugs])
					{
						Send(playerid,COLOR_LIGHTRED2,"* За один раз можно везти 100 грамм!");
						SPD(playerid, D_BARN+2, 1, "Амбар", "Кол-во мака которое хотите взять.", "Взять", "Отмена");
					}
					else
					{
						AutoInfo[vehid][aDrugs] += inputtext[0];
						StuffInfo[sADrugs] -= inputtext[0];
						Rac::GivePlayerMoney(playerid, -inputtext[1]);
						format(string, sizeof(string), "* Вы взяли %d грамм за $%d", inputtext[0], inputtext[1]);
						Send(playerid,COLOR_LIGHTBLUE,string);
					}
				}
			}
			return 1;
		}
		
		case D_PORTABLE : {
			if(response) {
				if(strfind( inputtext, "Назначить контракт", true) != -1) {
					showContract(playerid, D_PORTABLE+1);
				} else if(strfind(inputtext, "Мой контракт", true) != -1) {
					showContract(playerid, D_PORTABLE+2);
				}
			}
			return 1;
		}
		
		case D_PORTABLE+1 : {
			if(response) {
				if(sscanf(inputtext, "u", inputtext[0])) {
					Send(playerid, COLOR_GREY, "* Введите id или имя хитмана. Например: Jack_Killer");
					showContract(playerid, D_PORTABLE+1);
				}
				
				else if(!Pl::isLogged(inputtext[0])) {
					Send(playerid, COLOR_GREY, "* Этот игрок не залогинен!");
					showContract(playerid, D_PORTABLE+1);
				}
				
				else if(GetFracID(inputtext[0]) != 8) {
					Send(playerid, COLOR_GREY, "* Этот игрок не хитман!");
					showContract(playerid, D_PORTABLE+1);
				}
				
				else if(Pl::Info[inputtext[0]][pContract] != -1) {
					Send(playerid, COLOR_GREY, "* Этот хитман уже занят!");
					showContract(playerid, D_PORTABLE+1);
				}
				
				else {
					setContract(playerid, GetPVarInt(playerid, "GiveHit"), inputtext[0]);
				}
			}
			
			return 1;
		}
		
		case D_PORTABLE+2 : {
			if(response) {
				if(removeContract(playerid)) {
					Send( playerid, COLOR_YELLOW, "* Вы отказалтсь от контракта!");
				}
			}
			
			return 1;
		}
		
		case D_HEALME : {
			if(response) {
				new houseid = Pl::Info[playerid][pLocal];
				if(!IsValidHouse(houseid)) return Send(playerid, COLOR_GREY, "* Invalid house id!");
				if(!IsPlayerInHouse(playerid, houseid, 9.0)) return Send(playerid, COLOR_GREY, "* Вы не в доме!");
				switch(listitem) {
					case 0 : {
						if(!HouseInfo[houseid][hHel]) return Send(playerid, COLOR_GREY, "* В доме нет аптечек!");
						if(Rac::GetPlayerHealth(playerid) >= 100.0) return Send(playerid, COLOR_GREY, "* Вы уже вылечены!");
						HouseInfo[houseid][hHel] --;
						Rac::SetPlayerHealth(playerid, 100.0);
						GameTextForPlayer(playerid, "~w~You~n~~r~healed", 1, 5000);
						format(string, sizeof(string), "* Оталось аптечек: %i штук.", HouseInfo[houseid][hHel]);
						Send(playerid, COLOR_GREEN, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					case 1 : {
						if(!HouseInfo[houseid][hArm]) return Send(playerid, COLOR_GREY, "* В доме нет брони!");
						if(Rac::GetPlayerArmour(playerid) >= 100.0) return Send(playerid, COLOR_GREY, "* Вы уже в бронежелете!");
						HouseInfo[houseid][hArm] --;
						Rac::SetPlayerArmour(playerid, 100.0);
						GameTextForPlayer(playerid, "~w~You are dressed ~r~~n~in body armor", 1, 5000);
						format(string, sizeof(string), "* Оталось брони: %i штук.", HouseInfo[houseid][hArm]);
						Send(playerid, COLOR_GREEN, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
				}
			}
			return 1;
		}
		
		case D_GIVE_PASS : {
			if(response) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					Send(playerid, COLOR_GREY, "* Вы ошиблись, попробуйте еще раз!");
					SPD(playerid, D_GIVE_PASS, 1, "{ffcf00}Паспортный стол", "Укажите ваш возраст", "Ввод", "Отмена");
				} else if(inputtext[0] < 10 || inputtext[0] > 90) {
					Send(playerid, COLOR_GREY, "* Вы ошиблись, попробуйте еще раз!");
					SPD(playerid, D_GIVE_PASS, 1, "{ffcf00}Паспортный стол", "Укажите ваш возраст", "Ввод", "Отмена");
				} else {
					Pl::Info[playerid][pAge] = inputtext[0];
					format(dialog, sizeof dialog, "Вы хотите купить паспорт?\n\
					Стоимость: $%i\nСрок действия: 20 дней", (500*Pl::Info[playerid][pLevel]));
					SPD(playerid, D_GIVE_PASS+1, 0, "{ffcf00}Паспортный стол", dialog, "Взять", "Отмена");
				}
			}
			return 1;
		}
		
		case D_GIVE_PASS+1 : {
			if(response) {
				if(Rac::GetPlayerMoney(playerid) >= (500*Pl::Info[playerid][pLevel])) {
					new currtime = gettime();
					Pl::Info[playerid][pPasport][0] = 1;
					Pl::Info[playerid][pPasport][1] = currtime;
					Pl::Info[playerid][pPasport][2] = ((20*86400) + currtime);
					Rac::GivePlayerMoney(playerid, -(500*Pl::Info[playerid][pLevel]));
					format(string, sizeof(string), "* Вы получили паспорт. Чтобы показать его игроку, введите /pasport.");
					Send(playerid, COLOR_LIGHTBLUE, string);
				} else {
					Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
				}
			}
			return 1;
		}
		
		case D_NETSTAT : {
			if(response) {
				Pl::NetStats[playerid] = INVALID_PLAYER_ID;
			}
			return 1;
		}

		case D_RADIO : {
			if(response) {
				new vehid = GetPlayerVehicleID(playerid);
				if(vehid && GetPlayerState(playerid) == 2) {
					if(!listitem) {
						AutoInfo[vehid][aRadio] = listitem;
						GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~FM OFF", 5000, 5);
						StopAudioStreamForPlayer(playerid);
					} else {
						AutoInfo[vehid][aRadio] = listitem;
						PlayAudioStreamForPlayer(playerid, RadioInfo[listitem][rUrl]);
						format(src, sizeof src,"~n~~n~~n~~n~~n~~n~~g~%s", RadioInfo[listitem][rName]);
						GameTextForPlayer(playerid, src, 5000, 5);
					}
				}
			}
			return 1;
		}
		
		case D_RADIO+1: {
			if(response) {
				if(!listitem) {
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~FM OFF", 5000, 5);
					StopAudioStreamForPlayer(playerid);
				} else {
					PlayAudioStreamForPlayer(playerid, RadioInfo[listitem][rUrl]);
					format(string, sizeof string,"~n~~n~~n~~n~~n~~n~~g~%s", RadioInfo[listitem][rName]);
					GameTextForPlayer(playerid, string, 5000, 5);
				}
			}
		}
		
		case D_GIFT: {
			if(response && Pl::Info[playerid][pLevel] == 1) {
				new bidx = GetBizIndex(7);
				Pl::Info[playerid][pLevel] = 2;
				Pl::Info[playerid][pCarLic] = 1;
				Pl::Info[playerid][pGunLic] = 1;
				Pl::Info[playerid][pFlyLic] = 1;
				Pl::Info[playerid][pBoatLic] = 1;
				Rac::GivePlayerMoney(playerid, 400000);
				Pl::Info[playerid][pLocal] = (bidx*99);
				SetPlayerScore(playerid, Pl::Info[playerid][pLevel]);
				
				Rac::SetPlayerInterior(playerid, 3);
				Rac::SetPlayerVirtualWorld(playerid, BizzInfo[bidx][bVirtual]);
				Rac::SetPlayerPos(playerid, 207.4872,-129.2266,1003.5078);
				Send(playerid, COLOR_YELLOW, "* Вы приняли подарок. Желаем удачной игры на сервере!");
			}

			return 1;
		}
		case D_GGUN:
		{
			if(response && Pl::isAdmin(playerid, SENIOR_ADMIN))
			{
				new setid, weaponid, amount;
				if(!sscanf(inputtext, "uii", setid, weaponid, amount))
				{
					if(!Pl::isLogged(setid)) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
					if(IsWrongWeponID(weaponid) && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GRAD1, "* Не правельный ID оружия!");
					if(amount < 1 || amount > 999 && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GRAD1, "* Не ниже 1 и не выше 999 патронов!");
					if( Rac::GetPlayerAmmo(setid, weaponid) >= 999 && !Pl::isAdmin(playerid, 5)) return Send(playerid, COLOR_GRAD1, "* У этого игрока слишком много оружия!");
					format(string, sizeof(string), "[AdmWarn] * %s применил команду /ggun к игроку %s[%s]", GetName(playerid), GetName(setid), FracInfo[ GetFracID(setid) ][ fName ]);
					SendToAdmin(COLOR_YELLOW, string, 1, 3); Rac::GivePlayerWeapon(setid, weaponid, amount);
				}
				else
				{
					LoadFile("dialog/ggun.lst", dialog);
					SPD(playerid, D_GGUN, DIALOG_STYLE_INPUT, "GIVEGUN", dialog, "Ввод", "Отмена");
				}
			}
			return 1;
		}
		case D_SETSTAT:
		{
			if(response && Pl::isAdmin(playerid, DEV_ADMIN))
			{
				new setid, statcode, amount;
				if(!sscanf(inputtext, "uii", setid, statcode, amount))
				{
					if(!IsPlayerConnected(setid)) return Send(playerid, COLOR_GREY, "* Этот игрок не подлючен!");
					if(!Pl::isLogged(setid)) return Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");

					switch(statcode)
					{
						case 1:
						{
							Pl::Info[setid][pLevel] = amount;
							format(string, sizeof(string), "* Уровень игрока был изменен на %d", amount);
							Send(playerid, COLOR_GREY, string);
						}
						case 2:
						{
							Pl::Info[setid][pExp] = amount;
							format(string, sizeof(string), "* Респекты игрока были изменены на %d", amount);
							Send(playerid, COLOR_GREY, string);
						}
						case 3:
						{
							if((amount<1000||amount>999999) && !Pl::isAdmin(playerid, DEV_ADMIN)) {
								Send(playerid, COLOR_GREY, "* Слишком длинный или короткий номер.");
								return 1;
							} else {
								format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Number` = '%i'", amount);
								if(Db::query(query) && Db::store_result() && Db::num_rows()) {
									format(string, sizeof(string), "* Номер телефона %d уже есть у другого игрока.", amount);
									Send(playerid, COLOR_GREY, string);
								} else {
									Pl::Info[setid][pNumber] = amount;
									format(string, sizeof(string), "* Номер телефона игрока был измунен на %d", amount);
									Send(playerid, COLOR_GREY, string);
								}
								Db::free_result();
							}
						}
						case 4:
						{
							if(!IsValidHouse(amount) && amount != 999) return Send(playerid, COLOR_GREY, "* Дома с таким ID не существует!");
							Pl::Info[setid][pHouseKey] = amount;
							format(string, sizeof(string), "* Дом игрока был изменен на %d", amount);
							Send(playerid, COLOR_GREY, string);
						}
						case 5:
						{
							if(!IsValidBiz(amount) && amount != 255) return Send(playerid, COLOR_GREY, "* Бизнеса с таким ID не существует!");
							Pl::Info[setid][pBizKey] = amount;
							format(string, sizeof(string), "* Бизнес игрока был изменен на %d", amount);
							Send(playerid, COLOR_GREY, string);
						}
						case 6:
						{
							if(amount < 0 || amount > 2) return Send(playerid, COLOR_GREY, "* Неверное значение.");
							Pl::Info[setid][pVip] = amount;
							format(string, sizeof(string), "* Вип статус игрока был изминен на %d", amount);
							Send(playerid, COLOR_GREY, string);
						}
						case 7:
						{
							if(amount < 0 || amount > 11) return Send(playerid, COLOR_GREY, "* Неверное значение.");
							if((amount == 7 || amount == 4) && !IsAMafia(setid)) return Send(playerid, COLOR_GREY, "* Он не мафиози!");
						
							Iter_Remove(JobPlayers[Pl::Info[setid][pJob]], playerid);
							Iter_Add(JobPlayers[amount], playerid);
							
							Pl::Info[setid][pJob] = amount;
							format(string, sizeof(string), "* Работа игрока была изменена %s", JobsInfo[Pl::Info[setid][pJob]][jName]);
							Send(playerid, COLOR_GREY, string);
						}
						default:
						{
							format(string, sizeof(string), "* Неверное значение.");
							LoadFile("list/setstat.lst", dialog);
							return SPD(playerid, D_SETSTAT, DIALOG_STYLE_INPUT, "SETSTAT", dialog, "Ввод", "Отмена");
						}
					}
					format(string, sizeof(string), "[AdmWarn] * %s применил команду /setstat к игроку %s[%s]. Statcode: %i",
					GetName(playerid), GetName(setid), FracInfo[ GetFracID(setid) ][ fName ], statcode); SendToAdmin(COLOR_YELLOW, string, 1, 3);
				}
				else
				{
					if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
					Send(playerid, COLOR_GREY, "* Вы нечего не ввели!");
					LoadFile("list/setstat.lst", dialog);
					return SPD(playerid, D_SETSTAT, DIALOG_STYLE_INPUT, "SETSTAT", dialog, "Ввод", "Отмена");
				}
			}
			return 1;
		}
		
		case D_EDIT: {
			if(response && Pl::isAdmin(playerid, DEV_ADMIN)) {
				new amount, name[16];
				if(!sscanf(inputtext, "s[24]i", name, amount)) {
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2) {
						new idx = GetCarID(playerid);
						if(idx == -1) return Send(playerid, COLOR_GREY, "* Эту машину нельзя редактировать!");
						if(!strcmp(name, "Model", true)) {
							if(amount < 400 || amount > 611) return Send(playerid, COLOR_GREY, "* Неверный ID моднли!");
							VehicleInfo[idx][vModel] = amount;
							AutoInfo[0][aMileage] = AutoInfo[VehicleInfo[idx][cID]][aMileage];
							GetVehiclePos(VehicleInfo[idx][cID], posx, posy, posz);
							GetVehicleZAngle(VehicleInfo[idx][cID], angle);
							DestroyVeh(VehicleInfo[idx][cID]);
							VehicleInfo[idx][cID] = CreateVeh
							(
								VehicleInfo[idx][vModel],
								VehicleInfo[idx][vPosX],
								VehicleInfo[idx][vPosY],
								VehicleInfo[idx][vPosZ],
								VehicleInfo[idx][vPosA],
								VehicleInfo[idx][vColor1],
								VehicleInfo[idx][vColor2],
								VehicleInfo[idx][vRespTime]
							);
							AutoInfo[VehicleInfo[idx][cID]][aMileage] = AutoInfo[0][aMileage];
							SetVehicleNumber(VehicleInfo[idx][cID]);
							UpdateToSQL(idx, 0);
							SetVehiclePos(VehicleInfo[idx][cID], posx, posy, posz);
							SetVehicleZAngle(VehicleInfo[idx][cID], angle);
							Rac::PutPlayerInVehicle(playerid, VehicleInfo[idx][cID], 0);
							
						} else if(strcmp(name, "Color1", true) == 0) {
							if(amount < -1 || amount > 126) return Send(playerid, COLOR_GREY, "* ID цвета не может быть ниже 0 или выше 126!");
							VehicleInfo[idx][vColor1] = amount;
							AutoInfo[0][aMileage] = AutoInfo[VehicleInfo[idx][cID]][aMileage];
							GetVehiclePos(VehicleInfo[idx][cID], posx, posy, posz);
							GetVehicleZAngle(VehicleInfo[idx][cID], angle);
							DestroyVeh(VehicleInfo[idx][cID]);
							VehicleInfo[idx][cID] = CreateVeh
							(
								VehicleInfo[idx][vModel],
								VehicleInfo[idx][vPosX],
								VehicleInfo[idx][vPosY],
								VehicleInfo[idx][vPosZ],
								VehicleInfo[idx][vPosA],
								VehicleInfo[idx][vColor1],
								VehicleInfo[idx][vColor2],
								VehicleInfo[idx][vRespTime]
							);
							AutoInfo[VehicleInfo[idx][cID]][aMileage] = AutoInfo[0][aMileage];
							SetVehicleNumber(VehicleInfo[idx][cID]);
							UpdateToSQL(idx, 0);
							SetVehiclePos(VehicleInfo[idx][cID], posx, posy, posz);
							SetVehicleZAngle(VehicleInfo[idx][cID], angle);
							Rac::PutPlayerInVehicle(playerid, VehicleInfo[idx][cID], 0);
							
						} else if(!strcmp(name, "Color2", true)) {
							if(amount < -1 || amount > 126) return Send(playerid, COLOR_GREY, "* ID цвета не может быть ниже 0 или выше 126!");
							VehicleInfo[idx][vColor2] = amount;
							AutoInfo[0][aMileage] = AutoInfo[VehicleInfo[idx][cID]][aMileage];
							GetVehiclePos(VehicleInfo[idx][cID], posx, posy, posz);
							GetVehicleZAngle(VehicleInfo[idx][cID], angle);
							DestroyVeh(VehicleInfo[idx][cID]);
							VehicleInfo[idx][cID] = CreateVeh
							(
								VehicleInfo[idx][vModel],
								VehicleInfo[idx][vPosX],
								VehicleInfo[idx][vPosY],
								VehicleInfo[idx][vPosZ],
								VehicleInfo[idx][vPosA],
								VehicleInfo[idx][vColor1],
								VehicleInfo[idx][vColor2],
								VehicleInfo[idx][vRespTime]
							);
							AutoInfo[VehicleInfo[idx][cID]][aMileage] = AutoInfo[0][aMileage];
							SetVehicleNumber(VehicleInfo[idx][cID]);
							UpdateToSQL(idx, 0);
							SetVehiclePos(VehicleInfo[idx][cID], posx, posy, posz);
							SetVehicleZAngle(VehicleInfo[idx][cID], angle);
							Rac::PutPlayerInVehicle(playerid, VehicleInfo[idx][cID], 0);
						
						} else if(!strcmp(name, "Resptime", true)) {
							if(amount < 300 || amount > 2000) return Send(playerid, COLOR_GREY, "* Время спавна может быть от 300 до 2000 сек.");
							VehicleInfo[idx][vRespTime] = amount;
							AutoInfo[0][aMileage] = AutoInfo[VehicleInfo[idx][cID]][aMileage];
							GetVehiclePos(VehicleInfo[idx][cID], posx, posy, posz);
							GetVehicleZAngle(VehicleInfo[idx][cID], angle);
							DestroyVeh(VehicleInfo[idx][cID]);
							VehicleInfo[idx][cID] = CreateVeh(
								VehicleInfo[idx][vModel],
								VehicleInfo[idx][vPosX],
								VehicleInfo[idx][vPosY],
								VehicleInfo[idx][vPosZ],
								VehicleInfo[idx][vPosA],
								VehicleInfo[idx][vColor1],
								VehicleInfo[idx][vColor2],
								VehicleInfo[idx][vRespTime]
							);
							AutoInfo[VehicleInfo[idx][cID]][aMileage] = AutoInfo[0][aMileage];
							SetVehicleNumber(VehicleInfo[idx][cID]);
							UpdateToSQL(idx, 0);
							SetVehiclePos(VehicleInfo[idx][cID], posx, posy, posz);
							SetVehicleZAngle(VehicleInfo[idx][cID], angle);
							Rac::PutPlayerInVehicle(playerid, VehicleInfo[idx][cID], 0);
						} else if(!strcmp(name, "Job", true)) {
							Iter_Remove(JobVehicles[VehicleInfo[idx][vJob]], VehicleInfo[idx][cID]);
							Iter_Add(JobVehicles[VehicleInfo[idx][vJob]], VehicleInfo[idx][cID]);
							VehicleInfo[idx][vJob] = amount;
							UpdateToSQL(idx, 0);
						}
						
						format(string, sizeof(string), "[AdmWarn] * %s применил команду /edit. Params: car %s %i", GetName(playerid), name, amount);
						SendToAdmin(COLOR_YELLOW, string, 4, 3);
					} else {
						for(new i; i < TOTAL_BIZZ; i++) {
							if(IsPlayerInRangeOfPoint(playerid, 3.0, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ])) {
								format(string, sizeof(string), "Biz: %d", i);
								Send(playerid, COLOR_GRAD2, string);
								if(amount >= 0) {
									if(!strcmp(name,"level",true) ) 			BizzInfo[i][bLevelNeeded] = amount;
									else if(!strcmp(name,"price",true))			BizzInfo[i][bBuyPrice] = amount;
									else if(!strcmp(name,"funds",true))			BizzInfo[i][bTill] = amount;
									else if(!strcmp(name,"prods",true))			BizzInfo[i][bProducts] = amount;
									else if(!strcmp(name,"maxprods",true))		BizzInfo[i][bMaxProducts] = amount;
									else if(!strcmp(name,"enterprice",true)) 	BizzInfo[i][bEntranceCost] = amount;
									else if(!strcmp(name,"priceprods",true)) 	BizzInfo[i][bPriceProd] = amount;
									format(string, sizeof(string), "[AdmWarn] * %s применил команду /edit. Params: %s %i", GetName(playerid), name, amount);
									SendToAdmin(COLOR_YELLOW, string, 3, 3);
									
									return 1;
								}
							}
						}
						for(new i = FIRST_HOUSE; i < TOTAL_HOUSES; i++) {
							if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hEnterx], HouseInfo[i][hEntery], HouseInfo[i][hEnterz])) {
								format(string, sizeof(string), "House: %d", i);
								Send(playerid, COLOR_GRAD2, string);
								if(amount >= 0) {
									if(!strcmp(name,"level",true)) 		HouseInfo[i][hLevel] = amount;
									else if(!strcmp(name,"price",true))	HouseInfo[i][hPrice] = amount;
									else if(!strcmp(name,"safe",true))	HouseInfo[i][hSafe] = amount;
									format(string, sizeof(string), "[AdmWarn] * %s применил команду /edit. Params: %s %i", GetName(playerid), name, amount);
									SendToAdmin(COLOR_YELLOW, string, 3, 3);
									
									return 1;
								}
							}
						}
					}
				}
				else
				{
					if(!Pl::isAdmin(playerid, DEV_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
					Send(playerid, COLOR_GREY, "* Вы нечего не ввели!");
					LoadFile("list/edit.lst", dialog);
					SPD(playerid, D_EDIT, DIALOG_STYLE_INPUT, "EDIT", dialog, "OK", "ОТМЕНА");
				}
			}
			return 1;
		}
		
		case D_WEATHER:
		{
			if(response)
			{
				SetWeather(WeatherInfo[listitem][wID]);
				Send(playerid, COLOR_LIGHTBLUE, "* Вы езменили погоду!");
			}
			return 1;
		}
		
		case D_ONLINE: {
			if(response) return ShowOnline(playerid,listitem);
			return 1;
		}
		
		case D_ONLINE+1: {
			if(response) {
				LoadFile("list/online.lst", dialog);
				SPD(playerid, D_ONLINE,DIALOG_STYLE_LIST, "[RP]GrandWorld Онлайн", dialog, "SELECT", "CANCEL");
			}
			return 1;
		}
		
		case D_OFFLINE : {
			if(response) return ShowOffline(playerid, listitem);
			return 1;
		}
		
		case D_OFFLINE+1: {
			if(response) {
				LoadFile("dialog/offline.lst", dialog);
				SPD(playerid, D_OFFLINE, DIALOG_STYLE_LIST,"[RP]GrandWorld: OFFLINE", dialog, "Выбор","Отмена");
			}
			return 1;
		}
		
		case D_RP_NICK: {
			if(response) {
				if(sscanf(inputtext, "s[24]", inputtext[0])) return SPD(playerid, D_RP_NICK, DIALOG_STYLE_INPUT, "[RP]GrandWorld: ВВЕДИТЕ НИК", "Вы вообще ничего не ввели.\nПридумайте и введите РП ник!", "ENTER", "");
				if(strcmp(GetName(playerid), inputtext[0], false) == 0) return SPD(playerid, D_RP_NICK, DIALOG_STYLE_INPUT, "[RP]GrandWorld: ВВЕДИТЕ НИК", "Этот ник вы имеете в данный момент.\nПридумайте и введите РП ник!", "ENTER", "");
				if(!regex_match_exid(inputtext[0], ValidRPName)) return SPD(playerid, D_RP_NICK, DIALOG_STYLE_INPUT, "[RP]GrandWorld: ВВЕДИТЕ НИК", "Вы ввели не РП ник.\nПридумайте и введите РП ник!", "ENTER", "");
				if(GetIDFormName(inputtext[0]) != -1) return SPD(playerid, D_RP_NICK, DIALOG_STYLE_INPUT, "[RP]GrandWorld: ВВЕДИТЕ НИК", "Такой ник уже есть на сервере!\nПридумайте и введите РП ник!", "ENTER", "");
				SetPVarString(playerid, "NewName", inputtext[0]);
				format(dialog, sizeof dialog, "Вы сменили себе ник на: %s\n\n\
				Ваша заявка на смену ника была отправлена администрации!\n\
				Пожалуйста дождитесь пока администратор проверит и одобрит вашу заявку!", inputtext[0]);
				SPD(playerid, D_NONE, 0,"[RP]GrandWorld: СМЕНА НИКА", dialog, "OK", "");
				GetPlayerName(playerid, plname, 24);
				format(string, sizeof(string), "[AdmWarn] * %s[%i] изминил ник на новый %s. Для одобрения: /accept nick [id], либо /cancel nick [id] для отмены.", plname, playerid, inputtext[0]);
				SendToAdmin(COLOR_YELLOW, string, 1, 3);
			} else {
				SPD(playerid, D_RP_NICK, DIALOG_STYLE_INPUT, "[RP]GrandWorld: ВВЕДИТЕ НИК", "У Вас не РП ник.\nИ вы должны его сминить на РП!\nПридумайте и введите РП ник!", "ENTER", "");
			}
			return 1;
		}
		
		case D_JOB : {
			if(response) {
				switch(GettingJob[playerid]) {
					case 2 : {
						if(GetFracID(playerid) != 7) return Send(playerid, COLOR_GREY, "* Вы не работаете в Правительстве!");
						if(6 <= Pl::Info[playerid][pRank] <= 8) {
							Pl::Info[playerid][pJob] = GettingJob[playerid];
							Pl::Info[playerid][pContractTime] = 5;
							GettingJob[playerid] = 0;
							Send(playerid, COLOR_LIGHTBLUE, "* Теперь, когда Вы подтвердили, что Вы хотите Работу, Вы получили 5-часовой Контракт.");
							Send(playerid, COLOR_LIGHTBLUE, "* Поздравления с Вашей новой Работой, напечатайте /help, чтобы видеть Вашу новую команду.");
						} else {
							Send(playerid, COLOR_GREY, "* Вы не юрист!");
						}
					}
					case 4, 7 : {
						if(!IsAMafia(playerid)) return Send(playerid, COLOR_GREY, "* Вы не мафиози!");
						Pl::Info[playerid][pJob] = GettingJob[playerid];
						Pl::Info[playerid][pContractTime] = 5;
						Iter_Add(JobPlayers[GettingJob[playerid]], playerid);
						
						GettingJob[playerid] = 0;
						LoadFile("dialog/job_success.lst", dialog);
						SPD(playerid, D_NONE, 0, "Трудоустройство", dialog, "OK", "");
					}
					default : {
						Pl::Info[playerid][pJob] = GettingJob[playerid];
						Pl::Info[playerid][pContractTime] = 5;
						Iter_Add(JobPlayers[GettingJob[playerid]], playerid);
						
						GettingJob[playerid] = 0;
						Send(playerid, COLOR_LIGHTBLUE, "* Теперь, когда Вы подтвердили, что Вы хотите Работу, Вы получили 5-часовой Контракт.");
						Send(playerid, COLOR_LIGHTBLUE, "* Поздравления с Вашей новой Работой, напечатайте /help, чтобы видеть Вашу новую команду.");
					}
				}
			}
			return 1;
		}
		
		case D_BANLIST : {
			if(response) {
				new playername[24];
				GetPVarString(playerid, "UnbanPlayer", playername, 24);
				DeletePVar(playerid, "UnbanPlayer");
				if(!Pl::isAdmin(playerid, SENIOR_ADMIN)) return Send(playerid, COLOR_GREY, "* Недостаточно прав!");
				if(RemoveBanList(GetIDFormName(playername))) {
					format(string, sizeof(string), "[UNBAN] * %s[%i] разбанил игрока %s", GetName(playerid), playerid, playername);
					SendToAdmin(COLOR_LIGHTBLUE, string, 1, 3);
				}
			}
			return 1;
		}
		case D_HMENU: {
			new hid = Pl::Info[playerid][pHouseKey];
			if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
			if(response) {
				switch(listitem) {
					case 0: return PrintHouseInfo(playerid, hid);
					case 1: {
						if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* Это не ваш дом!");
						if(!IsPlayerInHouse(playerid, hid, 20.0)) return Send(playerid, COLOR_GREY, "Вы сейчас не в своем доме!");
						return SafeMenu(playerid, hid);
					}
					case 2:
					{
						if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома или это не ваш дом!");
						return SPD(playerid, D_HMENU+4, DIALOG_STYLE_LIST, "[House Menu] > Аренда", "Вкл./Откл. аренду\nЦена аренды", "ENTER", "CANCLE");
					}
					case 3:
					{
						if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
						if(!IsPlayerInHouse(playerid, hid, 20.0)) return Send(playerid, COLOR_GREY, "Вы сейчас не в своем доме!");
						format(dialog, sizeof(string), "Аптечек\t[ {33AA33}%i{ffffff} ]\t[ Лимит: {AA3333}100 штук{ffffff} ]\n", HouseInfo[hid][hHel]);
						strcat(dialog, "Купить\t\t[ {33AA33}$1000{ffffff} ]");
						return SPD(playerid, D_HMENU+1, DIALOG_STYLE_LIST, "[House Menu] > Аптечки", dialog, "Выбор", "Назад");
					}
					case 4:
					{
						if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
						if(!IsPlayerInHouse(playerid, hid, 20.0)) return Send(playerid, COLOR_GREY, "Вы сейчас не в своем доме!");
						if(!IsACop(playerid)) return SPD(playerid, D_NONE, 0, "[House Menu] > Бронижелет", "Только законики могут взять себе бронижелет!", "OK", "");
						if(Pl::Info[playerid][pRank] < 3) return SPD(playerid, D_NONE, 0, "[House Menu] > Бронижелет", "Вы должны иметь 3-й ранг что-бы поставить бронижелет!", "OK", "");
						format(dialog, sizeof(string), "Бронежилетов\t\t[ {33AA33}%i{ffffff} ]\t[ Лимит: {AA3333}50 штук{ffffff} ]\n", HouseInfo[hid][hHel]);
						strcat(dialog, "Купить\t\t\t[ {33AA33}$1000{ffffff} ]");
						return SPD(playerid, D_HMENU+2, DIALOG_STYLE_LIST, "[House Menu] > Бронежилет", dialog, "Выбор", "Назад");
					}
					case 5:
					{
						if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
						if(!IsPlayerInHouse(playerid, hid, 20.0)) return Send(playerid, COLOR_GREY, "Вы сейчас не в своем доме!");
						if(HouseInfo[hid][hTv] == 1) {
							return SPD(playerid, D_NONE, 0,
							"[House Menu] > Телевизор", "У Вас дома уже есть телевизор!", "OK", "");
						} else {
							return SPD(playerid, D_HMENU+3, 0,
							"[House Menu] > Телевизор",
							"Вы хотите купить телевизор?\n\
							Телевизор стоит: $20000", "КУПИТЬ", "НЕТ");
						}
					}
					case 6:
					{
						if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
						LoadFile("list/hmenu_auto.lst", dialog);
						SPD(playerid, D_HMENU+10, DIALOG_STYLE_LIST, "[House Menu] > Авто", dialog, "Выбор", "Назад");
					}
					case 7:
					{
						if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
						if(!IsPlayerInHouse(playerid, hid, 15.0)) return SPD(playerid, D_NONE, 0, "[House Menu] Info", "Вы должны находится в своем доме чтобы изменить интерьер!", "OK", "");
						SetPVarInt(playerid, "SelectedItem", 0);
						Rac::SetPlayerPos(playerid, HouseInt[0][intX], HouseInt[0][intY], HouseInt[0][intZ]);
						Rac::SetPlayerInterior(playerid, HouseInt[0][intH]); Rac::SetPlayerVirtualWorld(playerid, 999);
						SetCameraBehindPlayer(playerid); ShowMenuForPlayer(IntMenu, playerid);
					}
				}
			}
			return 1;
		}
		case D_HMENU+1: {
			if(response) {
				new hid = Pl::Info[playerid][pHouseKey];
				if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				switch(listitem) {
					case 0: {
						if(Rac::GetPlayerHealth(playerid) >= 100.0) return Send(playerid, COLOR_GREY, "* Вы уже в вылечены!");
						if(!HouseInfo[hid][hHel]) return Send(playerid, COLOR_GREY, "* В доме нет аптечек!");
						HouseInfo[hid][hHel] --;
						Rac::SetPlayerHealth(playerid, 100.0);
						GameTextForPlayer(playerid, "~w~You~n~~r~healed", 5000, 1);
					}
					case 1: {
						new bidx = GetBizIndex(6);
						if(!BizzInfo[bidx][bProducts]) return GameTextForPlayer(playerid, "~r~Out of stock", 5000, 1);
						if(HouseInfo[hid][hHel] >= 100) return Send(playerid, COLOR_GREY, "* В доме максимальное кол-во аптечек!");
						if(HouseInfo[hid][hSafe] < 1000) return Send(playerid, COLOR_GREY, "* На счету дома недостаточно средств!");
						HouseInfo[hid][hHel] ++; HouseInfo[hid][hSafe] -= 1000; BizzInfo[bidx][bTill] += 1000;
						BizzInfo[bidx][bProducts]--; PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(dialog, sizeof(string), "Аптечек\t[ {33AA33}%i{ffffff} ]\t[ Лимит: {AA3333}100 штук{ffffff}]\n", HouseInfo[hid][hHel]);
						strcat(dialog, "Купить\t\t[ {33AA33}$1000{ffffff} ]");
						SPD(playerid, D_HMENU+1, DIALOG_STYLE_LIST, "[House Menu] > Аптечки", dialog, "Выбор", "Назад");
					}
				}
			} else {
				LoadFile("list/hmenu.lst", dialog);
				SPD(playerid, D_HMENU, DIALOG_STYLE_LIST, "[House Menu]", dialog, "ENTER", "CANCLE");
			}
			return 1;
		}
		case D_HMENU+2:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new hid = Pl::Info[playerid][pHouseKey];
						if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
						if(Rac::GetPlayerArmour(playerid) >= 100.0) return Send(playerid, COLOR_GREY, "* Вы уже в бронежилете!");
						if(!HouseInfo[hid][hArm]) return Send(playerid, COLOR_GREY, "* В доме нет бронежилета!");
						HouseInfo[hid][hArm] --; Rac::SetPlayerArmour(playerid, 100.0);
						return GameTextForPlayer(playerid, "~w~You are dressed ~r~~n~in body armor", 1, 5000);
					}
					case 1:
					{
						new hid = Pl::Info[playerid][pHouseKey]; new bidx = GetBizIndex(6);
						if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
						if(!BizzInfo[bidx][bProducts]) return GameTextForPlayer(playerid, "~r~Out of stock", 1, 5000);
						if(HouseInfo[hid][hArm] >= 50) return Send(playerid, COLOR_GREY, "* В доме максимальное кол-во брони!");
						if(HouseInfo[hid][hSafe] < 2000) return Send(playerid, COLOR_GREY, "* На счету дома недостаточно средств!");
						HouseInfo[hid][hArm] ++; HouseInfo[hid][hSafe] -= 2000; BizzInfo[bidx][bTill] += 2000;
						BizzInfo[bidx][bProducts]--; PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(dialog, sizeof(string), "Бронежилетов\t[ {33AA33}%i{ffffff} ]\t[ Лимит: {AA3333}50 штук{ffffff} ]\n", HouseInfo[hid][hHel]);
						strcat(dialog, "Купить\t\t[ {33AA33}$1000{ffffff} ]");
						return SPD(playerid, D_HMENU+2, DIALOG_STYLE_LIST, "[House Menu] > Бронежилет", dialog, "Выбор", "Назад");
					}
				}
			}
			else
			{
				LoadFile("list/hmenu.lst", dialog);
				return SPD(playerid, D_HMENU, DIALOG_STYLE_LIST, "[House Menu]: Выберете пункт", dialog, "ENTER", "CANCLE");
			}
		}
		case D_HMENU+3:
		{
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey];
				if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				new bidx = GetBizIndex(6);
				if(HouseInfo[hid][hSafe] < 20000) return Send(playerid, COLOR_GREY, "* На счету дома недостаточно средств!");
				HouseInfo[hid][hTv] = 1;
				HouseInfo[hid][hSafe] -= 20000;
				BizzInfo[bidx][bTill] += 20000;
				BizzInfo[bidx][bProducts]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Send(playerid, COLOR_GRAD5, "Вы можете теперь смотреть телек, пишите /tv.");
			}
			else
			{
				LoadFile("list/hmenu.lst", dialog);
				return SPD(playerid, D_HMENU, DIALOG_STYLE_LIST, "[House Menu]: Выберете пункт", dialog, "ENTER", "CANCLE");
			}
		}
		case D_HMENU+4:
		{
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey];
				if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				switch(listitem)
				{
					case 0:
					{
						switch(HouseInfo[hid][hRent])
						{
							case 0:
							{
								HouseInfo[hid][hRent] = 1;
								return SPD(playerid, D_NONE, 0,
								"[House Menu] > Аренда",
								"Аренда была включена!", "ОК", "");
							}
							case 1:
							{
								HouseInfo[hid][hRent] = 0;
								return SPD(playerid, D_NONE, 0,
								"[House Menu] > Аренда",
								"Аренда была отключена!", "ОК", "");
							}
						}
					}
					case 1:
					{
						return SPD(playerid, D_HMENU+5, DIALOG_STYLE_INPUT,
						"[House Menu] > Аренда",
						"Введите сумму аренды.\n\
						Максемальная сумма: $99999","Ввод", "Назад");
					}
				}
			}
			else
			{
				LoadFile("list/hmenu.lst", dialog);
				return SPD(playerid, D_HMENU, DIALOG_STYLE_LIST, "[House Menu]", dialog, "Выбор", "Назад");
			}
		}
		case D_HMENU+5:
		{
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey];
				if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					return SPD(playerid, D_HMENU+5, DIALOG_STYLE_INPUT,
					"[House Menu] > Аренда",
					"Введите сумму аренды.\n\
					Максемальная сумма: $99999","Ввод", "Назад");
				}
				if(inputtext[0] < 1 || inputtext[0] > 99999)
				{
					Send(playerid, COLOR_GREY, "* Стоимость аренды может быть от $1 до $9999");
					return SPD(playerid, D_HMENU+5, DIALOG_STYLE_INPUT,
					"[House Menu] > Аренда",
					"Введите сумму аренды.\n\
					Максемальная сумма: $99999", "Ввод", "Назад");
				}
				HouseInfo[hid][hRentPrice] = inputtext[0];
				format(string, sizeof(string), "Цена аренды была установлена!\nТепрь аренда стоит:\t$%d", inputtext[0]);
				SPD(playerid, D_NONE, 0, "[House Menu] > Аренда", string, "OK", "");
			}
			else
			{
				return SPD(playerid, D_HMENU+4, DIALOG_STYLE_LIST,
				"[House Menu] > Аренда",
				"Вкл./Откл. аренду\n\
				Цена аренды", "Выбор", "Назад");
			}
		}
		case D_HMENU+6:
		{
			new hid = Pl::Info[playerid][pHouseKey];
			if(response)
			{
				if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				switch(listitem)
				{
					case 0:
					{
						return SPD(playerid, D_HMENU+7, DIALOG_STYLE_INPUT,
						"[House Menu] > Сейф", "Сколько хотите положить?", "Ввод", "Назад");
					}
					case 1:
					{
						return  SPD(playerid, D_HMENU+8, DIALOG_STYLE_INPUT,
						"[House Menu] > Сейф", "Сколько хотите взять?", "Ввод", "Назад");
					}
				}
			}
			else
			{
				SafeMenu(playerid, hid);
			}
			return 1;
		}
		case D_HMENU+7:
		{

			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey];
				if(sscanf(inputtext, "d", inputtext[0])) {
					SPD(playerid, D_HMENU+7, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф", "Сколько хотите положить?", "Ввод", "Назад");
				}
				else if((HouseInfo[hid][hSafe] + inputtext[0]) > 10000000)
				{
					Send(playerid, COLOR_GREY, "* В сейф столько не влезит!");
					SPD(playerid, D_HMENU+7, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф", "Сколько хотите положить?", "Ввод", "Назад");
				}
				else if(inputtext[0] < 1 || inputtext[0] > Rac::GetPlayerMoney(playerid)) {
					Send(playerid, COLOR_GREY, "* У Вас нет столько денег!");
					SPD(playerid, D_HMENU+7, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф", "Сколько хотите положить?", "Ввод", "Назад");
				} else {
					HouseInfo[hid][hSafe] += inputtext[0];
					Rac::GivePlayerMoney(playerid, -inputtext[0]);
					format(string, sizeof(string), "Вы положили в сейф: {33AA33}$%d", inputtext[0]);
					SPD(playerid, D_NONE, 0, "[House Menu] > Сейф", string, "OK", "");
				}
			} else {
				SPD(playerid, D_HMENU+6, DIALOG_STYLE_LIST,
				"[House Menu] > Сейф", "Положить\nВзять", "Выбор", "Назад");
			}
			return 1;
		}
		case D_HMENU+8: {
			if(response) {
				new hid = Pl::Info[playerid][pHouseKey];
				if(sscanf(inputtext, "d", inputtext[0])) {
					SPD(playerid, D_HMENU+7, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф","Сколько хотите взять?", "Ввод", "Назад");
				} else if(inputtext[0] < 1 || inputtext[0] > HouseInfo[hid][hSafe]) {
					Send(playerid, COLOR_GREY, "* В сейфе не столько денег!");
					SPD(playerid, D_HMENU+7, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф","Сколько хотите взять?", "Ввод", "Назад");
				} else {
					HouseInfo[hid][hSafe] -= inputtext[0];
					Rac::GivePlayerMoney(playerid, inputtext[0]);
					format(string, sizeof(string), "Вы взяли из сейфа: {33AA33}$%d", inputtext[0]);
					SPD(playerid, D_NONE, 0, "[House Menu] > Сейф", string, "OK", "");
				}
			} else {
				SPD(playerid, D_HMENU+6, DIALOG_STYLE_LIST, "[House Menu] > Сейф", "Положить\nВзять", "Выбор", "Назад");
			}
		}
		
		case D_HMENU+10: {
			if(response) {
				switch(listitem) {
					case 0 : {
						dialog[0] = '\0';
						for(new i; i < sizeof(carsA); i++)
						{
							format(string, sizeof(string), "{33AA33}[$%i]\t{ffffff}%s\n", carsA[i][1], VehicleNames[carsA[i][0]-400]);
							strcat(dialog, string);
						}
						SetPVarInt(playerid, "SelectedCar", listitem);
						SPD(playerid, D_HMENU+13, DIALOG_STYLE_LIST, "[House Menu] > Новая машина", dialog, "Выбор", "Назад");
					}
					case 1 : {
						dialog[0] = '\0';
						for(new i; i < sizeof(carsB); i++)
						{
							format(string, sizeof(string), "{33AA33}[$%i]\t{ffffff}%s\n", carsB[i][1], VehicleNames[carsB[i][0]-400]);
							strcat(dialog, string);
						}
						SetPVarInt(playerid, "SelectedCar", listitem);
						SPD(playerid, D_HMENU+13, DIALOG_STYLE_LIST, "[House Menu] > Новая машина", dialog, "Выбор", "Назад");
					}
					case 2 : {
						dialog[0] = '\0';
						for(new i; i < sizeof(carsC); i++)
						{
							format(string, sizeof(string), "{33AA33}[$%i]\t{ffffff}%s\n", carsC[i][1], VehicleNames[carsC[i][0]-400]);
							strcat(dialog, string);
						}
						SetPVarInt(playerid, "SelectedCar", listitem);
						SPD(playerid, D_HMENU+13, DIALOG_STYLE_LIST, "[House Menu] > Новая машина", dialog, "Выбор", "Назад");
					}
					case 3 : {
						dialog[0] = '\0';
						for(new i; i < sizeof(carsD); i++)
						{
							format(string, sizeof(string), "{33AA33}[$%i]\t{ffffff}%s\n", carsD[i][1], VehicleNames[carsD[i][0]-400]);
							strcat(dialog, string);
						}
						SetPVarInt(playerid, "SelectedCar", listitem);
						SPD(playerid, D_HMENU+13, DIALOG_STYLE_LIST, "[House Menu] > Новая машина", dialog, "Выбор", "Назад");
					}
					case 4 : {
						dialog[0] = '\0';
						for(new i; i < sizeof(carsE); i++) {
							format(string, sizeof(string), "{33AA33}[$%i]\t{ffffff}%s\n", carsE[i][1], VehicleNames[carsE[i][0]-400]);
							strcat(dialog, string);
						}
						SetPVarInt(playerid, "SelectedCar", listitem);
						SPD(playerid, D_HMENU+13, DIALOG_STYLE_LIST, "[House Menu] > Авто", dialog, "Выбор", "Назад");
					}
					case 5 : {
						new hid = Pl::Info[playerid][pHouseKey];
						if(HouseInfo[hid][hVeh] < 400 || HouseInfo[hid][hVeh] > 611) {
							SPD(playerid, D_NONE, 0, "[House Menu] > Авто", "У Вас нет домашнего авто!", "OK", "");
						} else {
							LoadFile("list/colors.lst", dialog);
							SPD(playerid, D_HMENU+24, DIALOG_STYLE_INPUT, "[House Menu] > Авто > Покраска", dialog, "Выбор", "Назад");
						}
					}
				}
			}
			else
			{
				LoadFile("list/hmenu.lst", dialog);
				SPD(playerid, D_HMENU, DIALOG_STYLE_LIST, "[House Menu]", dialog, "Выбор", "Назад");
			}
			return 1;
		}
		case D_HMENU+11:
		{
			new idx = GetPVarInt(playerid, "SelectedItem");
			if(idx == -1) return Send(playerid, -1, "Error");
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey]; new bidx = GetBizIndex(6);
				if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				if(!BizzInfo[bidx][bProducts]) return GameTextForPlayer(playerid, "~r~Out of Stock", 1, 5000);
				if(HouseInfo[hid][hSafe] < HouseInt[idx][intPrice]) return Send(playerid, COLOR_GREY, "* На счету дома недастаточно средств!");
				SetPVarInt(playerid, "SelectedItem", -1);
				HouseInfo[hid][hInt] = HouseInt[idx][intH];
				HouseInfo[hid][hExitx] = HouseInt[idx][intX];
				HouseInfo[hid][hExity] = HouseInt[idx][intY];
				HouseInfo[hid][hExitz] = HouseInt[idx][intZ];
				HouseInfo[hid][hSafe] -= HouseInt[idx][intPrice];
				BizzInfo[bidx][bTill] += HouseInt[idx][intPrice]; BizzInfo[bidx][bProducts]--;
				Send(playerid, COLOR_LIGHTBLUE, "* Интерьер был успешно изменен!"); Rac::SpawnPlayer(playerid);
			}
			else
			{
				SetPVarInt(playerid, "SelectedItem", idx);
				Rac::SetPlayerPos(playerid, HouseInt[idx][intX], HouseInt[idx][intY], HouseInt[idx][intZ]);
				Rac::SetPlayerInterior(playerid, HouseInt[idx][intH]);
				Rac::SetPlayerVirtualWorld(playerid, 999);
				SetCameraBehindPlayer(playerid); ShowMenuForPlayer(IntMenu, playerid);
			}
			return 1;
		}
		case D_HMENU+12:
		{
			if(response)
			{
				SetPVarInt(playerid, "SelectedItem", -1);
				Rac::SpawnPlayer(playerid);
			}
			else
			{
				new idx = GetPVarInt(playerid, "SelectedItem");
				if(idx == -1) return Send(playerid, -1, "Error");
				SetPVarInt(playerid, "SelectedItem", idx);
				Rac::SetPlayerPos(playerid, HouseInt[idx][intX], HouseInt[idx][intY], HouseInt[idx][intZ]);
				Rac::SetPlayerInterior(playerid, HouseInt[idx][intH]);
				Rac::SetPlayerVirtualWorld(playerid, 999);
				SetCameraBehindPlayer(playerid); ShowMenuForPlayer(IntMenu, playerid);
			}
			return 1;
		}
		case D_HMENU+13:
		{
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey], bidx = GetBizIndex(43);
				if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* Вы бомж, сначала купите дом.");
				if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* Вы бомж, сначала купите дом.");
				if(!IsPlayerInSquare2D(playerid, 50.0, HouseInfo[hid][hEnterx], HouseInfo[hid][hEntery])) return Send(playerid, COLOR_GREY, "* Вы слишком далеко от дома!");
				if(!BizzInfo[bidx][bProducts]) return GameTextForPlayer(playerid, "~r~Out of Stock", 1, 5000);

				switch(GetPVarInt(playerid, "SelectedCar"))
				{
					case 0:
					{
						if(HouseInfo[hid][hSafe] < carsA[listitem][1]) return Send(playerid, COLOR_GREY, "* В сейфе дома нет столько денег!");
						CarUpgrade(playerid, hid, carsA[listitem][0]);
						HouseInfo[hid][hSafe] -= carsA[listitem][1];
						BizzInfo[bidx][bTill] += carsA[listitem][1]; BizzInfo[bidx][bProducts] --;
						format(string, sizeof(string), "* Новая Модернизация: Ваш автомобиль теперь %s", VehicleNames[carsA[listitem][0]-400]);
						Send(playerid, COLOR_LIGHTBLUE, string);
					}
					case 1:
					{
						if(HouseInfo[hid][hSafe] < carsB[listitem][1]) return Send(playerid, COLOR_GREY, "* В сейфе дома нет столько денег!");
						CarUpgrade(playerid, hid, carsB[listitem][0]);
						HouseInfo[hid][hSafe] -= carsB[listitem][1];
						BizzInfo[bidx][bTill] += carsB[listitem][1]; BizzInfo[bidx][bProducts] --;
						format(string, sizeof(string), "* Новая Модернизация: Ваш автомобиль теперь %s", VehicleNames[carsB[listitem][0]-400]);
						Send(playerid, COLOR_LIGHTBLUE, string);
					}
					case 2:
					{
						if(HouseInfo[hid][hSafe] < carsC[listitem][1]) return Send(playerid, COLOR_GREY, "* В сейфе дома нет столько денег!");
						CarUpgrade(playerid, hid, carsC[listitem][0]);
						HouseInfo[hid][hSafe] -= carsC[listitem][1];
						BizzInfo[bidx][bTill] += carsC[listitem][1]; BizzInfo[bidx][bProducts] --;
						format(string, sizeof(string), "* Новая Модернизация: Ваш автомобиль теперь %s", VehicleNames[carsC[listitem][0]-400]);
						Send(playerid, COLOR_LIGHTBLUE, string);
					}
					case 3:
					{
						if(HouseInfo[hid][hSafe] < carsD[listitem][1]) return Send(playerid, COLOR_GREY, "* В сейфе дома нет столько денег!");
						CarUpgrade(playerid, hid, carsD[listitem][0]);
						HouseInfo[hid][hSafe] -= carsD[listitem][1];
						BizzInfo[bidx][bTill] += carsD[listitem][1]; BizzInfo[bidx][bProducts] --;
						format(string, sizeof(string), "* Новая Модернизация: Ваш автомобиль теперь %s", VehicleNames[carsD[listitem][0]-400]);
						Send(playerid, COLOR_LIGHTBLUE, string);
					}
					case 4:
					{
						if(HouseInfo[hid][hSafe] < carsE[listitem][1]) return Send(playerid, COLOR_GREY, "* В сейфе дома нет столько денег!");
						CarUpgrade(playerid, hid, carsE[listitem][0]);
						HouseInfo[hid][hSafe] -= carsE[listitem][1];
						BizzInfo[bidx][bTill] += carsE[listitem][1]; BizzInfo[bidx][bProducts] --;
						format(string, sizeof(string), "* Новая Модернизация: Ваш автомобиль теперь %s", VehicleNames[carsE[listitem][0]-400]);
						Send(playerid, COLOR_LIGHTBLUE, string);
					}
				}
				SetPVarInt(playerid, "SelectedCar", -1);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			} else {
				LoadFile("list/hmenu_auto.lst", dialog);
				SPD(playerid, D_HMENU+10, DIALOG_STYLE_LIST, "[House Menu] > Авто", dialog, "Выбор", "Назад");
			}
			return 1;
		}
		
		case D_HMENU+24 : {
			if(response) {
				if(sscanf(inputtext, "p<,>ii", inputtext[0], inputtext[1])) {
					Send(playerid, COLOR_GREY, "* Не валидная строка, повторите ввод!");
					LoadFile("list/colors.lst", dialog);
					return SPD(playerid, D_HMENU+24, DIALOG_STYLE_INPUT, "[House Menu] > Авто > Покраска", dialog, "Выбор", "Назад");
				} else if(inputtext[0] < 0 || inputtext[0] > 127) {
					Send(playerid, COLOR_GREY, "* Не валидная строка, повторите ввод!");
					LoadFile("list/colors.lst", dialog);
					return SPD(playerid, D_HMENU+24, DIALOG_STYLE_INPUT, "[House Menu] > Авто > Покраска", dialog, "Выбор", "Назад");
				} else if(inputtext[1] < 0 || inputtext[1] > 127) {
					Send(playerid, COLOR_GREY, "* Не валидная строка, повторите ввод!");
					LoadFile("list/colors.lst", dialog);
					return SPD(playerid, D_HMENU+24, DIALOG_STYLE_INPUT, "[House Menu] > Авто > Покраска", dialog, "Выбор", "Назад");
				}
				new hid = Pl::Info[playerid][pHouseKey], bidx = GetBizIndex(43);
				if(!IsPlayerInSquare2D(playerid, 50.0, HouseInfo[hid][hEnterx], HouseInfo[hid][hEntery])) return Send(playerid, COLOR_GREY, "* Вы слишком далеко от дома!");
				if(!BizzInfo[bidx][bProducts]) return GameTextForPlayer(playerid, "~r~Out of Stock", 1, 5000);
				if(HouseInfo[hid][hSafe] < 10000) return Send(playerid, COLOR_GREY, "* В сейфе дома нет столько денег!");
				ChangeVehicleColor(HouseInfo[hid][hAuto], inputtext[0], inputtext[1]);
				HouseInfo[hid][hvCol1] = inputtext[0];
				HouseInfo[hid][hvCol2] = inputtext[1];
				format(string, sizeof(string), "* Новая Модернизация: Ваш автомобиль был перекрашен в цвета %i/%i", inputtext[0], inputtext[1]);
				Send(playerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(playerid, "~r~-$10000", 5000, 1);
			} else {
				LoadFile("list/hmenu_auto.lst", dialog);
				SPD(playerid, D_HMENU+10, DIALOG_STYLE_LIST, "[House Menu] > Авто", dialog, "Выбор", "Назад");
			}
			return 1;
		}
		
		case D_HMENU+14:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						return SPD(playerid, D_HMENU+6, DIALOG_STYLE_LIST,
						"[House Menu] > Сейф > Денги",
						"Положить\nВзять", "Выбор", "Назад");
					}
					case 1:
					{
						return SPD(playerid, D_HMENU+15, DIALOG_STYLE_LIST,
						"[House Menu] > Сейф > Наркотики",
						"Положить\nВзять", "Выбор", "Назад");
					}
					case 2:
					{
						return SPD(playerid, D_HMENU+18, DIALOG_STYLE_LIST,
						"[House Menu] > Сейф > Матиреалы",
						"Положить\nВзять", "Выбор", "Назад");
					}
					case 3:
					{
						SafeMenu(playerid, Pl::Info[playerid][pHouseKey], 1);
					}
				}
			}
			else
			{
				LoadFile("list/hmenu.lst", dialog);
				return SPD(playerid, D_HMENU, DIALOG_STYLE_LIST, "[House Menu]", dialog, "Выбор", "Отмена");
			}
		}
		case D_HMENU+15:
		{
			new hid = Pl::Info[playerid][pHouseKey];
			if(response)
			{
				if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				switch(listitem)
				{
					case 0:
					{
						return SPD(playerid, D_HMENU+16, DIALOG_STYLE_INPUT,
						"[House Menu] > Сейф > Наркотики",
						"Сколько хотите положить?", "Ввод", "Назад");
					}
					case 1:
					{
						return SPD(playerid, D_HMENU+17, DIALOG_STYLE_INPUT,
						"[House Menu] > Сейф > Наркотики",
						"Сколько хотите взять?", "Ввод", "Назад");
					}
				}
			}
			else
			{
				SafeMenu(playerid, hid);
			}
		}
		case D_HMENU+16:
		{
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey];
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					return SPD(playerid, D_HMENU+16, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Наркотики > Положить",
					"Сколько хотите положить?", "Ввод", "Назад");
				}
				if((HouseInfo[hid][hDrugs] + inputtext[0]) > 1000)
				{
					Send(playerid, COLOR_GREY, "* В сейф столько не влезит!");
					return SPD(playerid, D_HMENU+16, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Наркотики > Положить",
					"Сколько хотите положить?", "Ввод", "Назад");
				}
				if(inputtext[0] < 1 || inputtext[0] > Pl::Info[playerid][pDrugs])
				{
					Send(playerid, COLOR_GREY, "* У Вас нет столько наркоты!");
					return SPD(playerid, D_HMENU+16, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Наркотики > Положить",
					"Сколько хотите положить?", "Ввод", "Назад");
				}
				HouseInfo[hid][hDrugs] += inputtext[0];
				Pl::Info[playerid][pDrugs] -= inputtext[0];
				format(string, sizeof(string), "Вы положили в сейф: %i грамм", inputtext[0]);
				return SPD(playerid, D_NONE, 0, "[House Menu] > Сейф > Наркотики > Положить", string, "OK", "");
			}
			else
			{
				SPD(playerid, D_HMENU+15, DIALOG_STYLE_LIST,
				"[House Menu] > Сейф > Наркотики", "Положить\nВзять", "ENTER", "CANCLE");
				return 1;
			}
		}
		case D_HMENU+17:
		{
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey];
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					return SPD(playerid, D_HMENU+17, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Наркотики > Взять",
					"Сколько хотите взять?", "Ввод", "Назад");
				}
				if(inputtext[0] < 1 || inputtext[0] > HouseInfo[hid][hDrugs])
				{
					Send(playerid, COLOR_GREY, "* В сейфе нет столько!");
					return SPD(playerid, D_HMENU+17, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Наркотики > Взять",
					"Сколько хотите взять?", "Ввод", "Назад");
				}
				HouseInfo[hid][hDrugs] -= inputtext[0]; Pl::Info[playerid][pDrugs] += inputtext[0];
				format(string, sizeof(string), "Вы взяли из сейфа: %i грамм", inputtext[0]);
				return SPD(playerid, D_NONE, 0, "[House Menu] > Сейф > Наркотики > Взять", string, "OK", "");
			}
			else
			{
				return SPD(playerid, D_HMENU+15, DIALOG_STYLE_LIST,
				"[House Menu] > Сейф > Наркотики", "Положить\nВзять", "ENTER", "CANCLE");
			}
		}
		case D_HMENU+18:
		{
			new hid = Pl::Info[playerid][pHouseKey];
			if(response)
			{
				if(strcmp(GetName(playerid), HouseInfo[hid][hOwner], true) != 0) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				switch(listitem)
				{
					case 0:
					{
						return SPD(playerid, D_HMENU+19, DIALOG_STYLE_INPUT,
						"[House Menu] > Сейф > Материалы",
						"Сколько хотите положить?", "Ввод", "Назад");
					}
					case 1:
					{
						return SPD(playerid, D_HMENU+20, DIALOG_STYLE_INPUT,
						"[House Menu] > Сейф > Материалы",
						"Сколько хотите взять?", "Ввод", "Назад");
					}
				}
			}
			else
			{
				SafeMenu(playerid, hid);
			}
		}
		case D_HMENU+19:
		{
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey];
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					return SPD(playerid, D_HMENU+19, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Материалы",
					"Сколько хотите положить?", "Ввод", "Назад");
				}
				if((HouseInfo[hid][hMats] + inputtext[0]) > 100000)
				{
					Send(playerid, COLOR_GREY, "* В сейф столько не влезит!");
					return SPD(playerid, D_HMENU+19, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Материалы",
					"Сколько хотите положить?", "Ввод", "Назад");
				}
				if(inputtext[0] < 1 || inputtext[0] > Pl::Info[playerid][pMats])
				{
					Send(playerid, COLOR_GREY, "* У Вас нет столько материалов!");
					return SPD(playerid, D_HMENU+19, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Материалы",
					"Сколько хотите положить?", "Ввод", "Назад");
				}
				HouseInfo[hid][hMats] += inputtext[0]; Pl::Info[playerid][pMats] -= inputtext[0];
				format(string, sizeof(string), "Вы положили в сейф: %i материалов", inputtext[0]);
				return SPD(playerid, D_NONE, 0, "[House Menu] > Сейф > Материалы > Положить", string, "OK", "");
			}
			else
			{
				return SPD(playerid, D_HMENU+18, DIALOG_STYLE_LIST,
				"[House Menu] > Сейф > Материалы", "Положить\nВзять", "ENTER", "CANCLE");
			}
		}
		case D_HMENU+20:
		{
			if(response)
			{
				new hid = Pl::Info[playerid][pHouseKey];
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					return SPD(playerid, D_HMENU+20, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Материалы",
					"Сколько хотите взять?", "Ввод", "Назад");
				}
				if(inputtext[0] < 1 || inputtext[0] > HouseInfo[hid][hMats])
				{
					Send(playerid, COLOR_GREY, "* В сейфе нет столько!");
					return SPD(playerid, D_HMENU+20, DIALOG_STYLE_INPUT,
					"[House Menu] > Сейф > Материалы",
					"Сколько хотите взять?", "Ввод", "Назад");
				}
				HouseInfo[hid][hMats] -= inputtext[0];
				Pl::Info[playerid][pMats] += inputtext[0];
				format(string, sizeof(string), "Вы взяли из сейфа: %i материалов", inputtext[0]);
				return SPD(playerid, D_NONE, 0, "[House Menu] > Сейф > Материалы > Взять", string, "OK", "");
			}
			else
			{
				return SPD(playerid, D_HMENU+18, DIALOG_STYLE_LIST,
				"[House Menu] > Сейф > Материалы", "Положить\nВзять", "ENTER", "CANCLE");
			}
		}
		case D_HMENU+21: {
			if(response) {
				SetPVarInt(playerid, "s_index", listitem);
				return SPD(playerid, D_HMENU+22, DIALOG_STYLE_LIST,
				"[House Menu] > Сейф > Оружие","Взять\nПоложить", "Выбор", "Назад");
			} else {
				new hid = Pl::Info[playerid][pHouseKey];
				SafeMenu(playerid, hid);
			}
		}
		
		case D_HMENU+22: {
			if(response) {
				new hid = Pl::Info[playerid][pHouseKey];
				new idx = GetPVarInt(playerid, "s_index");
				switch(listitem) {
					case 0: {
						if(HouseInfo[hid][hGuns][idx] == 0) {
							Send(playerid, COLOR_GREY, "* В этом слоте нет оружия!");
							return SafeMenu(playerid, hid, 1);
						}
						Rac::GivePlayerWeapon(playerid, HouseInfo[hid][hGuns][idx], HouseInfo[hid][hAmmos][idx]);
						HouseInfo[hid][hGuns][idx] = 0; HouseInfo[hid][hAmmos][idx] = 0;
						return SPD(playerid, D_HMENU+23, 0, "[House Menu] > Сейф > Оружие", "Вы взяли оружие из сейфа!", "Назад", "Выход");
					}
					case 1:
					{
						if(HouseInfo[hid][hGuns][idx] != 0)
						{
							Send(playerid, COLOR_GREY, "* В этом слоте уже есть оружия!");
							return SafeMenu(playerid, hid, 1);
						}
						if(HouseInfo[hid][hAmmos][idx] >= 1000)
						{
							Send(playerid, COLOR_GREY, "* Мало места!");
							return SafeMenu(playerid, hid, 1);
						}
						HouseInfo[hid][hGuns][idx] = Rac::GetPlayerWeapon(playerid);
						HouseInfo[hid][hAmmos][idx] = Rac::GetPlayerAmmo(playerid, HouseInfo[hid][hGuns][idx]);
						Rac::RemovePlayerWeapon(playerid, HouseInfo[hid][hGuns][idx]);
						return SPD(playerid, D_HMENU+23, 0,
						"[House Menu] > Сейф > Оружие", "Вы положили оружие в сейф!", "Назад", "Выход");
					}
				}
			}
			else
			{
				SafeMenu(playerid, Pl::Info[playerid][pHouseKey], 1);
			}
		}
		case D_HMENU+23 : {
			if(response) return SafeMenu(playerid, Pl::Info[playerid][pHouseKey], 1);
		}
		
		case D_RENTCAR: {
			if(response) {
				new vehid = GetPlayerVehicleID(playerid);
				if(rentcar[0] <= vehid <= rentcar[1]) {
					new hirefee = (HireCost(vehid) / 5);
					if(Rac::GetPlayerMoney(playerid) < hirefee) {
						Rac::RemovePlayerFromVehicle(playerid);
						Rac::TogglePlayerControllable(playerid, 1);
						Send(playerid, COLOR_GRAD2, "* У Вас мало денег!");
					} else {
						for(new i; i < TOTAL_BIZZ; i++) {
							if(PlayerToKvadrat(playerid, BizzInfo[i][bzMinX], BizzInfo[i][bzMinY], BizzInfo[i][bzMaxX], BizzInfo[i][bzMaxY])) {
								if(BizzInfo[i][bID] == 49 || BizzInfo[i][bID] == 46) {
									if((BizzInfo[i][bID] == 49 && GetPBiz(playerid) != 49) || (BizzInfo[i][bID] == 46 && GetPBiz(playerid) != 46)) {
										Rac::GivePlayerMoney(playerid, -hirefee);
										BizzInfo[i][bTill] += hirefee;
										BizzInfo[i][bProducts]--;
										PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
										format(string, sizeof(string), "~r~-$%i~n~~w~To open or close using ~g~/lock.~w~enjoyable ride!", hirefee);
										GameTextForPlayer(playerid, string, 5000, 3);
									} else {
										GameTextForPlayer(playerid, "~w~No charge for the boss.~n~To open or close using ~g~/lock.~w~enjoyable ride!", 5000, 3);
									}
									if(HireCar[playerid] != INVALID_VEHICLE_ID) {
										ToggleVehicleDoor(HireCar[playerid], true);
									}
									HireCar[playerid] = vehid;
									return Rac::TogglePlayerControllable(playerid, 1);
								}
							}
						}
						new bidx, rand = random(100);
						if(rand >= 0 && rand <= 50) bidx = GetBizIndex(46);
						else if(rand >= 51 && rand <= 100) bidx = GetBizIndex(49);
						if((BizzInfo[bidx][bID] == 49 && GetPBiz(playerid) != 49)
						|| (BizzInfo[bidx][bID] == 46 && GetPBiz(playerid) != 46)) {
							Rac::GivePlayerMoney(playerid, -hirefee);
							BizzInfo[bidx][bTill] += hirefee; BizzInfo[bidx][bProducts]--;
							format(string, sizeof(string), "~r~-$%i~n~~w~To open or close using ~g~/lock.~w~enjoyable ride!", hirefee);
							GameTextForPlayer(playerid, string, 5000, 3); PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						} else {
							GameTextForPlayer(playerid, "~w~No charge for the boss.~n~To open or close using ~g~/lock.~w~enjoyable ride!", 5000, 3);
						}
						if(HireCar[playerid] != INVALID_VEHICLE_ID) {
							ToggleVehicleDoor(HireCar[playerid], true);
						}
						HireCar[playerid] = vehid;
						return Rac::TogglePlayerControllable(playerid, 1);
					}
				} else {
					Rac::RemovePlayerFromVehicle(playerid);
					Rac::TogglePlayerControllable(playerid, 1);
				}
			} else {
				Rac::RemovePlayerFromVehicle(playerid);
				Rac::TogglePlayerControllable(playerid, 1);
			}
			return 1;
		}
		
		case D_RENTCAR+1:
		{
			if(response)
			{
				new vehid = GetPlayerVehicleID(playerid);
				if(IsACompTruck(vehid))
				{
					new hirefee = HireCost(vehid);
					if (Rac::GetPlayerMoney(playerid) < hirefee)
					{
						Rac::RemovePlayerFromVehicle(playerid);
						Rac::TogglePlayerControllable(playerid, 1);
						Send(playerid, COLOR_GRAD2, "* У Вас мало денег!");
					}
					else
					{
						for(new i; i < TOTAL_BIZZ; i++)
						{
							if(PlayerToKvadrat(playerid, BizzInfo[i][bzMinX], BizzInfo[i][bzMinY], BizzInfo[i][bzMaxX], BizzInfo[i][bzMaxY]))
							{
								if(BizzInfo[i][bID] == 56 || BizzInfo[i][bID] == 74)
								{
									if((BizzInfo[i][bID] == 56 && GetPBiz(playerid) != 56) || (BizzInfo[i][bID] == 74 && GetPBiz(playerid) != 74))
									{
										Rac::GivePlayerMoney(playerid, -hirefee);
										BizzInfo[i][bTill] += hirefee;
										PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
										format(string, sizeof(string), "~r~-$%i~n~~w~To open or close using ~g~/lock.~w~successful work!", hirefee);
										GameTextForPlayer(playerid, string, 5000, 3);
										Send(playerid, COLOR_GREEN, "* Вы можете доставлять продукты в бизнесы");
										Send(playerid, COLOR_GREEN, "* Команды доставки /buyprods /sellprods");
									}
									else
									{
										GameTextForPlayer(playerid, "~w~No charge for the boss.~n~To open or close using ~g~/lock.~w~successful work!", 5000, 3);
										Send(playerid, COLOR_GREEN, "* Вы можете доставлять продукты в бизнесы");
										Send(playerid, COLOR_GREEN, "* Команды доставки /buyprods /sellprods");
									}
									if(HireCar[playerid] != INVALID_VEHICLE_ID)
									{
										ToggleVehicleDoor(HireCar[playerid], true);
									}
									HireCar[playerid] = vehid;
									Rac::TogglePlayerControllable(playerid, 1);
									break;
								}
							}
						}
					}
				}
				else
				{
					Rac::RemovePlayerFromVehicle(playerid);
					Rac::TogglePlayerControllable(playerid, 1);
				}
			}
			else
			{
				Rac::RemovePlayerFromVehicle(playerid);
				Rac::TogglePlayerControllable(playerid, 1);
			}
			return 1;
		}
		
		case D_TUNING: {
			if(response) {
				switch(listitem) {
					case 0: {
						SPD(playerid, D_TUNING+1, DIALOG_STYLE_MSGBOX, "[RP]GrandWorld: Tuning", "* Вы хотите заригистрировать тюнинг.\n\
						Стоимость улуги: $100000", "OK", "CANCEL");
					}
					
					case 1: {
						SPD(playerid, D_TUNING+2, DIALOG_STYLE_MSGBOX, "[RP]GrandWorld: Tuning", "* Вы хотите удалить тюнинг.\n\
						Стоимость улуги: $50000", "OK", "CANCEL");
					}
				}
			}
			
			return 1;
		}
		case D_TUNING+1: {
			if(response) {
				if(Rac::GetPlayerMoney(playerid) < 100000) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
				new bidx = GetBizIndex(63);
				new house = Pl::Info[playerid][pHouseKey];
				UpdateTuning(HouseInfo[house][hAuto], 1, house);
				Rac::GivePlayerMoney(playerid, -100000);
				BizzInfo[bidx][bTill] += 10000;
				BizzInfo[bidx][bProducts]--;
				Send(playerid, COLOR_LIGHTBLUE, "* Тюнинг был зарегистрирован!");
			} else {
				SPD(playerid, D_TUNING, DIALOG_STYLE_LIST, "[RP]GrandWorld: Tuning", "Зарегистрировать тюнинг\nУдалить тюнинг", "SELECT", "CANCEL");
			}
		}
		case D_TUNING+2: {
			if(response) {
				if(Rac::GetPlayerMoney(playerid) < 10000) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
				new bidx = GetBizIndex(63);
				new hidx = Pl::Info[playerid][pHouseKey];
				if(IsValidHouse(hidx)) {
					Rac::GivePlayerMoney(playerid, -5000);
					BizzInfo[bidx][bTill] += 1000;
					BizzInfo[bidx][bProducts]--;
					ResetTuning(HouseInfo[hidx][hAuto], 1, hidx);
					Send(playerid, COLOR_LIGHTBLUE, "* Тюнинг был удален!");
				} else {
					Send(playerid, COLOR_GREY, "* У Вас нет дома!");
				}
			} else {
				SPD(playerid, D_TUNING, DIALOG_STYLE_LIST, "[RP]GrandWorld: Tuning", "Зарегистрировать тюнинг\nУдалить тюнинг", "SELECT", "CANCEL");
			}
		}

		case D_GOTO : {
			if(response) {
				switch(listitem) {
					case 0 : {
						SPD(playerid, D_GOTO+1,DIALOG_STYLE_LIST,"[RP]GrandWorld: Телепорты > Популярные места",
						"— Los Santos\n— San Fierro\n— Las Venturas\n— АвтоШкола\n\
						— Тюрьма\n— Присон\n— Отель ЛС\n— Банк\n— Дальнобой\n\
						— Маяк\n— Небоскреб Лос Сантоса\n— Гора Чиллиад\n— Рублевка", "SELECT", "CANCEL");
					}
					case 1: {
						dialog[0] = '\0';
						static const family[] = {5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20};
						for(new i; i < sizeof family; i++) {
							scf(dialog, string, "— %s\n", FracInfo[family[i]][fName]);
						}
						SPD(playerid, D_GOTO+2, DIALOG_STYLE_LIST, "[RP]GrandWorld: Телепорты > Респы банд/мафий", dialog, "SELECT", "CANCEL");
					}
					case 2: {
						dialog[0] = '\0';
						static const team[] = {1, 2, 3, 4, 7, 8, 9, 10, 11};
						for(new i; i < sizeof team; i++) {
							scf(dialog, string, "— %s\n", FracInfo[team[i]][fName]);
						}
						SPD(playerid, D_GOTO+3, DIALOG_STYLE_LIST, "[RP]GrandWorld: Телепорты > Респы фракций", dialog, "SELECT", "CANCEL");
					}
				}
			}
			return 1;
		}
		
		case D_GOTO+1 : {
			if(response) {
				static const Float:tp_respInfo[][] = {
					{01529.6,-1691.2,13.3},
					{-1417.0,-295.8,14.1},
					{1699.2,1435.1,10.7},
					{-2029.798,-106.675,1038.171},
					{263.9608,82.2232,1004.6830},
					{223.8246,1889.4766,17.6406},
					{2225.5227,-1119.8511,25.7969},
					{1461.3962,-1027.9645,23.3168},
					{-72.1355,-1144.2100,4.1964},
					{146.9576,-1965.2183,3.7734},
					{1546.7333,-1371.1244,329.4535},
					{-2256.3052,-1745.8374,487.5512},
					{-2503.6970,2434.2261,16.8024}
				};
				
				if(0 <= listitem <= sizeof(tp_respInfo)) {
					if(GetPlayerState(playerid) == 2) {
						new tmpcar = GetPlayerVehicleID(playerid);
						Rac::SetVehiclePos(tmpcar, tp_respInfo[listitem][0], tp_respInfo[listitem][1], tp_respInfo[listitem][2]);
					} else {
						Rac::SetPlayerPos(playerid, tp_respInfo[listitem][0], tp_respInfo[listitem][1], tp_respInfo[listitem][2]);
					}
					switch(listitem) {
						case 3 : {
							Rac::SetPlayerVirtualWorld(playerid, 11);
							Rac::SetPlayerInterior(playerid,3);
						}
						case 4 : {
							Rac::SetPlayerVirtualWorld(playerid, 1);
							Rac::SetPlayerInterior(playerid, 6);
						}
						default : {
							Rac::SetPlayerVirtualWorld(playerid, 0);
							Rac::SetPlayerInterior(playerid, 0);
						}
					}
					Pl::Info[playerid][pLocal] = 0;
					Send(playerid, COLOR_WHITE, "*[RP]GrandWorld: Вы были телепортированы!");
				}
			} else {
				SPD(playerid, D_GOTO, DIALOG_STYLE_LIST, "[RP]GrandWorld: Телепорты", "— Популярные места\n— Респы банд\n— Респы фракций", "SELECT", "CANCEL");
			}
		}
		
		case D_GOTO+2: {
			if(response) {
				static const Float:gg_respInfo[][] = {
					{2487.8718,-1667.9696,13.3438},
					{922.0977,-1113.2517,24.1698},
					{2767.1375,-1603.9451,10.9219},
					{-2156.9673,-186.5025,41.1297},
					{1762.3993,-1939.1523,13.5803},
					{-1032.3400,-1189.4552,129.2188},
					{1060.7347,2168.3066,10.8203},
					{685.3369,-471.2725,23.5705},
					{1493.0605,2787.9265,10.8203},
					{1136.1196,-2038.8026,69.0078},
					{-2749.2410,-313.4475,7.1875}
				};
				if(0 <= listitem <= sizeof(gg_respInfo)) {
					new tmpcar = GetPlayerVehicleID(playerid);
					if(GetPlayerState(playerid) == 2) {
						Rac::SetVehiclePos(tmpcar, gg_respInfo[listitem][0], gg_respInfo[listitem][1], gg_respInfo[listitem][2]);
					} else {
						Rac::SetPlayerPos(playerid, gg_respInfo[listitem][0], gg_respInfo[listitem][1], gg_respInfo[listitem][2]);
					}
					Pl::Info[playerid][pLocal] = 0;
					Rac::SetPlayerVirtualWorld(playerid, 0);
					Rac::SetPlayerInterior(playerid,0);
					Send(playerid, COLOR_WHITE, "*[RP]GrandWorld: Вы были телепортированы!");
				}
			} else {
				SPD(playerid, D_GOTO, DIALOG_STYLE_LIST, "[RP]GrandWorld: Телепорты", "— Популярные места\n— Респы банд\n— Респы фракций", "SELECT", "CANCEL");
			}
		}
		
		case D_GOTO+3 : {
			if(response) {
				static const Float:gf_respInfo[][] = {
					{1531.4489,-1701.7860,6.2188},
					{-1581.9905,677.6925,-4.9063},
					{223.8246,1889.4766,17.6406},
					{-2681.4397,638.0493,14.453},
					{1469.1552,-1771.1403,18.7958},
					{1072.5293,-290.5870,76.9300},
					{752.0109,-1356.0024,13.7000},
					{-2044.9961,-119.2935,34.9892},
					{-2044.9961,-119.2935,34.9892}
				};
				if(0 <= listitem <= sizeof(gf_respInfo)) {
					new tmpcar = GetPlayerVehicleID(playerid);
					if(GetPlayerState(playerid) == 2) {
						Rac::SetVehiclePos(tmpcar, gf_respInfo[listitem][0], gf_respInfo[listitem][1], gf_respInfo[listitem][2]);
					} else {
						Rac::SetPlayerPos(playerid, gf_respInfo[listitem][0], gf_respInfo[listitem][1], gf_respInfo[listitem][2]);
					}
					Pl::Info[playerid][pLocal] = 0;
					Rac::SetPlayerVirtualWorld(playerid, 0);
					Rac::SetPlayerInterior(playerid,0);
					Send(playerid, COLOR_WHITE, "*[RP]GrandWorld: Вы были телепортированы!");
				}
			} else {
				SPD(playerid, D_GOTO, DIALOG_STYLE_LIST, "[RP]GrandWorld: Телепорты", "— Популярные места\n— Респы банд\n— Респы фракций", "SELECT", "CANCEL");
			}
		}
		
		
		case D_REFILL:
		{
			if(response)
			{
				if(!sscanf(inputtext, "i", inputtext[0]))
				{
					if(inputtext[0] < 1 || inputtext[0] > 100) return Send(playerid, COLOR_GREY, "* Вы не можите заправится больше чем на 100 литров!");
					new FillUP = (inputtext[0] * 20);
					if(Rac::GetPlayerMoney(playerid) < FillUP) return Send(playerid, COLOR_GREY, "* У Вас не хватит денег на запрваку!");
					new fuel = (Benzin{GetPlayerVehicleID(playerid)}+inputtext[0]);
					if(fuel > 100) return Send(playerid, COLOR_GREY, "* В бензобак не влезит столько бензина!");
					SetTimerEx("Fillup", REFUEL_TIME, false, "iii", playerid, fuel, FillUP);
					Rac::TogglePlayerControllable(playerid, 0);
					GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Re-Fueling Vehicle~n~ ~b~please wait", REFUEL_TIME, 5);
				}
			}
		}
		
		case D_CRANK: {
			if(response) {
				if(!sscanf(inputtext, "p<.>i{s[40]}", inputtext[0])) {
					new frac = GetPVarInt(playerid, "SelectedFrac");
					SetPVarInt(playerid, "SelectedRank", inputtext[0]);
					if(Pl::Info[playerid][pLeader] == frac || Pl::isAdmin(playerid, 5)) {
						format( dialog, sizeof dialog, "Текущее: %s\nВведите новое название ранга.\n", RankInfo[frac][inputtext[0]]);
						SPD(playerid, D_CRANK+1, 1, "Название ранга", dialog, "OK", "CANCEL");
					} else {
						Send(playerid, COLOR_GREY, "* Недостаточно прав!");
					}
				}
			}
		}
		
		case D_CRANK+1: {
			if(response) {
				new len = strlen(inputtext);
				new frac = GetPVarInt(playerid, "SelectedFrac"), rank = GetPVarInt(playerid, "SelectedRank");
				if(isnull(inputtext) || inputtext[0] == ' ') {
					Send(playerid, COLOR_GREY, "* Поле ввода пустое!");
					format(dialog, sizeof dialog, "* Неверный ввод!\nТекущее: %s\nВведите новое название ранга.\n", RankInfo[ frac ][ rank ] );
					SPD(playerid, D_CRANK+1, 1, "Название ранга", dialog, "OK", "CANCEL");
				} else if(!len || len > 36) {
					Send(playerid, COLOR_GREY, "* Макс. длина ранга состовляет 36 символов!");
					format(dialog, sizeof dialog, "Текущее: %s\nВведите новое название ранга.\n", RankInfo[frac][rank]);
					SPD(playerid, D_CRANK+1, 1, "Название ранга", dialog, "Enter", "Cancle");
				} else if(!regex_match_exid(inputtext, ValidText)) {
					Send(playerid, COLOR_GREY, "* В названии ранга есть заприщеные символы!");
					format(dialog, sizeof dialog, "Текущее: %s\nВведите новое название ранга.\n", RankInfo[frac][rank]);
					SPD(playerid, D_CRANK+1, 1, "Название ранга", dialog, "OK", "CANCEL");
				} else {
					format(dialog, sizeof dialog, "Ранг был изменен!\n\n  Старый: %s\n  Новый: %s\n", RankInfo[frac][rank], inputtext);
					SPD(playerid, D_CRANK+2, 0, "Название ранга", dialog, "OK", "CANCEL");
					UpdateRank(frac, rank, inputtext);
				}
			} else {
				ShowRankList(playerid, GetPVarInt(playerid, "SelectedFrac"));
			}
		}
		
		case D_CRANK+2: {
			if(!response) ShowRankList(playerid, GetPVarInt(playerid, "SelectedFrac"));
		}
		
		case D_BMENU: {
			new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PrintBizInfo(playerid, GetPBiz(playerid));
					}
					case 1:
					{
						SPD(playerid, D_BMENU+1, DIALOG_STYLE_LIST, "[Biz Menu]: Счет бизнеса", "• Снять деньги\n• Положить деньги", "ENTER", "CANCLE");
					}
					case 2:
					{
						format(string, sizeof(string), "Текущая стоимость:\t$%i\nВведите стоимость услуг.\nСтоимоть услуг не может быть меньше $1 и больше $9999",
						BizzInfo[bidx][bEntranceCost]);
						SPD(playerid, D_BMENU+4, DIALOG_STYLE_INPUT, "[Biz Menu]: Стоимость услуг", string, "ENTER", "CANCLE");
					}
					case 3:
					{
						format(string, sizeof(string), "Текущие название:\t%s\nВведите новое название бизнеса.", BizzInfo[bidx][bName]);
						SPD(playerid, D_BMENU+5, DIALOG_STYLE_INPUT, "[Biz Menu]: Название бизнеса", string, "ENTER", "CANCLE");
					}
					case 4:
					{
						format(string, sizeof(string),
						"Сейчас цена за продукты:\t$%i\nВведите новую цену. Цена не должна быть меньше $1 и больше $999", BizzInfo[bidx][bPriceProd]);
						SPD(playerid, D_BMENU+6, DIALOG_STYLE_INPUT, "[Biz Menu]: Цена за продукты", string, "ENTER", "CANCLE");
					}
					case 5:
					{
						format(string, sizeof(string),"Компаньон:\t\t%s\n\nВведите ид игрока чтобы назначить нового компаньона.\n\
						Чтобы убрать компаньона введите 255.", BizzInfo[bidx][bExtortion]);
						SPD(playerid, D_BMENU+7, 1, "[Biz Menu]: Компаньон", string, "ENTER", "CANCLE");
					}
				}
			}
			return 1;
		}
		case D_BMENU+1:
		{
			if(response)
			{
				new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
				switch(listitem)
				{
					case 0:
					{
						format(dialog, sizeof dialog, "Сейчас на счету:\t$%i\nВведите сумму которую хотите снять.", BizzInfo[bidx][bTill]);
						SPD(playerid, D_BMENU+2, DIALOG_STYLE_INPUT, "[Biz Menu]: Счет бизнеса", dialog, "ENTER", "CANCLE");
					}
					case 1:
					{
						format(dialog, sizeof dialog, "Сейчас на счету:\t$%i\nВведите сумму которую хотите положить.", BizzInfo[bidx][bTill]);
						SPD(playerid, D_BMENU+3, DIALOG_STYLE_INPUT, "[Biz Menu]: Счет бизнеса", dialog, "ENTER", "CANCLE");
					}
				}
			}
			else
			{
				LoadFile("list/bmenu.lst", dialog);
				SPD(playerid, D_BMENU, DIALOG_STYLE_LIST, "[Biz Menu]: Выберете пункт", dialog, "ENTER", "CANCLE");
			}
			return 1;
		}
		case D_BMENU+2:
		{
			if(response)
			{
				new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
				if(!sscanf(inputtext, "i", inputtext[0]))
				{
					if(inputtext[0] < 1) {
						Send(playerid, COLOR_GREY, "* Вы не можите снять $0!");
						format(dialog, sizeof dialog, "Сейчас на счету:\t$%i\nВведите сумму которую хотите снять.", BizzInfo[bidx][bTill]);
						SPD(playerid, D_BMENU+2, DIALOG_STYLE_INPUT, "[Biz Menu]: Счет бизнеса", dialog, "ENTER", "CANCLE");
					} else if(inputtext[0] <= BizzInfo[bidx][bTill]) {
						BizzInfo[bidx][bTill] -= inputtext[0];
						Rac::GivePlayerMoney(playerid, inputtext[0]);
						format(string, sizeof(string), "Вы сняли:\t$%i\nОсталось на счету:\t$%i", inputtext[0], BizzInfo[bidx][bTill]);
						SPD(playerid, D_NONE, 0, "[Biz Menu]: Счет бизнеса", string, "OK", "");
					} else {
						Send(playerid, COLOR_GREY, "* На счету нет столько денег!");
						format(dialog, sizeof dialog, "Сейчас на счету:\t$%i\nВведите сумму которую хотите снять.", BizzInfo[bidx][bTill]);
						SPD(playerid, D_BMENU+2, DIALOG_STYLE_INPUT, "[Biz Menu]: Счет бизнеса", dialog, "ENTER", "CANCLE");
					}
				} else {
					Send(playerid, COLOR_GREY, "* Вы ничего не ввели или ввели не правильно!");
					format(dialog, sizeof dialog, "Сейчас на счету:\t$%i\nВведите сумму которую хотите снять.", BizzInfo[bidx][bTill]);
					SPD(playerid, D_BMENU+2, DIALOG_STYLE_INPUT, "[Biz Menu]: Счет бизнеса", dialog, "ENTER", "CANCLE");
				}
			} else {
				SPD(playerid, D_BMENU+1, DIALOG_STYLE_LIST, "[Biz Menu]: Счет бизнеса", "• Снять деньги\n• Положить деньги", "ENTER", "CANCLE");
			}
			return 1;
		}
		case D_BMENU+3:
		{
			if(response)
			{
				new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
				if(!sscanf(inputtext, "i", inputtext[0]))
				{
					if(inputtext[0] < 1)
					{
						Send(playerid, COLOR_GREY, "* Вы не можите положить $0!");
						format(dialog, sizeof dialog, "Сейчас на счету:\t$%i\nВведите сумму которую хотите снять.", BizzInfo[bidx][bTill]);
						SPD(playerid, D_BMENU+2, DIALOG_STYLE_INPUT, "[Biz Menu]: Счет бизнеса", dialog, "ENTER", "CANCLE");
					}
					if(inputtext[0] <= Rac::GetPlayerMoney(playerid))
					{
						BizzInfo[bidx][bTill] += inputtext[0];
						Rac::GivePlayerMoney(playerid, -inputtext[0]);
						format(string, sizeof(string), "Вы положиили:\t$%i\nТеперь на счету:\t$%i", inputtext[0], BizzInfo[bidx][bTill]);
						SPD(playerid, D_NONE, 0, "[Biz Menu]: Счет бизнеса", string, "OK", "");
					}
					else
					{
						Send(playerid, COLOR_GREY, "* У Вас нет столько денег!");
						format(dialog, sizeof dialog, "Сейчас на счету:\t$%i\nВведите сумму которую хотите снять.", BizzInfo[bidx][bTill]);
						SPD(playerid, D_BMENU+2, DIALOG_STYLE_INPUT, "[Biz Menu]: Счет бизнеса", dialog, "ENTER", "CANCLE");
					}
				}
				else
				{
					Send(playerid, COLOR_GREY, "* Вы ничего не ввели или ввели не правильно!");
					format(dialog, sizeof dialog, "Сейчас на счету:\t$%i\nВведите сумму которую хотите снять.", BizzInfo[bidx][bTill]);
					SPD(playerid, D_BMENU+2, DIALOG_STYLE_INPUT, "[Biz Menu]: Счет бизнеса", dialog, "ENTER", "CANCLE");
				}
			}
			else
			{
				SPD(playerid, D_BMENU+1, DIALOG_STYLE_LIST, "[Biz Menu]: Счет бизнеса", "• Снять деньги\n• Положить деньги", "ENTER", "CANCLE");
			}
			return 1;
		}
		
		case D_BMENU+4 : {
			if(response) {
				new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
				if(!sscanf(inputtext, "i", inputtext[0])) {
					if(inputtext[0] >= 1 && inputtext[0] <= 3000) {
						BizzInfo[bidx][bEntranceCost] = inputtext[0];
						format(string, sizeof(string), "Цена услуг теперь:\t$%i", BizzInfo[bidx][bEntranceCost]);
						SPD(playerid, D_NONE, 0, "[Biz Menu]: Стоимость услуг", string, "OK", "");
					} else {
						format(string, sizeof(string), "Текущая стоимость:\t$%i\nВведите стоимость услуг.\nСтоимоть услуг не может быть меньше $1 и больше $3000",
						BizzInfo[bidx][bEntranceCost]);
						SPD(playerid, D_BMENU+4, DIALOG_STYLE_INPUT, "[Biz Menu]: Стоимость услуг", string, "ENTER", "CANCLE");
					}
				} else {
					Send(playerid, COLOR_GREY, "* Вы ничего не ввели или ввели не правильно!");
					format(string, sizeof(string), "Текущая стоимость:\t$%i\nВведите стоимость услуг.\nСтоимоть услуг не может быть меньше $1 и больше $3000",
					BizzInfo[bidx][bEntranceCost]);
					SPD(playerid, D_BMENU+4, DIALOG_STYLE_INPUT, "[Biz Menu]: Стоимость услуг", string, "ENTER", "CANCLE");
				}
			} else {
				LoadFile("list/bmenu.lst", dialog);
				SPD(playerid, D_BMENU, DIALOG_STYLE_LIST, "[Biz Menu]: Выберете пункт", dialog, "ENTER", "CANCLE");
			}
			return 1;
		}
		
		case D_BMENU+5 : {
			if(response) {
				new len = strlen(inputtext);
				new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
				
				if(!len || len > 24 || inputtext[0] == ' ') {
					Send(playerid, COLOR_GREY, "* Название бизнеса должно быть от 3 до 24 символов!");
					format(string, sizeof(string), "Текущие название:\t%s\nВведите новое название бизнеса.", BizzInfo[bidx][bName]);
					SPD(playerid, D_BMENU+5, DIALOG_STYLE_INPUT, "[Biz Menu]: Название бизнеса", string, "ENTER", "CANCLE");
				} else {
					strmid(BizzInfo[bidx][bName], inputtext, 0, len, 24);
					format(string, sizeof(string), "Название изменино!\n\nНовое название:\t%s", BizzInfo[bidx][bName]);
					SPD(playerid, D_NONE, 0, "[Biz Menu]: Название бизнеса", string, "OK", "");
				}
			} else {
				LoadFile("list/bmenu.lst", dialog);
				SPD(playerid, D_BMENU, DIALOG_STYLE_LIST, "[Biz Menu]: Выберете пункт", dialog, "ENTER", "CANCLE");
			}
			return 1;
		}
		
		case D_BMENU+6:
		{
			if(response)
			{
				new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
				if(!sscanf(inputtext, "i", inputtext[0]))
				{
					if(1 <= inputtext[0] <= 999) {
						BizzInfo[bidx][bPriceProd] = inputtext[0];
						format(string, sizeof(string), "Новая цена за продукты:\t$%i", BizzInfo[bidx][bPriceProd]);
						SPD(playerid, D_NONE, 0, "[Biz Menu]: Цена за продукты", string, "OK", "");
					}
					else
					{
						format(string, sizeof(string),
						"Сейчас цена за продукты:\t$%i\nВведите новую цену. Цена не должна быть меньше $1 и больше $999", BizzInfo[bidx][bPriceProd]);
						SPD(playerid, D_BMENU+6, DIALOG_STYLE_INPUT, "[Biz Menu]: Цена за продукты", string, "ENTER", "CANCLE");
					}
				}
				else
				{
					Send(playerid, COLOR_GREY, "* Вы ничего не ввели или ввели не правильно!");
					format(string, sizeof(string),
					"Сейчас цена за продукты:\t$%i\nВведите новую цену. Цена не должна быть меньше $1 и больше $999", BizzInfo[bidx][bPriceProd]);
					SPD(playerid, D_BMENU+6, DIALOG_STYLE_INPUT, "[Biz Menu]: Цена за продукты", string, "ENTER", "CANCLE");
				}
			}
			else
			{
				LoadFile("list/bmenu.lst", dialog);
				SPD(playerid, D_BMENU, DIALOG_STYLE_LIST, "[Biz Menu]: Выберете пункт", dialog, "ENTER", "CANCLE");
			}
			return 1;
		}
		
		case D_BMENU+7 : {
			if(response) {
				new player, len = strlen(inputtext);
				new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
				if(!len || len > 24 || inputtext[0] == ' ') {
					format(string, sizeof(string),"Компаньон:\t\t%s\n\nВведите ид игрока чтобы назначить нового компаньона.\n\
					Чтобы убрать компаньона введите 255.", BizzInfo[bidx][bExtortion]);
					SPD(playerid, D_BMENU+7, 1, "[Biz Menu]: Компаньон", string, "ENTER", "CANCLE");
				} else if(!sscanf(inputtext, "s[24]", string)) {
					sscanf(string, "u", player);
					if(player == playerid) {
						Send(playerid, COLOR_GREY, "* Вы владелец бизнеса!");
						format(string, sizeof(string),"Компаньон:\t\t%s\n\nВведите ид игрока чтобы назначить нового компаньона.\n\
						Чтобы убрать компаньона введите 255.", BizzInfo[bidx][bExtortion]);
						SPD(playerid, D_BMENU+7, 1, "[Biz Menu]: Компаньон", string, "ENTER", "CANCLE");
					} else if(strval(string) == 255) {
						strmid(BizzInfo[bidx][bExtortion], "No-one", 0, strlen("No-one"), 24);
						format(string, sizeof(string),"Компаньон:\t\t%s\n\nВведите ид игрока чтобы назначить нового компаньона.\n\
						Чтобы убрать компаньона введите 255.", BizzInfo[bidx][bExtortion]);
						SPD(playerid, D_BMENU+7, 1, "[Biz Menu]: Компаньон", string, "ENTER", "CANCLE");
					} else if(!Pl::isLogged(player)) {
						Send(playerid, COLOR_GREY, "* Этот игрок не авторизован!");
						format(string, sizeof(string),"Компаньон:\t\t%s\n\nВведите ид игрока чтобы назначить нового компаньона.\n\
						Чтобы убрать компаньона введите 255.", BizzInfo[bidx][bExtortion]);
						SPD(playerid, D_BMENU+7, 1, "[Biz Menu]: Компаньон", string, "ENTER", "CANCLE");
					} else {
						strmid(BizzInfo[bidx][bExtortion], string, 0, len, 24);
						format(string, sizeof(string),"Компаньон:\t\t%s\n\nВведите ид игрока чтобы назначить нового компаньона.\n\
						Чтобы убрать компаньона введите 255.", BizzInfo[bidx][bExtortion]);
						SPD(playerid, D_BMENU+7, 1, "[Biz Menu]: Компаньон", string, "ENTER", "CANCLE");
					}
				}
			} else {
				LoadFile("list/bmenu.lst", dialog);
				SPD(playerid, D_BMENU, DIALOG_STYLE_LIST, "[Biz Menu]: Выберете пункт", dialog, "ENTER", "CANCLE");
			}
			return 1;
		}
		
		case D_LMENU-1 : {
			if(response) {
				new fracid = GetFracID(playerid);
				if(!strcmp(inputtext, "Ранги", true)) {
					ShowRankList(playerid, fracid);
					
				} else if(!strcmp(inputtext, "Транспорт", true)) {
					ShowDialog(playerid, D_LMENU, 2, "L-Menu. Транспорт", "dialog/lmenu/main.lst", "SELECT", "CANCEL");
					
				} else if(strfind(inputtext, "Ранг захвата", false) != -1) {
					SPD(playerid, D_LMENU+8, 1, "L-Menu. Ранг захвата", "Введите ранг захвата:", "OK", "CANCEL");
					
				} else if(!strcmp(inputtext, "Черный список", true)) {
					ShowLMenu(playerid, D_LMENU+9);
					
				} else if(strfind(inputtext, "Ранг новостей", true) != -1) {
					SPD(playerid, D_LMENU+14, 1, "L-Menu. Ранг новостей", "Введите ранг для написания в /gov:", "OK", "CANCEL");
					
				} else if(!strcmp(inputtext, "Управление автошколой", true)) {
					SPD(playerid, D_LMENU+10, 2, "L-Menu. Управление автошколой", "Закрыть\nОткрыть", "SELECT", "CANCEL");						
				}
			}
		}
		
		case D_LMENU : {
			if(response) {
				switch(listitem) {
					case 0 : SPD(playerid, D_LMENU+1, 0, "L-Menu: Смена цвета", "Какой цвет хотите поминять?", "[-1-]", "[-2-]");

					case 1 : SPD(playerid, D_LMENU+4, 1, "L-Menu: Смена ранга", "Введите ранг с которого будет доступна машина.", "Enter", "Back");
					
					case 2 : SPD(playerid, D_LMENU+5, 1, "L-Menu: Смена номера", "Введите новый номер(макс. 8 символов)", "Enter", "Back");
					
					case 3 : SPD(playerid, D_LMENU+6, 0, "L-Menu: Смена места спавна", "Сменить место спавна этого авто?", "Enter", "Back");
					
					case 4 : {
						if(Fc::IsEditMode(playerid)) {
							new v_frac, carid = GetPlayerVehicleID(playerid);
							if(Fc::GetInfo(carid, "f", v_frac)) Fc::ShowModel(playerid, v_frac, D_LMENU+7);
						} else {
							Fc::ShowModel(playerid, GetFracID(playerid), D_LMENU+7);
						}
					}
				}
			} else {
				ShowLMenu(playerid);
			}
			return 1;
		}
		
		case D_LMENU+10 : {
			if(response) {
				for(new i; i < TOTAL_PORTAL; i++) {
					if(Tp::Info[i][Tp::Id] == 11) {
						for(new f; f < MAX_FRAC; f++) {
							Tp::Info[i][Tp::Allowed][f] = listitem;
						}
						updatePickup(i);
						Send(playerid, -1, (listitem)?("* Автошкола открыта!"):("* Автошкола закрыта!"));
						return 1;
					}
				}
			}
			return 1;
		}
		
		case D_LMENU+8 : {
			if(response) {
				new fracid = GetFracID(playerid);
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_LMENU+8, DIALOG_STYLE_INPUT, "L-Menu. Ранг захвата", "* Поле ввода пустое!\n\nВведите ранг захвата:", "OK", "CANCEL");
				} else if(!(1 <= inputtext[0] <= RankNums[fracid])) {
					SPD(playerid, D_LMENU+8, DIALOG_STYLE_INPUT, "L-Menu. Ранг захвата", "* Неверный ранг!\n\nВведите ранг захвата:", "OK", "CANCEL");
				} else {
					SetZRank(fracid, inputtext[0]);
					ShowLMenu(playerid);
				}
			} else {
				ShowLMenu(playerid);
			}
			
			return 1;
		}
		
		case D_LMENU+9 : {
			if(response) {
				switch(listitem) {
					case 0 : SPD(playerid, D_LMENU+11, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "Введите ранг добавления в ЧС:", "OK", "CANCEL");
					case 1 : SPD(playerid, D_LMENU+12, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "Введите сумму выхода из ЧС:", "OK", "CANCEL");
					case 2 : SPD(playerid, D_LMENU+13, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "Введите кол-во убийств для выхода из ЧС:", "OK", "CANCEL");
				}
			} else {
				ShowLMenu(playerid);
			}
			return 1;
		}
		
		
		case D_LMENU+11 : {
			if(response) {
				new fracid = GetFracID(playerid);
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_LMENU+11, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "* Поле ввода пустое!\nВведите ранг добавления в ЧС:", "OK", "CANCEL");
				} else if(!(1 <= inputtext[0] <= RankNums[fracid])) {
					SPD(playerid, D_LMENU+11, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "* Неверный ранг!\nВведите ранг добавления в ЧС:", "OK", "CANCEL");
				} else {
					SetBRank(fracid, inputtext[0]);
					ShowLMenu(playerid, D_LMENU+9);
				}
			} else {
				ShowLMenu(playerid, D_LMENU+9);
			}
		}
		
		case D_LMENU+12 : {
			if(response) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_LMENU+12, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "* Поле ввода пустое!\nВведите сумму выхода из ЧС:", "OK", "CANCEL");
				} else if(!(1 <= inputtext[0] <= 3000000)) {
					SPD(playerid, D_LMENU+12, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "* Сумма должна быть от 1 до $3000000!\nВведите ранг добавления в ЧС:", "OK", "CANCEL");
				} else {
					FracInfo[GetFracID(playerid)][fBConf][bPRICE] = inputtext[0];
					ShowLMenu(playerid, D_LMENU+9);
				}
			} else {
				ShowLMenu(playerid, D_LMENU+9);
			}
		}
		
		case D_LMENU+13 : {
			if(response) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_LMENU+13, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "* Поле ввода пустое!\nВведите кол-во убийств для выхода из ЧС:", "OK", "CANCEL");
				} else if(!(1 <= inputtext[0] <= 25)) {
					SPD(playerid, D_LMENU+13, DIALOG_STYLE_INPUT, "L-Menu. Черный список", "* Кол-во убийств может быть от 1 до 25!\nВведите кол-во убийств для выхода из ЧС:", "OK", "CANCEL");
				} else {
					FracInfo[GetFracID(playerid)][fBConf][bKILLS] = inputtext[0];
					ShowLMenu(playerid, D_LMENU+9);
				}
			} else {
				ShowLMenu(playerid, D_LMENU+9);
			}
		}
		
		case D_LMENU+14 : {
			if(response) {
				new fracid = GetFracID(playerid);
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_LMENU+14, DIALOG_STYLE_INPUT, "L-Menu. Ранг новостей", "* Поле ввода пустое!\nВведите ранг для написания в /gov:", "OK", "CANCEL");
				} else if(!(1 <= inputtext[0] <= RankNums[fracid])) {
					SPD(playerid, D_LMENU+14, DIALOG_STYLE_INPUT, "L-Menu. Ранг новостей", "* Неверный ранг!\nВведите ранг для написания в /gov:", "OK", "CANCEL");
				} else {
					SetGRank(fracid, inputtext[0]);
					ShowLMenu(playerid);
				}
			} else {
				ShowLMenu(playerid);
			}
		}

		case D_LMENU+1 : {
			if(response) {
				LoadFile("dialog/lmenu/colors.lst", dialog);
				SPD(playerid, D_LMENU+2, 1, "L-Menu: Смена цвета", dialog, "OK", "CANCEL");
			} else {
				LoadFile("dialog/lmenu/colors.lst", dialog);
				SPD(playerid, D_LMENU+3, 1, "L-Menu: Смена цвета", dialog, "OK", "CANCEL");
			}
			return 1;
		}
		
		case D_LMENU+2 : {
			if(response && Pl::Info[playerid][pLeader]) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					Send(playerid, COLOR_GREY, "* Вы оставили поле ввода пустым!");
					LoadFile("dialog/lmenu/colors.lst", dialog);
					SPD(playerid, D_LMENU+2, 1, "L-Menu: Смена цвета", dialog, "OK", "CANCEL");
				
				} else if(inputtext[0] < 0 || inputtext[0] > 256) {
					Send(playerid, COLOR_GREY, "* Вы ввели не правельный ID цвета!");
					LoadFile("dialog/lmenu/colors.lst", dialog);
					SPD(playerid, D_LMENU+2, 1, "L-Menu: Смена цвета", dialog, "OK", "CANCEL");
				
				} else {
					new idx, v_frac, carid = GetPlayerVehicleID(playerid);
					if(!Pl::isAdmin(playerid, 5)) if(!IsInRespawn(GetFracID(playerid), carid))
						return Send(playerid, COLOR_GREY, "* Вы слишком далеко от респавна!");
					
					if(Fc::GetInfo( carid, "fi", v_frac, idx)) {
						if(v_frac == Pl::Info[playerid][pLeader] && !Fc::IsEditMode(playerid)) {
							new Float: posa, fracmoney = GetFracMoney(v_frac), cost = (ModelCost(GetVehicleModel(carid)) / 10);
							if(!Fc::IsEditMode(playerid) && cost > fracmoney) {
								format(string, sizeof(string), "* Недостаточно средств! Необходимо: $%i", cost);
								Send(playerid, COLOR_GREY, string);
							} else {
								if(!Fc::IsEditMode(playerid)) GiveFracMoney(v_frac, -cost);
								GetVehiclePos(carid, posx, posy, posz); GetVehicleZAngle(carid, posa);
								AutoInfo[0][aMileage] = AutoInfo[ carid ][aMileage];
								Fc::Info[ idx ][ Fc::Color ][ 0 ] = inputtext[0];
								Fc::RecreateVehicle( idx ); Fc::Update( idx );
								AutoInfo[ carid ][aMileage] = AutoInfo[0][aMileage];
								SetVehiclePos(Fc::Info[ idx ][ Fc::Id ][ 1 ], posx, posy, posz); SetVehicleZAngle(carid, posa);
								SetVehicleNumberPlate(Fc::Info[ idx ][ Fc::Id ][ 1 ], Fc::Info[ idx ][ Fc::Number ]);
								Rac::PutPlayerInVehicle(playerid, Fc::Info[ idx ][ Fc::Id ][ 1 ], 0);
								format(string, sizeof(string),"* Цвет машины был изминен на: %d", inputtext[0]);
								Send(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "~r~-$%i", cost);
								GameTextForPlayer(playerid, string, 5000, 1);
							}
						} else {
							format(string, sizeof(string),"* Вы не лидер %s", FracInfo[ Fc::Info[ idx ][ Fc::FracId ] ][ fName ]);
							Send(playerid, COLOR_GREY, string);
						}
					}
				}
			}
			
			return 1;
		}
		
		case D_LMENU+3 :
		{
			if( response )
			{
				if( sscanf(inputtext, "i", inputtext[0]) )
				{
					Send(playerid, COLOR_GREY, "* Вы оставили поле ввода пустым!");
					LoadFile("dialog/lmenu/colors.lst", dialog);
					SPD(playerid, D_LMENU+3, 1, "L-Menu: Смена цвета", dialog, "Enter", "Cancel");
				}
				else if( inputtext[0] < 0 || inputtext[0] > 256 )
				{
					Send(playerid, COLOR_GREY, "* Вы ввели не правельный ID цвета!");
					LoadFile("dialog/lmenu/colors.lst", dialog);
					SPD(playerid, D_LMENU+3, 1, "L-Menu: Смена цвета", dialog, "Enter", "Cancel");
				}
				else
				{
					new idx, v_frac, carid = GetPlayerVehicleID(playerid);
					if( !Pl::isAdmin(playerid, 5) ) if( !IsInRespawn(GetFracID(playerid), carid) )
						return Send(playerid, COLOR_GREY, "* Вы слишком далеко от респавна!");
						
					if( Fc::GetInfo( carid, "fi", v_frac, idx ) )
					{
						if( v_frac == Pl::Info[playerid][pLeader] && !Fc::IsEditMode( playerid ) )
						{
							new Float: posa, fracmoney = GetFracMoney(v_frac), cost = ( ModelCost( GetVehicleModel( carid ) ) / 10 );
							if( !Fc::IsEditMode( playerid ) ) if( cost > fracmoney )
							{
								format(string, sizeof(string), "* Недостаточно средств! Необходимо: $%i", cost);
								Send(playerid, COLOR_GREY, string);
							}
							else
							{
								if( !Fc::IsEditMode( playerid ) ) GiveFracMoney(v_frac, -cost);
								GetVehiclePos(carid, posx, posy, posz); GetVehicleZAngle(carid, posa);
								AutoInfo[0][aMileage] = AutoInfo[ carid ][aMileage];
								Fc::Info[ idx ][ Fc::Color ][ 1 ] = inputtext[0];
								Fc::RecreateVehicle( idx ); Fc::Update( idx );
								SetVehiclePos(Fc::Info[ idx ][ Fc::Id ][ 1 ], posx, posy, posz); SetVehicleZAngle(carid, posa);
								SetVehicleNumberPlate(Fc::Info[ idx ][ Fc::Id ][ 1 ], Fc::Info[ idx ][ Fc::Number ]);
								AutoInfo[ carid ][aMileage] = AutoInfo[0][aMileage];
								Rac::PutPlayerInVehicle(playerid, Fc::Info[ idx ][ Fc::Id ][ 1 ], 0);
								format(string, sizeof(string),"* Цвет машины был изминен на: %d", inputtext[0]);
								Send(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "~r~-$%i", cost);
								GameTextForPlayer(playerid, string, 5000, 1);
							}
						}
						else
						{
							format(string, sizeof(string),"* Вы не лидер %s", FracInfo[ Fc::Info[ idx ][ Fc::FracId ] ][ fName ]);
							Send(playerid, COLOR_GREY, string);
						}
					}
				}
			}
			
			return 1;
		}
		
		case D_LMENU+4 : {
			if(response) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_LMENU+4, DIALOG_STYLE_INPUT, "L-Menu: Смена ранга", "Введите ранг с которого будет доступна машина.", "Enter", "Back");
				} else {
					new idx, v_frac, carid = GetPlayerVehicleID(playerid);
					if( Fc::GetInfo( carid, "fi", v_frac, idx ) ) {
						if(v_frac == Pl::Info[playerid][pLeader] && !Fc::IsEditMode(playerid)) {
							Fc::Info[idx][Fc::RankId] = inputtext[0];
							Fc::Update( idx );
							format(string, sizeof(string),"* Теперь машина доступна с %d-го ранга!", inputtext[0]);
							Send(playerid, COLOR_WHITE, string); 
						} else {
							format(string, sizeof(string),"* Вы не лидер %s", FracInfo[ Fc::Info[ idx ][ Fc::FracId ] ][ fName ]);
							Send(playerid, COLOR_GREY, string);
						}
					}
				}
			}
			else
			{
				LoadFile("dialog/lmenu/main.lst", dialog);
				SPD(playerid, D_LMENU, 2, "L-Menu:  Что хотите изменить?", dialog, "Выбор", "Отмена");
			}
			
			return 1;
		}
		
		case D_LMENU+5 :
		{
			if( response )
			{
				new number[10];
				if( sscanf(inputtext, "s[10]", number) ) return SPD(playerid, D_LMENU+5, 1, "L-Menu: Смена номера", "Введите новый номер(макс. 8 символов)", "Enter", "Back");
				if( strlen(number) < 1 || strlen(number) > 8 ) return SPD(playerid, D_LMENU+5, 1, "L-Menu: Смена номера", "Введите новый номер(макс. 8 символов)", "Enter", "Back");
				if(!regex_match_exid(number, ValidText)) return SPD(playerid, D_LMENU+5, 1, "L-Menu: Смена номера", "Введите новый номер(макс. 8 символов)", "Enter", "Back");
				
				new idx, v_frac, carid = GetPlayerVehicleID(playerid);
				if( !Pl::isAdmin(playerid, 5) ) if( !IsInRespawn(GetFracID(playerid), carid) )
					return Send(playerid, COLOR_GREY, "* Вы слишком далеко от респавна!");
				
				if( Fc::GetInfo( carid, "fi", v_frac, idx ) )
				{
					if( v_frac == Pl::Info[playerid][pLeader] && !Fc::IsEditMode( playerid ) )
					{
						new Float: posa, fracmoney = GetFracMoney(v_frac), cost = ( ModelCost( GetVehicleModel( carid ) ) / 10 );
						if( !Fc::IsEditMode( playerid ) ) if( cost > fracmoney )
						{
							format(string, sizeof(string), "* Недостаточно средств! Необходимо: $%i", cost);
							Send(playerid, COLOR_GREY, string);
						}
						else
						{
							if( !Fc::IsEditMode( playerid ) ) GiveFracMoney(v_frac, -cost);
							format(Fc::Info[ idx ][ Fc::Number ], 10, "%s", number);
							GetVehiclePos(carid, posx, posy, posz); GetVehicleZAngle(carid, posa);
							AutoInfo[0][aMileage] = AutoInfo[ carid ][aMileage];
							Fc::RecreateVehicle( idx ); Fc::Update( idx );
							SetVehiclePos(Fc::Info[ idx ][ Fc::Id ][ 1 ], posx, posy, posz); SetVehicleZAngle(Fc::Info[ idx ][ Fc::Id ][ 1 ], posa);
							SetVehicleNumberPlate(Fc::Info[ idx ][ Fc::Id ][ 1 ], Fc::Info[ idx ][ Fc::Number ]);
							AutoInfo[Fc::Info[ idx ][ Fc::Id ][ 1 ]][aMileage] = AutoInfo[0][aMileage];
							Rac::PutPlayerInVehicle(playerid, Fc::Info[ idx ][ Fc::Id ][ 1 ], 0);
							Send(playerid, COLOR_WHITE, "* Номер был изменен!");
							format(string, sizeof(string), "~r~-$%i", cost);
							GameTextForPlayer(playerid, string, 5000, 1);
						}
					}
					else
					{
						format(string, sizeof(string),"* Вы не лидер %s", FracInfo[ Fc::Info[ idx ][ Fc::FracId ] ][ fName ]);
						Send(playerid, COLOR_GREY, string);
					}
				}
			}
			else
			{
				LoadFile("dialog/lmenu/main.lst", dialog);
				SPD(playerid, D_LMENU, 2, "L-Menu:  Что хотите изменить?", dialog, "Выбор", "Отмена");
			}
			return 1;
		}
		
		case D_LMENU+6 :
		{
			if( response )
			{
				new idx, v_frac, carid = GetPlayerVehicleID(playerid);
				if( !Pl::isAdmin(playerid, 5) ) if( !IsInRespawn(GetFracID(playerid), carid) )
					return Send(playerid, COLOR_GREY, "* Вы слишком далеко от респавна!");
				
				if( Fc::GetInfo( carid, "fi", v_frac, idx ) )
				{
					if( v_frac == Pl::Info[playerid][pLeader] && !Fc::IsEditMode( playerid ) )
					{
						AutoInfo[0][aMileage] = AutoInfo[ carid ][aMileage];
						GetVehiclePos(carid, Fc::Info[ idx ][ Fc::RespPos ][ 0 ], Fc::Info[ idx ][ Fc::RespPos ][ 1 ], Fc::Info[ idx ][ Fc::RespPos ][ 2 ]);
						GetVehicleZAngle(carid, Fc::Info[ idx ][ Fc::RespPos ][ 3 ]);	
						Fc::RecreateVehicle( idx ); Fc::Update( idx );
						SetVehicleNumberPlate(Fc::Info[ idx ][ Fc::Id ][ 1 ], Fc::Info[ idx ][ Fc::Number ]);
						AutoInfo[Fc::Info[ idx ][ Fc::Id ][ 1 ]][aMileage] = AutoInfo[0][aMileage];
						Rac::PutPlayerInVehicle(playerid, Fc::Info[ idx ][ Fc::Id ][ 1 ], 0);
						Send(playerid, COLOR_WHITE, "* Машина была припаркована!");
					}
					else
					{
						format(string, sizeof(string),"* Вы не лидер %s", FracInfo[ Fc::Info[ idx ][ Fc::FracId ] ][ fName ]);
						Send(playerid, COLOR_GREY, string);
					}
				}
			}
			else
			{
				LoadFile("dialog/lmenu/main.lst", dialog);
				SPD(playerid, D_LMENU, 2, "L-Menu:  Что хотите изменить?", dialog, "Выбор", "Отмена");
			}
			
			return 1;
		}
		
		case D_LMENU+7 :
		{
			if( response )
			{
				new model_id;
				name_to_id( inputtext, model_id );
				
				if( model_id < 400 || model_id > 611 ) return Send(playerid, COLOR_GREY, "* Unknown model id!");
				if( Fc::IsForbiddenVeh( model_id ) ) return Send( playerid, COLOR_GREY, "* Forbidden model id!");
				
				new idx, v_frac, carid = GetPlayerVehicleID(playerid);
				if( !Pl::isAdmin(playerid, 5) ) if( !IsInRespawn(GetFracID(playerid), carid) )
					return Send(playerid, COLOR_GREY, "* Вы слишком далеко от респавна!");
				
				if( Fc::GetInfo( carid, "fi", v_frac, idx ) )
				{
					if( v_frac == Pl::Info[playerid][pLeader] && !Fc::IsEditMode( playerid ) )
					{
						new Float: posa, fracmoney = GetFracMoney(v_frac), cost = ModelCost( model_id );
						if( !Fc::IsEditMode( playerid ) ) if( cost > fracmoney )
						{
							format(string, sizeof(string), "* Недостаточно средств! Необходимо: $%i", cost);
							Send(playerid, COLOR_GREY, string);
						}
						else
						{
							if( !Fc::IsEditMode( playerid ) ) GiveFracMoney(v_frac, -cost);
							GetVehiclePos(carid, posx, posy, posz); GetVehicleZAngle(carid, posa);
							Fc::Info[ idx ][ Fc::Model ] = model_id;
							Fc::RecreateVehicle( idx ); Fc::Update( idx );
							AutoInfo[Fc::Info[ idx ][ Fc::Id ][ 1 ]][aMileage] = 0.0000;
							SetVehiclePos(Fc::Info[ idx ][ Fc::Id ][ 1 ], posx, posy, posz); SetVehicleZAngle(carid, posa);
							SetVehicleNumberPlate(Fc::Info[ idx ][ Fc::Id ][ 1 ], Fc::Info[ idx ][ Fc::Number ]);
							Rac::PutPlayerInVehicle(playerid, Fc::Info[ idx ][ Fc::Id ][ 1 ], 0);
							Send(playerid, COLOR_WHITE, "* Вы изменили марку машины!");
							format(string, sizeof(string), "~r~-$%i", cost);
							GameTextForPlayer(playerid, string, 5000, 1);
						}
					}
					else
					{
						format(string, sizeof(string),"* Вы не лидер %s", FracInfo[ Fc::Info[ idx ][ Fc::FracId ] ][ fName ]);
						Send(playerid, COLOR_GREY, string);
					}
				}
			}
			else
			{
				LoadFile("dialog/lmenu/main.lst", dialog);
				SPD(playerid, D_LMENU, 2, "L-Menu:  Что хотите изменить?", dialog, "Выбор", "Отмена");
			}
		}
		
		case D_ADD_FC :
		{
			if( response )
			{
				new frac_id, model_id;
				name_to_id( inputtext, model_id );
				
				if( model_id < 400 || model_id > 611 ) return Send(playerid, COLOR_GREY, "* Unknown model id!");
				if( Fc::IsForbiddenVeh( model_id ) ) return Send( playerid, COLOR_GREY, "* Forbidden model id!");
				frac_id = GetPVarInt( playerid, "SelectFrac");
				new Float: r_pos[4]; GetPlayerPos( playerid, r_pos[0], r_pos[1], r_pos[2]); GetPlayerFacingAngle(playerid, r_pos[3]);
				format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableFracVehicles__"` (`model`,`frac`,`resp_pos`) VALUES \
				('%i','%i','%.3f,%.3f,%.3f,%.3f')", model_id, frac_id, r_pos[0], r_pos[1], r_pos[2], r_pos[3]);
				
				if(Db::query(query) && Db::free_result()) {
					new id = Fc::TOTAL; Fc::TOTAL++;
					
					Fc::Info[ id ][ Fc::Id ][ 0 ] 		= Db::insert_id();
					Fc::Info[ id ][ Fc::Model ] 		= model_id;
					Fc::Info[ id ][ Fc::FracId ]		= frac_id;
					Fc::Info[ id ][ Fc::Color ][ 0 ] 	= random( 100 );
					Fc::Info[ id ][ Fc::Color ][ 1 ] 	= random( 100 );
					Fc::Info[ id ][ Fc::RespPos ][ 0 ]	= r_pos[0];
					Fc::Info[ id ][ Fc::RespPos ][ 1 ]	= r_pos[1];
					Fc::Info[ id ][ Fc::RespPos ][ 2 ]	= r_pos[2];
					Fc::Info[ id ][ Fc::RespPos ][ 3 ]	= r_pos[3];
					
					strmid(Fc::Info[ id ][ Fc::Number ], Fc::DEF_NUMBER, 0, strlen(Fc::DEF_NUMBER), 255);
					
					Fc::Info[ id ][ Fc::Id ][ 1 ] =
					CreateVeh(
						Fc::Info[ id ][ Fc::Model ],
						Fc::Info[ id ][ Fc::RespPos ][ 0 ],
						Fc::Info[ id ][ Fc::RespPos ][ 1 ],
						Fc::Info[ id ][ Fc::RespPos ][ 2 ],
						Fc::Info[ id ][ Fc::RespPos ][ 3 ],
						Fc::Info[ id ][ Fc::Color ][ 0 ],
						Fc::Info[ id ][ Fc::Color ][ 1 ],
						1200
					);
					
					SetVehicleNumberPlate(Fc::Info[ id ][ Fc::Id ][ 1 ], Fc::Info[ id ][ Fc::Number ]);
					Rac::PutPlayerInVehicle(playerid, Fc::Info[ id ][ Fc::Id ][ 1 ], 0); Fc::Update( id );
					Iter_Add(TeamVehicles[frac_id], Fc::Info[ id ][ Fc::Id ][ 1 ]);
					Send( playerid, COLOR_YELLOW, "* Машина добавлена!");
				}
			}
			
			return 1;
		}
		
		case D_SHOW_MODEL :
		{
			if( response )
			{
				if( !strcmp(inputtext, "Добавить", true) )
				{
					LoadFile("dialog/lmenu/addmodel.lst", dialog);
					SPD( playerid, D_ADD_MODEL, 1, "Добавить", dialog, "Ok", "Cancel");
				}
				else if( strcmp(inputtext, "------------", true) )
				{
					new model_id;
					name_to_id( inputtext, model_id );
					if( model_id < 400 || model_id > 611 ) return Send(playerid, COLOR_GREY, "* Unknown model id!");
					if( Fc::IsForbiddenVeh( model_id ) ) return Send( playerid, COLOR_GREY, "* Forbidden model id!");
					
					SetPVarInt( playerid, "SelectModel", model_id);
					SPD( playerid, D_EDIT_MODEL, 2, "Options", "Изменить\nУдалить", "Ok", "Cancel");
				}
			}
			
			return 1;
		}
		
		case D_EDIT_MODEL :
		{
			new frac_id = GetPVarInt( playerid, "SelectFrac" );
			if( response )
			{
				switch( listitem )
				{
					case 0 :
					{
						SPD( playerid, D_EDIT_MODEL+1, 1, "Edit model", "Введите новый ID или название модели.\n\
						Пример: 400 или Landstalker", "Ok", "Cancel");
					}
					case 1 :
					{
						new model_id = GetPVarInt( playerid, "SelectModel" );
						format(query, sizeof query, "DELETE FROM `"#__DbPrefix__""#__TableFracModels__"` WHERE `frac_id` = '%i' AND `model_id` = '%i'",
						frac_id, model_id);
						
						if( Db::query(query) && Db::free_result() )
							Send( playerid, COLOR_WHITE, " Эта модель была из списка доступных!");
					}
				}
			}
			else Fc::ShowModel( playerid, frac_id, D_SHOW_MODEL );
			
			return 1;
		}
		
		case D_EDIT_MODEL+1 :
		{
			if( response )
			{
				new newmodel;
				if( !name_to_id( inputtext, newmodel ) )
				{
					SPD( playerid, D_EDIT_MODEL+1, 1, "Edit model", "Введите новый ID или название модели.\n\
					Пример: 400 или Landstalker", "Ok", "Cancel");
				}
				else
				{
					if( Fc::IsForbiddenVeh( newmodel ) ) return Send( playerid, COLOR_GREY, "* Forbidden model id!");
					new frac_id = GetPVarInt( playerid, "SelectFrac" );
					new model_id = GetPVarInt( playerid, "SelectModel" );
					format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableFracModels__"` SET `model_id` = '%i' WHERE \
					`frac_id` = '%i' AND `model_id` = '%i'", newmodel, frac_id, model_id);
					
					if( Db::query(query) && Db::free_result() )
						Send( playerid, COLOR_WHITE, " Модель была изменена!");
				}
			}
			
			return 1;
		}
		
		case D_ADD_MODEL :
		{
			if( response )
			{
				new model_id;
				if( !name_to_id( inputtext, model_id ) )
				{
					LoadFile("dialog/lmenu/addmodel.lst", dialog);
					SPD( playerid, D_ADD_MODEL, 1, "Добавить", dialog, "Ok", "Cancel");
				}
				else
				{
					new frac_id = GetPVarInt( playerid, "SelectFrac" );
					if( model_id < 400 || model_id > 611 ) return Send(playerid, COLOR_GREY, "* Unknown model id!");
					if( Fc::IsForbiddenVeh( model_id ) ) return Send( playerid, COLOR_GREY, "* Forbidden model id!");
					if( Fc::IsThereModel( frac_id, model_id ) ) return Send(playerid, COLOR_RED, "* Эта модель уже есть в списке!");
					format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableFracModels__"` (`frac_id`, `model_id`) VALUES ('%i','%i')", frac_id, model_id);
					if( Db::query(query) && Db::free_result() )
					{
						format(string, sizeof(string), " Модель добвалена! Model_id: %i; Model_name: %s", model_id, VehicleNames[model_id-400]);
						Send(playerid, COLOR_WHITE, string);
					}
				}
			}
			return 1;
		}

		case TP_EDIT : 
		{
			if( response )
			{
				switch(listitem)
				{
					case 0 : SPD(playerid, TP_EDIT+1, 2, "Первый пикап", "Модель\nТип\nВирт. мир\nПозиция", "выбрать", "назад");
					case 1 : SPD(playerid, TP_EDIT+2, 2, "Второй пикап", "Модель\nТип\nВирт. мир\nПозиция", "выбрать", "назад");
					case 2 :
					{
						clear(dialog);
						new portal = GetPVarInt(playerid, "selectTeleport");
						for(new i; i < MAX_FRAC; i++)
						{
							if( Tp::Info[ portal ][ Tp::Allowed ][ i ] )
								scf(dialog,string,"[{33AA33} - {ffffff}]{%h}%s\t\t{ffffff}\n", (GetFracColor(i)>>>8), FracInfo[i][fName]);
							else
								scf(dialog,string,"[{AA3333} X {ffffff}]{%h}%s\t\t{ffffff}\n", (GetFracColor(i)>>>8), FracInfo[i][fName]);
						}
						SPD(playerid, TP_EDIT+9, 2, "Доступность для фракций", dialog, "выбрать", "назад");
					}
					case 3 :
					{
						TOTAL_PORTAL --;
						new i = GetPVarInt(playerid, "selectTeleport");
						DestroyDynamicPickup(Tp::Info[ i ][ Tp::Pickup ][ 0 ]);
						DestroyDynamicPickup(Tp::Info[ i ][ Tp::Pickup ][ 1 ]);
						format(query, sizeof query, "DELETE FROM `"#__DbPrefix__""#__TablePickups__"` WHERE `id`='%i'", Tp::Info[ i ][ Tp::Id ]);
						Db::query_callback(0, query, "OnQueryFinish", 0, Db::handle);
						
						copyArray(Tp::Info[ i ][ Tp::Model ], Tp::Info[ TOTAL_PORTAL ][ Tp::Model ], 2);
						copyArray(Tp::Info[ i ][ Tp::Type ], Tp::Info[ TOTAL_PORTAL ][ Tp::Type ], 2);
						copyArray(Tp::Info[ i ][ Tp::Inter ], Tp::Info[ TOTAL_PORTAL ][ Tp::Inter ], 2);
						copyArray(Tp::Info[ i ][ Tp::World ], Tp::Info[ TOTAL_PORTAL ][ Tp::World ], 2);
						copyArray(Tp::Info[ i ][ Tp::Pickup ], Tp::Info[ TOTAL_PORTAL ][ Tp::Pickup ], 2);
						copyArray(Tp::Info[ i ][ Tp::Portal1 ], Tp::Info[ TOTAL_PORTAL ][ Tp::Portal1 ], 4);
						copyArray(Tp::Info[ i ][ Tp::Portal2 ], Tp::Info[ TOTAL_PORTAL ][ Tp::Portal2 ], 4);
					}
				}
			}
			else SetPVarInt(playerid, "selectTeleport", 0xffff);
			
			return 1;
		}
		case TP_EDIT+1 :
		{
			if( response )
			{
				switch(listitem)
				{
					case 0 : SPD(playerid, TP_EDIT+3, 1, "Модель пикапа", "Введите id объекта.", "ввод", "назад");
					case 1 : SPD(playerid, TP_EDIT+5, 1, "Тип пикапа", "Введите тип пикапа.", "ввод", "назад");
					case 2 : SPD(playerid, TP_EDIT+7, 1, "Мир пикапа", "Введите мир пикапа.", "ввод", "назад");
					case 3 : Send(playerid, -1, "Встанте на то место где должен быть пикап и введите /setpic1");
				}
			}
			else
			{
				format(string, sizeof string, "Telepot №%i", Tp::Info[GetPVarInt(playerid, "selectTeleport")][Tp::Id]);
				SPD(playerid,TP_EDIT,2,string,"Перый пикап\nВторой пикап\nОткрыть/Закрыть\nУдалить","Выбор","Выход");
			}
		}
		
		case TP_EDIT+2 : {
			if(response) {
				switch(listitem) {
					case 0 : SPD(playerid, TP_EDIT+4, 1, "Модель пикапа", "Введите id объекта.", "ввод", "назад");
					case 1 : SPD(playerid, TP_EDIT+6, 1, "Тип пикапа", "Введите тип пикапа.", "ввод", "назад");
					case 2 : SPD(playerid, TP_EDIT+8, 1, "Мир пикапа", "Введите мир пикапа.", "ввод", "назад");
					case 3 : Send(playerid, -1, "Встанте на то место где должен быть пикап и введите /setpic2");
				}
			} else {
				format(string, sizeof string, "Telepot №%i", Tp::Info[GetPVarInt(playerid, "selectTeleport")][Tp::Id]);
				SPD(playerid,TP_EDIT,2,string,"Перый пикап\nВторой пикап\nОткрыть/Закрыть\nУдалить","Выбор","Выход");
			}
		}
		
		case TP_EDIT+3 :
		{
			if( response )
			{
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					SPD(playerid, TP_EDIT+3, 1, "Модель пикапа", "Введите id объекта.", "ввод", "назад");
				}
				else
				{
					new teleport = GetPVarInt(playerid, "selectTeleport");
					Tp::Info[ teleport ][ Tp::Model ][ 0 ] = inputtext[0];
					Streamer_SetIntData(1, Tp::Info[ teleport ][ Tp::Pickup ][ 0 ], E_STREAMER_MODEL_ID, inputtext[0]);
					updatePickup( teleport ), SetPVarInt(playerid, "selectTeleport", 0xffff), Streamer_Update(playerid);
				}
			}
			else SPD(playerid, TP_EDIT+1, 2, "Первый пикап", "Модель\nПозиция", "выбрать", "назад");
			
			return 1;
		}
		case TP_EDIT+4 :
		{
			if( response )
			{
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					SPD(playerid, TP_EDIT+3, 1, "Модель пикапа", "Введите id объекта.", "ввод", "назад");
				}
				else
				{
					new teleport = GetPVarInt(playerid, "selectTeleport");
					Tp::Info[ teleport ][ Tp::Model ][ 1 ] = inputtext[0];
					Streamer_SetIntData(1, Tp::Info[ teleport ][ Tp::Pickup ][ 1 ], E_STREAMER_MODEL_ID, inputtext[0]);
					updatePickup( teleport ), SetPVarInt(playerid, "selectTeleport", 0xffff), Streamer_Update(playerid);
				}
			}
			else SPD(playerid, TP_EDIT+1, 2, "Второй пикап", "Модель\nПозиция", "выбрать", "назад");
			
			return 1;
		}
		case TP_EDIT+5 :
		{
			if( response )
			{
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					SPD(playerid, TP_EDIT+5, 1, "Тип пикапа", "Введите тип пикапа.", "ввод", "назад");
				}
				else if( inputtext[0] < 1 || inputtext[0] > 23)
				{
					SPD(playerid, TP_EDIT+5, 1, "Тип пикапа", "Введите тип пикапа.", "ввод", "назад");
				}
				else
				{
					new teleport = GetPVarInt(playerid, "selectTeleport");
					Tp::Info[ teleport ][ Tp::Type ][ 0 ] = inputtext[0];
					Streamer_SetIntData(1, Tp::Info[ teleport ][ Tp::Pickup ][ 0 ], E_STREAMER_TYPE, inputtext[0]);
					updatePickup( teleport ), SetPVarInt(playerid, "selectTeleport", 0xffff), Streamer_Update(playerid);
				}
			}
			else SPD(playerid, TP_EDIT+1, 2, "Второй пикап", "Модель\nТип\nПозиция", "выбрать", "назад");
			
			return 1;
		}
		case TP_EDIT+6 :
		{
			if( response )
			{
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					SPD(playerid, TP_EDIT+6, 1, "Тип пикапа", "Введите тип пикапа.", "ввод", "назад");
				}
				else if( inputtext[0] < 1 || inputtext[0] > 23)
				{
					SPD(playerid, TP_EDIT+6, 1, "Тип пикапа", "Введите тип пикапа.", "ввод", "назад");
				}
				else
				{
					new teleport = GetPVarInt(playerid, "selectTeleport");
					Tp::Info[ teleport ][ Tp::Type ][ 1 ] = inputtext[0];
					Streamer_SetIntData(1, Tp::Info[ teleport ][ Tp::Pickup ][ 1 ], E_STREAMER_TYPE, inputtext[0]);
					updatePickup( teleport ), SetPVarInt(playerid, "selectTeleport", 0xffff), Streamer_Update(playerid);
				}
			}
			else SPD(playerid, TP_EDIT+2, 2, "Второй пикап", "Модель\nТип\nПозиция", "выбрать", "назад");
			
			return 1;
		}
		case TP_EDIT+7 :
		{
			if( response )
			{
				if(sscanf(inputtext, "i", inputtext[0]))
				{
					SPD(playerid, TP_EDIT+7, 1, "Мир пикапа", "Введите мир пикапа.", "ввод", "назад");
				}
				else if( inputtext[0] < 0 )
				{
					SPD(playerid, TP_EDIT+7, 1, "Мир пикапа", "Введите мир пикапа.", "ввод", "назад");
				}
				else
				{
					new teleport = GetPVarInt(playerid, "selectTeleport");
					Tp::Info[ teleport ][ Tp::World ][ 0 ] = inputtext[0];
					DestroyDynamicPickup(Tp::Info[ teleport ][ Tp::Pickup ][ 0 ]);
					Tp::Info[ teleport ][ Tp::Pickup ][ 0 ]=_AddPickup(Tp::Info[ teleport ][ Tp::Model ][ 0 ],Tp::Info[ teleport ][ Tp::Type ][ 0 ],Tp::Info[ teleport ][ Tp::Portal1 ],Tp::Info[ teleport ][ Tp::World ][ 0 ]);
					updatePickup( teleport ), Rac::SetPlayerVirtualWorld(playerid,inputtext[0]), SetPVarInt(playerid, "selectTeleport", 0xffff);
				}
			}
			else SPD(playerid, TP_EDIT+1, 2, "Второй пикап", "Модель\nТип\nВирт. мир\nПозиция", "выбрать", "назад");
			
			return 1;
		}
		
		case TP_EDIT+8 : {
			if(response) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, TP_EDIT+8, 1, "Мир пикапа", "Введите мир пикапа.", "ввод", "назад");
				} else if(inputtext[0] < 0) {
					SPD(playerid, TP_EDIT+8, 1, "Мир пикапа", "Введите мир пикапа.", "ввод", "назад");
				} else {
					new teleport = GetPVarInt(playerid, "selectTeleport");
					Tp::Info[ teleport ][ Tp::World ][ 1 ] = inputtext[0];
					DestroyDynamicPickup(Tp::Info[ teleport ][ Tp::Pickup ][ 1 ]);
					Tp::Info[ teleport ][ Tp::Pickup ][ 1 ]=_AddPickup(Tp::Info[ teleport ][ Tp::Model ][ 1 ],Tp::Info[ teleport ][ Tp::Type ][ 1 ],Tp::Info[ teleport ][ Tp::Portal2 ],Tp::Info[ teleport ][ Tp::World ][ 1 ]);
					updatePickup( teleport ), Rac::SetPlayerVirtualWorld(playerid,inputtext[0]), SetPVarInt(playerid, "selectTeleport", 0xffff);
				}
			}
			else SPD(playerid, TP_EDIT+2, 2, "Второй пикап", "Модель\nТип\nВирт. мир\nПозиция", "выбрать", "назад");
			
			return 1;
		}
		case TP_EDIT+9 :
		{
			if( response )
			{
				clear(dialog);
				new portal = GetPVarInt(playerid, "selectTeleport");
				Tp::Info[ portal ][ Tp::Allowed ][ listitem ] = !Tp::Info[ portal ][ Tp::Allowed ][ listitem ];
				for(new i; i < MAX_FRAC; i++)
				{
					if( Tp::Info[ portal ][ Tp::Allowed ][ i ] )
						scf(dialog,string,"[{33AA33} - {ffffff}]{%h}%s\t\t{ffffff}\n", (GetFracColor(i)>>>8), FracInfo[i][fName]);
					else
						scf(dialog,string,"[{AA3333} X {ffffff}]{%h}%s\t\t{ffffff}\n", (GetFracColor(i)>>>8), FracInfo[i][fName]);
				}
				SPD(playerid, TP_EDIT+9, 2, "Доступность для фракций", dialog, "выбрать", "назад");
				updatePickup( portal );
			}
			else
			{
				format(string, sizeof string, "Telepot №%i", Tp::Info[GetPVarInt(playerid, "selectTeleport")][Tp::Id]);
				SPD(playerid,TP_EDIT,2,string,"Перый пикап\nВторой пикап\nОткрыть/Закрыть\nУдалить","Выбор","Выход");
			}
			
			return 1;
		}
		
		case D_CHANGE_PASS : {
			if(response) {
				keyProtect(inputtext, string);
				GetPlayerName(playerid, plname, 24);
				format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Name`='%s' AND `Key` = '%s'", plname, string);
				if(Db::query(query) && Db::store_result()) {
					if(Db::num_rows() > 0) {
						SPD(playerid, D_CHANGE_PASS+1,DIALOG_STYLE_PASSWORD,"[RP]GrandWorld: ATTENTION PLEASE",
						"ВНИМАНИЕ! Вы хотите изменить пароль своего аккаунта!\n\
						Введите новый пароль и нажмите ОК!\n\n\
						Не рекомендуется использовать простые пароли. Чтобы\n\
						пароль был надежным, он должен содержать цифры,\n\
						заглавные и малые буквы латинского алфавита.","ОК","ОТМЕНА");
					} else {
						AddBanList(playerid, -1, 60, "Попытка взлома аккаунта", 2);
					}
				}
				Db::free_result();
			}
		}
		
		case D_CHANGE_PASS+1 : {
			if(response) {
				if(!strlen(inputtext)) Send(playerid,COLOR_LIGHTRED,"[RP]GrandWorld: Вы не ввели пароль!");
				else {
					keyProtect(inputtext, string); GetPlayerName(playerid, plname, 24);
					format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `Key`='%s' WHERE `Name`='%s'", string, plname);
					if(Db::query(query) && Db::affected_rows()) {
						format(string, sizeof(string), "[RP]GrandWorld: ВНИМАНИЕ! ПАРОЛЬ ИЗМЕНЕН! Ваш новый пароль: %s", inputtext);
						Send(playerid, COLOR_LIGHTRED, string);
						Send(playerid, COLOR_LIGHTRED,"[RP]GrandWorld: ОБЯЗАТЕЛЬНО сделайте скриншот с новым паролем, для этого нажмите F8");
					}
				}
			}
		}
		
		case D_PDDTEST : {
			if(response) {
				new i = GetPVarInt(playerid, "SelectedItem");
				if(!sscanf(inputtext, "c", inputtext[0])) {
					new letter = tolower(inputtext[0]);
					if('a' <= letter <= 'd') {
						if(correctAnswer[i] == letter) {
							format(string, sizeof string, "Вопрос №%i. Ответ верный.", i);
							Send(playerid, COLOR_GREEN, string);
						} else {
							Pl::Info[playerid][pTest] ++;
							format(string, sizeof string, "Вопрос №%i. Ответ не верный.", i);
							Send(playerid, COLOR_LIGHTRED, string);
						}
						if(++i >= sizeof correctAnswer) {
							if(Pl::Info[playerid][pTest] >= 3) {
								SendClientMessage(playerid, COLOR_WHITE, "Тест нe пройден. Допущено более 2-х ошибок.");
								Pl::Info[playerid][pTest] = 0; 
							} else {
								Pl::Info[playerid][pTest] = 999;
								SendClientMessage(playerid, COLOR_GREEN, "* Поздравляю вы сдали теорию. Прошу встаньте в очередь к практике");
								AshQueue(playerid, 0);
							}
							SetPVarInt(playerid, "SelectedItem", -1);
							return SetTimerEx("AC_TogglePlayerControllable", 50, false, "ii", playerid, 1);
						} else {
							SetPVarInt(playerid, "SelectedItem", i);
							format(string, sizeof string, "dialog/pddtest/pdd_test_%i.lst", i);
							LoadFile(string, dialog);
							return SPD(playerid, D_PDDTEST, 1, "[RP]GrandWorld: TEST PDD", dialog, "Ответ", "Отмена");
						}
					}
				}
				format(string, sizeof string, "dialog/pddtest/pdd_test_%i.lst", i);
				LoadFile(string, dialog);
				SPD(playerid, D_PDDTEST, 1, "[RP]GrandWorld: PDD TEST", dialog,"Ответить","Отмена");
			} else {
				Pl::Info[playerid][pTest] = 0;
				SetPVarInt(playerid, "SelectedItem", -1);
				Send(playerid, COLOR_GREY, "* Вы не сдали тест");
				return SetTimerEx("AC_TogglePlayerControllable", 50, false, "ii", playerid, 1);
			}
			return 1;
		}
		
		case D_EN_HOUSE : {
			if(response) {
				new bidx = GetPVarInt(playerid, "PlayerHouse");
				if(Pl::Info[playerid][pHouseKey] == bidx || HouseInfo[bidx][hLock] == 0) {
					Rac::SetPlayerPos(playerid,HouseInfo[bidx][hExitx],HouseInfo[bidx][hExity],HouseInfo[bidx][hExitz]);
					Rac::SetPlayerInterior(playerid,HouseInfo[bidx][hInt]); Rac::SetPlayerVirtualWorld(playerid,HouseInfo[bidx][hVirtual]);
					Pl::Info[playerid][pLocal] = bidx; GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
				}
				else GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
			}
			return 1;
		}
		
		case D_EX_HOUSE : {
			if(response) {
				new bidx = GetPVarInt(playerid, "PlayerHouse");
				Pl::Info[playerid][pLocal] = 0;
				Rac::SetPlayerInterior(playerid, 0);
				Rac::SetPlayerVirtualWorld(playerid, 0);
				Rac::SetPlayerPos(playerid, HouseInfo[bidx][hEnterx], HouseInfo[bidx][hEntery], HouseInfo[bidx][hEnterz]);
				BlockPickup(playerid, HouseInfo[bidx][hPickup]);
			}
			return 1;
		}
		
		case D_EN_BIZ : {
			if(response) {
				new bizz = GetPVarInt(playerid, "PlayerBizz");
				if(Pl::Info[playerid][pBizKey] == BizzInfo[bizz][bID] || Rac::GetPlayerMoney(playerid) >= BizzInfo[bizz][bEntranceCost]) {
					if(BizzInfo[bizz][bLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
					if(Pl::Info[playerid][pBizKey] != BizzInfo[bizz][bID]) {
						if(BizzInfo[bizz][bProducts] <= 0) return GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						if(BizzInfo[bizz][bType] == 1 || BizzInfo[bizz][bType] == 2) {
							if(BizzInfo[bizz][bID] == 83) goto ENTER;
							else if(BizzInfo[bizz][bID] == 50) {
								Pl::Paintballing[playerid] = 1;
								Iter_Add(PaintballPlayers, playerid);
								
								Rac::GivePlayerMoney(playerid,-BizzInfo[bizz][bEntranceCost]);
								BizzInfo[bizz][bTill] += BizzInfo[bizz][bEntranceCost];
								BizzInfo[bizz][bProducts]--;
								
								new rand = random(sizeof(PaintballSpawns));
								Rac::SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
								Rac::TogglePlayerControllable(playerid, 0);
								
								if(Iter_Count(PaintballPlayers) == 2 && PaintballRound != 1 && StartingPaintballRound != 1) {
									StartingPaintballRound = 1;
									SetTimer("PreparePaintball", 15000, 0);
									SendPaintballMessage(COLOR_YELLOW, "* Пэйнтболл начнется через 15 секунд!");
								}
								
								format(string, sizeof(string), "~r~-$%i~n~~w~WELCOME PAINT_BALL", BizzInfo[bizz][bEntranceCost]);
								return GameTextForPlayer(playerid, string, 5000, 3);
							}
							else return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
						}
						
						ENTER:
						BizzInfo[bizz][bProducts]--;
						BizzInfo[bizz][bTill] += BizzInfo[bizz][bEntranceCost];
						Rac::GivePlayerMoney(playerid,-BizzInfo[bizz][bEntranceCost]);
						format(string, sizeof(string), "~r~-$%d", BizzInfo[bizz][bEntranceCost]);
						GameTextForPlayer(playerid, string, 5000, 3);
					}
					Pl::Info[playerid][pLocal] = (bizz*99);
					BlockPickup(playerid, BizzInfo[bizz][bPickupExit]);
					Rac::SetPlayerInterior(playerid,BizzInfo[bizz][bInterior]);
					Rac::SetPlayerVirtualWorld(playerid, BizzInfo[bizz][bVirtual]);
					Rac::SetPlayerPos(playerid,BizzInfo[bizz][bExitX], BizzInfo[bizz][bExitY], BizzInfo[bizz][bExitZ]);
				}
				else GameTextForPlayer(playerid, "~r~You dont have the cash", 5000, 1);
			}
			return 1;
		}
		
		case D_EX_BIZ : {
			if(response) {
				new bizz = GetPVarInt(playerid, "PlayerBizz");
				Pl::Info[playerid][pLocal] = 0;
				Rac::SetPlayerInterior(playerid, 0);
				Rac::SetPlayerVirtualWorld(playerid, 0);
				Rac::SetPlayerPos(playerid,BizzInfo[bizz][bEnterX],BizzInfo[bizz][bEnterY],BizzInfo[bizz][bEnterZ]);
				BlockPickup(playerid, BizzInfo[bizz][bPickupEnter]);
			}
		}
		
		case 2222 : {
			if(response) {
				if(Rac::GetPlayerMoney(playerid) < 100000) return Send(playerid, COLOR_GREY, "* У Вас не хватает денег!");
				if(0 <= listitem < sizeof fightStyle) {
					Rac::GivePlayerMoney(playerid, -100000);
					Pl::Info[playerid][pFightstyle] = fightStyle[listitem][0];
					SetPlayerFightingStyle(playerid, fightStyle[listitem][0]);
					format(string, sizeof string, "* Теперь вы деретесь в стиле %s. Время драться!", fightStyle[listitem][1]);
					Send(playerid, COLOR_GREEN, string);
				}
			}
			return 1;
		}
		
		case D_FIGHTSTYLE : {
			if(response) {
				if(0 <= listitem < sizeof fightStyle) {
					Pl::Info[playerid][pFightstyle] = fightStyle[listitem][0];
					SetPlayerFightingStyle(playerid, fightStyle[listitem][0]);
					format(string, sizeof string, "* Теперь вы деретесь в стиле %s. Время драться!", fightStyle[listitem][1]);
					Send(playerid, COLOR_GREEN, string);
				}
			}
		}
		
		case 149 : {
			if(response) {
				if(Rac::GetPlayerHealth(playerid) >= 100.0) return Send(playerid, COLOR_GREY, "* Вы сыты!");
				Rac::GivePlayerHealth(playerid, EatInfo[listitem][eat_hp], 100.0);
				format(string, sizeof(string), "* %s взял %s.", GetName(playerid), EatInfo[listitem][eat_name]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "~g~+ %.1f HP", EatInfo[listitem][eat_hp]);
				GameTextForPlayer(playerid, string, 5000, 1);
				
				if(Rac::GetPlayerHealth(playerid) >= 100.0) {
					Send(playerid, COLOR_GREY, "* Вы сыты!");
				} else {
					ShowCantina(playerid);
				}
			}
		}
		
		case 65 : {
			if(response) {
				Pl::Info[playerid][pSex] = 2;
				Send(playerid, COLOR_LIGHTBLUE, "* Ок, вы девушка");
			} else {
				Pl::Info[playerid][pSex] = 1;
				Send(playerid, COLOR_LIGHTBLUE, "* Ок, вы парень");
			}
		}
		
// СИСТЕМА БАНКА.
		case D_BANK : {
			if(response) {
				switch(listitem) {
					case 0 : {
						format(string, sizeof(string), "Баланс счета %s: $%i", GetName(playerid), Pl::Info[playerid][pBank]);
						SPD(playerid, D_BANK+33, DIALOG_STYLE_MSGBOX, "BALANCE", string, "OK", "CANCEL");
					}
					
					case 1 : {
						SPD(playerid, D_BANK+1, DIALOG_STYLE_INPUT, "WITHDRAW", "Введите сумму: ", "OK","CANCEL");
					}
					
					case 2 : {
						SPD(playerid, D_BANK+2, DIALOG_STYLE_INPUT, "DEPOSIT", "Введите сумму: ", "OK","CANCEL");
					}
					
					case 3 : {
						SPD(playerid, D_BANK+3, DIALOG_STYLE_INPUT, "TRANSFER", "Введите сумму перевода: ", "OK","CANCEL");
					}
				}
			}
		}
		
		case D_BANK+1 : {
			if(response) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_BANK+1, DIALOG_STYLE_INPUT, "WITHDRAW", "Неверный ввод! Повторите попытку.\nВведите сумму: ", "OK","CANCEL");
				} else {
					if(inputtext[0] > 0 && Pl::Info[playerid][pBank] >= inputtext[0]) {
						Rac::GivePlayerMoney(playerid, inputtext[0]);
						GiveBankMoney(playerid, -inputtext[0]);
						format(string, sizeof(string), "* Вы сняли $%i со своего счета. Остаток: $%i", inputtext[0], Pl::Info[playerid][pBank]);
						SPD(playerid, D_BANK+33, DIALOG_STYLE_MSGBOX, "WITHDRAW", string, "OK", "CANCEL");
					} else {
						SPD(playerid, D_BANK+1, DIALOG_STYLE_INPUT, "WITHDRAW", "Недостаточно средств.\nВведите сумму: ", "OK","CANCEL");
					}
				}
			} else {
				SPD(playerid, D_BANK, DIALOG_STYLE_LIST, "[RP]GrandWorld: BANK","Баланс\nОбналичить\nПополнить счет\nПеревести","SELECT","CENCEL");
			}
		}
		
		case D_BANK+2 : {
			if(response) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_BANK+2, DIALOG_STYLE_INPUT, "DEPOSIT", "Неверный ввод! Повторите попытку.\nВведите сумму: ", "OK","CANCEL");
				} else {
					if(inputtext[0] > 0 && Rac::GetPlayerMoney(playerid) >= inputtext[0]) {
						Rac::GivePlayerMoney(playerid, -inputtext[0]);
						GiveBankMoney(playerid, inputtext[0]);
						format(string, sizeof(string), "* Вы пополнили счет на $%i. Текущий баланс: $%i", inputtext[0], Pl::Info[playerid][pBank]);
						SPD(playerid, D_BANK+33, DIALOG_STYLE_MSGBOX, "DEPOSIT", string, "OK", "CANCEL");
					} else {
						SPD(playerid, D_BANK+2, DIALOG_STYLE_INPUT, "DEPOSIT", "Недостаточно средств.\nВведите сумму: ", "OK","CANCEL");
					}
				}
			} else {
				SPD(playerid, D_BANK, DIALOG_STYLE_LIST, "[RP]GrandWorld: BANK","Баланс\nОбналичить\nПополнить счет\nПеревести","SELECT","CENCEL");
			}
		}
		
		case D_BANK+3 : {
			if(response) {
				if(sscanf(inputtext, "i", inputtext[0])) {
					SPD(playerid, D_BANK+3, DIALOG_STYLE_INPUT, "TRANSFER", "Неверный ввод! Повторите попытку\nВведите сумму перевода: ", "OK","CANCEL");
				} else {
					if(inputtext[0] > 0 && Pl::Info[playerid][pBank] >= inputtext[0]) {
						SetPVarInt(playerid, "TransferAmount", inputtext[0]);
						format(string, sizeof(string), "* Сумма: $%i.\nВведите ID получателя платежа:", inputtext[0]);
						SPD(playerid, D_BANK+4, DIALOG_STYLE_INPUT, "TRANSFER", string, "OK", "CANCEL");
					} else {
						SPD(playerid, D_BANK+3, DIALOG_STYLE_INPUT, "TRANSFER", "Недостаточно средств.\nВведите сумму перевода: ", "OK","CANCEL");
					}
				}
			} else {
				SPD(playerid, D_BANK, DIALOG_STYLE_LIST, "[RP]GrandWorld: BANK","Баланс\nОбналичить\nПополнить счет\nПеревести","SELECT","CENCEL");
			}
		}
		
		case D_BANK+4 : {
			if(response) {
				new player;
				if(sscanf(inputtext, "u", player)) {
					format(string, sizeof(string), "* Сумма: $%i.\nВведите ID получателя платежа:", GetPVarInt(playerid, "TransferAmount"));
					SPD(playerid, D_BANK+4, DIALOG_STYLE_INPUT, "TRANSFER", string, "OK", "CANCEL");
				} else {
					if(playerid == player) {
						SPD(playerid, D_BANK+33, DIALOG_STYLE_MSGBOX, "TRANSFER", "Вы ввели свой ID!", "OK", "CANCEL");
					} else if(Pl::isLogged(player)) {
						SetPVarInt(playerid, "TransferPlayer", player);
						SetTimerEx("OnPlayerBankTransfer", 1000*10, false, "i", playerid);
						format(string, sizeof(string), "Вы собираетесь совершить перевод на сумму $%i игроку [%i]%s.\n\
						У Вас есть 10 секунд для подтверждения платежа!", GetPVarInt(playerid, "TransferAmount"), player, GetName(player));
						SPD(playerid, D_BANK+5, DIALOG_STYLE_MSGBOX, "TRANSFER", string, "OK", "CANCEL");
					} else {
						format(string, sizeof(string), "Игрок не залогинен!\n\n* Сумма: $%i.\nВведите ID получателя платежа:", GetPVarInt(playerid, "TransferAmount"));
						SPD(playerid, D_BANK+4, DIALOG_STYLE_INPUT, "TRANSFER", string, "OK", "CANCEL");
					}
				}
			} else {
				SPD(playerid, D_BANK+3, DIALOG_STYLE_INPUT, "TRANSFER", "Введите сумму перевода: ", "OK", "CANCEL");
			}
		}
		
		case D_BANK+5 : {
			if(response) {
				new player = GetPVarInt(playerid, "TransferPlayer");
				if(player == INVALID_PLAYER_ID) {
					SPD(playerid, D_BANK+33, DIALOG_STYLE_MSGBOX, "TRANSFER", "Время транзакции истекло!\nПовторите попытку.", "OK", "CANCEL");
				} else {
					new amount = GetPVarInt(playerid, "TransferAmount");
					GiveBankMoney(playerid, -amount);
					GiveBankMoney(player, amount);
					new bidx = (Pl::Info[playerid][pLocal]/99);
					if(amount >= 10000 && IsValidBiz(bidx)) BizzInfo[bidx][bTill] += (amount/99);
					format(string, sizeof(string), "* Перевод успешно совершен!\n\
					Сумма: $%i\nПолучатель: [%i]%s\nОтправитель: [%i]%s", amount, player, GetName(player), playerid, GetName(playerid));
					SPD(playerid, D_BANK+33, DIALOG_STYLE_MSGBOX, "DEPOSIT", string, "OK", "CANCEL");
					format(string, sizeof(string), "* %s[%i] перевел на ваш счет $%i", GetName(playerid), playerid, amount);
					Send(player, COLOR_GREY, string);
					format(string, sizeof(string), "[BANK] * %s[%i] transfer $%i to %s[%i] | %.3f kk", GetName(playerid), playerid, amount, GetName(player), player, float(amount/1000000));
					SendToAdmin(COLOR_YELLOW, string, 1, 3);
				}
				SetPVarInt(playerid, "TransferPlayer", INVALID_PLAYER_ID);
				SetPVarInt(playerid, "TransferAmount", 0);
			} else {
				format(string, sizeof(string), "* Сумма: $%i.\nВведите ID получателя платежа:", GetPVarInt(playerid, "TransferAmount"));
				SPD(playerid, D_BANK+4, DIALOG_STYLE_INPUT, "TRANSFER", string, "OK", "CANCEL");
			}
		}
		
		case D_BANK+33 : {
			SPD(playerid, D_BANK, DIALOG_STYLE_LIST, "[RP]GrandWorld: BANK","Баланс\nОбналичить\nПополнить счет\nПеревести","SELECT","CENCEL");
		}
// СИСТЕМА БАНКА. END

// СИСТЕМА БАНКАМАТОВ
		case D_ATM : {
			if(response) {
				switch(listitem) {
					case 0: {
						format(dialog, sizeof dialog, "Напишите сумму, которую хотите снять со счета.\nМаксимум $100000 за одну опирацию.\n\
						С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
						SPD(playerid, D_ATM+1, DIALOG_STYLE_INPUT,"[RP]GRANDWORLD ATM. WITHDRAW", dialog, "OK", "CANCEL");
					}
					
					case 1: {
						format(dialog, sizeof dialog, "Напишите сумму, которую хотите положить на счет.\nМаксимум $100000 за одну опирацию.\n\
						С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
						SPD(playerid, D_ATM+2, DIALOG_STYLE_INPUT, "[RP]GRANDWORLD ATM. DEPOSIT", dialog, "OK", "CANCEL");
					}
					
					case 2: {
						format(dialog, sizeof dialog, "Баланс счета %s: $%i", GetName(playerid), Pl::Info[playerid][pBank]);
						SPD(playerid, D_ATM+33, DIALOG_STYLE_MSGBOX, "[RP]GRANDWORLD ATM. BALANCE", dialog, "OK", "CANCEL");
					}
				}
			}
		}
		
		case D_ATM+1 : {
			if(response) {
				new cash = 0;
				if(sscanf(inputtext, "i", cash)) {
					format(dialog, sizeof dialog, "* Неверный ввод! Повторите попытку!\n\
					\nНапишите сумму, которую хотите снять со счета.\nМаксимум $100000 за одну опирацию.\n\
					С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
					SPD(playerid, D_ATM+1, DIALOG_STYLE_INPUT,"[RP]GRANDWORLD ATM. WITHDRAW", dialog, "OK", "CANCEL");
				} else if(cash > 100000) {
					format(dialog, sizeof dialog, "Напишите сумму, которую хотите положить на счет.\nМаксимум $100000 за одну опирацию.\n\
					С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
					SPD(playerid, D_ATM+2, DIALOG_STYLE_INPUT, "[RP]GRANDWORLD ATM. DEPOSIT", dialog, "OK", "CANCEL");
				} else if(cash < 100) {
					format(dialog, sizeof dialog, "* Минимальная сумма за одну операцию состовляет 100$\n\
					\nНапишите сумму, которую хотите снять со счета.\nМаксимум $100000 за одну опирацию.\n\
					С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
					SPD(playerid, D_ATM+1, DIALOG_STYLE_INPUT,"[RP]GRANDWORLD ATM. WITHDRAW", dialog, "OK", "CANCEL");
				} else if(inputtext[0] > Pl::Info[playerid][pBank]) {
					Send(playerid, COLOR_GREY, "Нельзя снять больше денег, чем на счету!");
					format(dialog, sizeof dialog, "* Недостаточно средств на счету!\n\
					\nНапишите сумму, которую хотите снять со счета.\nМаксимум $100000 за одну опирацию.\n\
					С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
					SPD(playerid, D_ATM+1, DIALOG_STYLE_INPUT,"[RP]GRANDWORLD ATM. WITHDRAW", dialog, "OK", "CANCEL");
				} else {
					new proc = (cash*3)/100;
					new babki = cash - proc;
					BizzInfo[0][bTill] += proc;
					GiveBankMoney(playerid, -babki);
					Rac::GivePlayerMoney(playerid, babki);
					format(dialog, sizeof dialog, "* Вы сняли $%i со своего счета. Остаток: $%i", babki, Pl::Info[playerid][pBank]);
					SPD(playerid, D_ATM+33, DIALOG_STYLE_MSGBOX, "[RP]GRANDWORLD ATM. WITHDRAW", dialog, "OK", "CANCLE");
				}
			} else {
				SPD(playerid, D_ATM, DIALOG_STYLE_LIST, "[RP]GRANDWORLD ATM.", "Обналичить\nПополнить\nБаланс", "SELECT", "CANCLE");
			}
		}
		
		case D_ATM+2 : {
			if(response) {
				new cash = 0;
				if(sscanf(inputtext, "i", cash)) {
					format(dialog, sizeof dialog, "* Неверный ввод! Повторите попытку!\n\
					\nНапишите сумму, которую хотите положить на счет.\nМаксимум $100000 за одну опирацию.\n\
					С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
					SPD(playerid, D_ATM+2, DIALOG_STYLE_INPUT, "[RP]GRANDWORLD ATM. DEPOSIT", dialog, "OK", "CANCEL");
				} else if(cash > 100000) {
					format(dialog, sizeof dialog, "* Неверный ввод! Повторите попытку!\n\
					\nНапишите сумму, которую хотите положить на счет.\nМаксимум $100000 за одну опирацию.\n\
					С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
					SPD(playerid, D_ATM+2, DIALOG_STYLE_INPUT, "[RP]GRANDWORLD ATM. DEPOSIT", dialog, "OK", "CANCEL");
				} else if(cash < 100) {
					format(dialog, sizeof dialog, "* Минимальная сумма за одну операцию состовляет 100$\n\
					\nНапишите сумму, которую хотите положить на счет.\nМаксимум $100000 за одну опирацию.\n\
					С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
					SPD(playerid, D_ATM+2, DIALOG_STYLE_INPUT, "[RP]GRANDWORLD ATM. DEPOSIT", dialog, "OK", "CANCEL");
				} else {
					cash -= ((cash * 3) / 100);
					if(cash > Rac::GetPlayerMoney(playerid)) {
						format(dialog, sizeof dialog, "* У Вас недостаточно средств!\n\
						\nНапишите сумму, которую хотите положить на счет.\nМаксимум $100000 за одну опирацию.\n\
						С каждой перечисленной суммы взымается налог в 3 процента!", Pl::Info[playerid][pBank]);
						SPD(playerid, D_ATM+2, DIALOG_STYLE_INPUT, "[RP]GRANDWORLD ATM. DEPOSIT", dialog, "OK", "CANCEL");
					} else {
						GiveBankMoney(playerid, cash);
						Rac::GivePlayerMoney(playerid, -cash);
						format(dialog, sizeof dialog, "* Вы пополнили счет на $%i. Текущий баланс: $%i", cash, Pl::Info[playerid][pBank]);
						SPD(playerid, D_ATM+33, DIALOG_STYLE_MSGBOX, "[RP]GRANDWORLD ATM. DEPOSIT", dialog, "OK", "CANCEL");
					}
				}
			} else {
				SPD(playerid, D_ATM, DIALOG_STYLE_LIST, "[RP]GRANDWORLD ATM.", "Обналичить\nПополнить\nБаланс", "SELECT", "CANCLE");
			}
		}
		
		case D_ATM+33 : {
			SPD(playerid, D_ATM, DIALOG_STYLE_LIST, "[RP]GRANDWORLD ATM.", "Обналичить\nПополнить\nБаланс", "SELECT", "CANCLE");
		}
// СИСТЕМА БАНКАМАТОВ. END

// СИСТЕМА ФРАКЦИОННОГО БАНКА
		case D_FBANK: {
			if(response) {
				SetPVarInt(playerid, "SelectedItem", listitem);
				if(IsPlayerLeader(playerid) == FracID[listitem] || EditMode[playerid]) {
					format(string, sizeof(string), "TRANSFER: %s", FracInfo[ FracID[listitem] ][ fName ]);
					SPD(playerid, D_FBANK+1, DIALOG_STYLE_LIST, string,"- Положить на счет\n- Снять со счета\n- Выдать зарплату\n- Посмотреть баланс", "ENTER", "CANLE");
				} else {
					format(string, sizeof(string), "- Перевод\n- Баланс\n", FracInfo[ FracID[listitem] ][ fName ]);
					if(Bl::Info[playerid][Bl::onFrac][FracID[listitem]] && FracInfo[FracID[listitem]][fBConf][bPRICE])
						strcat( string, "- Выход их ЧС" );
						
					SPD(playerid, D_FBANK+6, 2, FracInfo[ FracID[listitem] ][ fName ], string, "Enter", "Cancle");
				}
			}
			return 1;
		}
		
		case D_FBANK+1: {
			if(response) {
				new idx = GetPVarInt(playerid, "SelectedItem");
				switch(listitem) {
					case 0: {
						format(string, sizeof(string), "Получатель:\t%s\nВведите сумму перевода!", FracInfo[ FracID[idx] ][ fName ]);
						SPD(playerid, D_FBANK+2, 1, FracInfo[ FracID[idx] ][ fName ], string, "Enter", "Cancle");
					}
					
					case 1: {
						if(IsPlayerLeader(playerid) == FracID[idx]) {
							SPD(playerid, D_NONE, DIALOG_STYLE_MSGBOX, FracInfo[ FracID[idx] ][ fName ], "* Вы не можете снять деньги с этого счета!", "ENTER", "CANCLE");
						} else if(EditMode[playerid]) {
							format(string, sizeof(string), "Введите сумму которую хотите снять со счета %s", FracInfo[ FracID[idx] ][ fName ]);
							SPD(playerid, D_FBANK+3, DIALOG_STYLE_INPUT, FracInfo[ FracID[idx] ][ fName ], string, "ENTER", "CANCLE");
						} else {
							format(string, sizeof(string), "* Вы не лидер %s", FracInfo[ FracID[idx] ][ fName ]);
							Send(playerid, COLOR_GREY, string);
						}
					}
					
					case 2: {
						if(IsPlayerLeader(playerid) == FracID[idx] || EditMode[playerid]) {
							format(string, sizeof(string), "Введите сумму которую хотите выделить на зарплату.\nКаждый член %s получит свой процент от суммы.", FracInfo[ FracID[idx] ][ fName ]);
							SPD(playerid, D_FBANK+4, DIALOG_STYLE_INPUT, FracInfo[ FracID[idx] ][ fName ], string, "enter", "отмена");
						} else {
							format(string, sizeof(string), "* Вы не лидер %s", FracInfo[ FracID[idx] ][ fName ]);
							Send(playerid, COLOR_GREY, string);
						}
					}
					
					case 3: {
						if(GetFracID(playerid) == FracID[idx] || EditMode[playerid]) {
							format(string, sizeof(string), "Баланс:\t$%d\nФракция:\t%s", GetFracMoney(FracID[idx]), FracInfo[ FracID[idx] ][ fName ]);
							SPD(playerid, D_FBANK+5, DIALOG_STYLE_MSGBOX, "Баланс счета", string, "OK", "");
						} else {
							format(string, sizeof(string), "* Вы не состоите в %s", FracInfo[ FracID[idx] ][ fName ]);
							Send(playerid, COLOR_GREY, string);
						}
					}
				}
			} else {
				clear(dialog);
				for(new s; s < sizeof(FracID); s++) scf(dialog, string, "%s\n", FracInfo[ FracID[s] ][ fName ]);
				SPD(playerid, D_FBANK, DIALOG_STYLE_LIST,"[RP]GrandWorld: TRANSFER", dialog, "ENTER", "CANCLE");
			}
		}

		case D_FBANK+2: {
			if(response) {
				new idx = GetPVarInt(playerid, "SelectedItem");
				if(sscanf(inputtext, "i", inputtext[0])) {
					Send(playerid, COLOR_GREY, "* Вы оставили поле ввода пустым!");
					format(string, sizeof(string), "Получатель:\t%s\nВведите сумму перевода!", FracInfo[ FracID[idx] ][ fName ]);
					SPD(playerid, D_FBANK+2, 1, FracInfo[ FracID[idx] ][ fName ], string, "Enter", "Cancle");
				} else if(inputtext[0] < 1) {
					Send(playerid,COLOR_GREY,"* Вы не можите положит $0!");
					format(string, sizeof(string), "Получатель:\t%s\nВведите сумму перевода!", FracInfo[ FracID[idx] ][ fName ]);
					SPD(playerid, D_FBANK+2, 1, FracInfo[ FracID[idx] ][ fName ], string, "Enter", "Cancle");
				} else if(inputtext[0] > Rac::GetPlayerMoney(playerid)) {
					Send(playerid,COLOR_GREY,"* У Вас нет столько денег!");
					format(string, sizeof(string), "Получатель:\t%s\nВведите сумму перевода!", FracInfo[ FracID[idx] ][ fName ]);
					SPD(playerid, D_FBANK+2, 1, FracInfo[ FracID[idx] ][ fName ], string, "Enter", "Cancle");
				} else {
					GiveFracMoney(FracID[idx], inputtext[0]);
					Rac::GivePlayerMoney(playerid, -inputtext[0]);
					GetPlayerName(playerid, plname, 24);
					
					if(IsAMafiaF(FracID[idx]) || IsAGangF(FracID[idx])) {
						format(string, sizeof(string), "[TRANSFER]: Гуляй братва %s положил на счёт $%i", plname, inputtext[0]);
					} else {
						format(string, sizeof(string), "[TRANSFER]: Только что %s положил на счёт $%i", plname, inputtext[0]);
					}
					sendToFamily(FracID[idx], COLOR_AZTECAS, string);
					format(string, sizeof(string), " Вы положили $%d на счёт %s!", inputtext[0], FracInfo[ FracID[idx] ][ fName ]);
					Send(playerid, COLOR_LIGHTBLUE, string);
				}
			} else {
				new idx = GetPVarInt(playerid, "SelectedItem");
				if(IsPlayerLeader(playerid) == FracID[idx]) {
					format(string, sizeof(string), "TRANSFER: %s", FracInfo[ FracID[idx] ][ fName ]);
					SPD(playerid, D_FBANK+1, DIALOG_STYLE_LIST, string,"- Положить на счет\n- Снять со счета\n- Выдать зарплату\n- Посмотреть баланс", "ENTER", "CANCLE");
				} else {
					format(string, sizeof(string), "- Перевод\n- Баланс\n", FracInfo[ FracID[idx] ][ fName ]);
					if(Bl::Info[playerid][Bl::onFrac][FracID[idx]] && FracInfo[FracID[idx]][fBConf][bPRICE]) {
						strcat(string, "- Выход их ЧС" );
					}
					SPD(playerid, D_FBANK+6, 2, FracInfo[ FracID[idx] ][ fName ], string, "Enter", "Cancle");
				}
			}
		}

		case D_FBANK+3: {
			if(response) {
				new idx = GetPVarInt(playerid, "SelectedItem");
				if(IsPlayerLeader(playerid) == FracID[idx] || EditMode[playerid]) {
					if(sscanf(inputtext, "i", inputtext[0])) {
						Send(playerid, COLOR_GREY, "* Вы не ввели сумму которую хотите снять!");
						format(string, sizeof(string), "Введите сумму которую хотите снять со счета %s", FracInfo[ FracID[idx] ][ fName ]);
						SPD(playerid, D_FBANK+3, 1, FracInfo[ FracID[idx] ][ fName ], string, "enter", "отмена");
					} else if(inputtext[0] < 1 || inputtext[0] > GetFracMoney(FracID[idx])) {
						Send(playerid, COLOR_GREY, "На счету нет столько денег!");
						format(string, sizeof(string), "Введите сумму которую хотите снять со счета %s", FracInfo[FracID[idx]][fName]);
						SPD(playerid, D_FBANK+3, 1, FracInfo[ FracID[idx] ][ fName ], string, "enter", "отмена");
					} else {
						Rac::GivePlayerMoney(playerid, inputtext[0]);
						GiveFracMoney(FracID[idx], -inputtext[0]);
						format(string, sizeof(string), "[BANK] * %s[%s] снял со счета организации $%i (%.3f kk)",
						GetName(playerid), FracInfo[FracID[idx]][fName], inputtext[0], float(inputtext[0]/1000000));
						SendToAdmin(COLOR_YELLOW, string, 1, 3);
						format(string, sizeof(string), "* Вы сняли $%d со счета своей фракции.", inputtext[0]);
						Send(playerid, COLOR_LIGHTBLUE, string);
					}
				} else {
					format(string, sizeof(string), "* Вы не лидер %s", FracInfo[FracID[idx]][fName]);
					Send(playerid, COLOR_GREY, string);
				}
			} else {
				format(string, sizeof(string), "TRANSFER: %s", FracInfo[ FracID[GetPVarInt(playerid, "SelectedItem")] ][ fName ]);
				SPD(playerid, D_FBANK+1, DIALOG_STYLE_LIST, string,"- Положить на счет\n- Снять со счета\n- Выдать зарплату\n- Посмотреть баланс", "enter", "отмена");
			}
		}

		case D_FBANK+4: {
			if(response) {
				new idx = GetPVarInt(playerid, "SelectedItem");
				if(IsPlayerLeader(playerid) == FracID[idx] || EditMode[playerid]) {
					if(sscanf(inputtext, "i", inputtext[0])) {
						Send(playerid, COLOR_GREY, "* Вы введите кол-во дениег которое будет выдано членам фракции!");
						format(string, sizeof(string), "Введите сумму которую хотите выделить на зарплату.\nКаждый член %s получит свой процент от суммы.", FracInfo[ FracID[idx] ][ fName ]);
						SPD(playerid, D_FBANK+4, DIALOG_STYLE_INPUT, FracInfo[ FracID[idx] ][ fName ], string, "enter", "отмена");
					} else if(inputtext[0] < 1 || inputtext[0] > GetFracMoney(FracID[idx])) {
						Send(playerid, COLOR_GRAD2, "* На счету нет столько денег! ");
						format(string, sizeof(string), "Введите сумму зарплаты.\nЭта сумма будет выдана каждом кто состоит в %s", FracInfo[ FracID[idx] ][ fName ]);
						SPD(playerid, D_FBANK+4, DIALOG_STYLE_INPUT, FracInfo[ FracID[idx] ][ fName ], string, "enter", "отмена");
					} else {
						if(Iter_Count(TeamPlayers[FracID[idx]]) < 5) return SPD(playerid, D_NONE, 0, "TRANSFER: Выдать зарплату", "Онлайн организации должен быть не менее 5 человек!", "OK", "");
						new price = inputtext[0] / Iter_Count(TeamPlayers[FracID[idx]]);
						GiveFracMoney(FracID[idx], -inputtext[0]);
						foreach(new i: TeamPlayers[FracID[idx]]) {
							Rac::GivePlayerMoney(i, price);
							format(string, sizeof(string), "* Вы получили зарплату от Лидера, в размере $%i", price);
							Send(i, COLOR_LIGHTBLUE, string);
						}
						format(string, sizeof(string), " * Вы выдали зарплату членам своей фракции, в размере $%i", inputtext[0]);
						Send(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			} else {
				format(string, sizeof(string), "[TRANSFER]: %s", FracInfo[ FracID[GetPVarInt(playerid, "SelectedItem")] ][ fName ]);
				SPD(playerid, D_FBANK+1, DIALOG_STYLE_LIST, string,"- Положить на счет\n- Снять со счета\n- Выдать зарплату\n- Посмотреть баланс", "enter", "отмена");
			}
		}
		
		case D_FBANK+5: {
			if(response) {
				new idx = GetPVarInt(playerid, "SelectedItem");
				if(IsPlayerLeader(playerid) == FracID[idx] || EditMode[playerid]) {
					format(string, sizeof(string), "TRANSFER: %s", FracInfo[ FracID[idx] ][ fName ]);
					SPD(playerid, D_FBANK+1, DIALOG_STYLE_LIST, string,"- Положить на счет\n- Снять со счета\n- Выдать зарплату\n- Посмотреть баланс", "ENTER", "CANCLE");
				} else {
					format(string, sizeof(string), "- Перевод\n- Баланс\n", FracInfo[FracID[idx]][fName]);
					if(Bl::Info[playerid][Bl::onFrac][FracID[idx]] && FracInfo[FracID[idx]][fBConf][bPRICE]) {
						strcat(string, "- Выход их ЧС");
					}	
					SPD(playerid, D_FBANK+6, 2, FracInfo[FracID[idx]][fName], string, "SELECT", "CANCEL");
				}
			}
		}
		
		case D_FBANK+6 : {
			new idx = GetPVarInt(playerid, "SelectedItem");
			if(response) {
				switch(listitem) {
					case 0 : {
						format(string, sizeof(string), "Получатель:\t%s\nВведите сумму перевода!", FracInfo[ FracID[idx] ][ fName ]);
						SPD(playerid, D_FBANK+2, 1, FracInfo[ FracID[idx] ][ fName ], string, "Enter", "Cancle");
					}
					
					case 1 : {
						if(GetFracID(playerid) == FracID[idx]) {
							format(string, sizeof(string), "Баланс:\t$%d\nФракция:\t%s", GetFracMoney(FracID[idx]), FracInfo[ FracID[idx] ][ fName ]);
							SPD(playerid, D_FBANK+5, 0, "Баланс счета", string, "OK", "");
						} else {
							format(string, sizeof(string), "* Вы не состоите в %s", FracInfo[ FracID[idx] ][ fName ]);
							Send(playerid, COLOR_GREY, string);
						}
					}
					
					case 2 : {
						format(string, sizeof(string), "Цена выхода:\t$1000000\n\nОплатить выход?\n", FracInfo[FracID[idx]][fBConf][bPRICE]);
						SPD(playerid, D_FBANK+7, 0, FracInfo[ FracID[idx] ][ fName ], string, "Заплатить", "Нет");
					}
				}
			}
		}
		
		case D_FBANK+7: {
			new idx = GetPVarInt(playerid, "SelectedItem");
			if(response) {
				new exitprice = FracInfo[FracID[idx]][fBConf][bPRICE];
				if(Rac::GetPlayerMoney(playerid) >= exitprice) {
					GetPlayerName(playerid, plname, 24);
					GiveFracMoney(FracID[idx], exitprice);
					Rac::GivePlayerMoney(playerid, -exitprice);
					if( Bl::Remove( playerid, FracID[idx] ) )
					{
						format(string, sizeof(string), "[BLACK LIST] Терпила %s, заплатил %i$ за выход из черного списка %s", plname, exitprice, FracInfo[ FracID[idx] ][ fName ]);
						sendToFamily(FracID[idx], COLOR_AZTECAS, string);
						format(string, sizeof(string), "[BLACK LIST] Вы вышли из черного списка(%s) за %i$", FracInfo[ FracID[idx] ][ fName ], exitprice);
						Send(playerid, COLOR_AZTECAS, string);
					}
				}
			} else {
				format(string, sizeof(string), "- Перевод\n- Баланс\n", FracInfo[FracID[idx]][fName]);
				if( Bl::Info[ playerid ][ Bl::onFrac ][ FracID[idx] ] && FracInfo[FracID[idx]][fBConf][bPRICE]) {
					strcat( string, "- Выход их ЧС" );
				}	
				SPD(playerid, D_FBANK+6, 2, FracInfo[FracID[idx]][fName], string, "SELECT", "CANCEL");
			}
		}
// СИСТЕМА ФРАКЦИОННОГО БАНКА. END

// ПОМОЩЬ ПО ИГРЕ
		case D_REF : {
			if(response) {
				switch(listitem) {
					case 0 : ShowDialog(playerid, D_REF+1, DIALOG_STYLE_MSGBOX, "{33CCFF}Справка: Уровень игрока.", "dialog/ref/level.txt", "ENTER", "");
					case 1 : ShowDialog(playerid, D_REF+1, DIALOG_STYLE_MSGBOX, "{33CCFF}Справка: Чаты.", "dialog/ref/chat.txt", "ENTER", "");
					case 2 : ShowDialog(playerid, D_REF+1, DIALOG_STYLE_MSGBOX, "{33CCFF}Справка: Лицензии.", "dialog/ref/licenzes.txt", "ENTER", "");
					case 3 : ShowDialog(playerid, D_REF+1, DIALOG_STYLE_MSGBOX, "{33CCFF}Справка: Работы.", "dialog/ref/jobs.txt", "ENTER", "");
					case 4 : ShowDialog(playerid, D_REF+1, DIALOG_STYLE_MSGBOX, "{33CCFF}Справка: Транспорт.", "dialog/ref/vehicle.txt", "ENTER", "");
					case 5 : ShowDialog(playerid, D_REF+1, DIALOG_STYLE_MSGBOX, "{33CCFF}Справка: Дом.", "dialog/ref/home.txt", "ENTER", "");
					case 6 : ShowDialog(playerid, D_REF+1, DIALOG_STYLE_MSGBOX, "{33CCFF}Справка: Бизнес.", "dialog/ref/biznes.txt", "ENTER", "");
					case 7 : ShowDialog(playerid, D_REF+1, DIALOG_STYLE_MSGBOX, "{33CCFF}Справка: Банк.", "dialog/ref/bank.txt", "ENTER", "");
				}
			}
		}
		
		case D_REF+1 : {
			ShowDialog(playerid, D_REF, DIALOG_STYLE_LIST, "{33CCFF}Справка.", "dialog/ref/main.txt", "SELECT", "CANCEL");
		}
// ПОМОЩЬ ПО ИГРЕ. END

		case D_HELP : {
			if(response) {
				clear(dialog);
				new tittle[50], category[50], fracid = GetFracID(playerid);
				switch(listitem) {
					case 0 : {
						strmid(category, "Клиентские команды", 0, 50);
						LoadFile("dialog/help/client_cmd.txt", dialog);	
					}
					case 1 : {
						strmid(category, "Аккаунт", 0, 50);
						LoadFile("dialog/help/account.txt", dialog);
					}
					case 2 : {
						strmid(category, "Общее", 0, 50);
						LoadFile("dialog/help/common.txt", dialog);
					}
					
					case 3 : {
						strmid(category, "Фракция", 0, 50);
						if(fracid) {
							if(IsAGang(playerid) || IsAMafia(playerid)) strcat(dialog, "{FFFF00}/bl - {FFFFFF}черный список\n");
							if(IsACop(playerid)) {
								strcat(dialog, "{FFFF00}/arrest - {FFFFFF}арестовать игрока\n");
								strcat(dialog, "{FFFF00}/color - {FFFFFF}одеть кепку\n");
								strcat(dialog, "{FFFF00}/ticket - {FFFFFF}выисать штраф игроку\n");
								strcat(dialog, "{FFFF00}/su - {FFFFFF}дать розыск игроку\n");
								strcat(dialog, "{FFFF00}/clear - {FFFFFF}очистить розыск игроку\n");
								strcat(dialog, "{FFFF00}/wanted - {FFFFFF}список розыскиваемых\n");
								strcat(dialog, "{FFFF00}/cuff - {FFFFFF}надеть игроку наручники\n");
								strcat(dialog, "{FFFF00}/uncuff - {FFFFFF}снять игроку наручники\n");
								strcat(dialog, "{FFFF00}/tazer - {FFFFFF}ударить игрока электрошокером\n");
								strcat(dialog, "{FFFF00}/frisk - {FFFFFF}обыскать игрока\n");
								strcat(dialog, "{FFFF00}/mdc - {FFFFFF}посмотреть причину, по которой игроку был дан розыск\n");
								strcat(dialog, "{FFFF00}/take - {FFFFFF}отобрать что-то у игрока\n");
							}
							
							if(IsACop(playerid) || GetFracID(playerid) == 7) {
								strcat(dialog, "{FFFF00}/sfopen (1-2) - {FFFFFF}открыть на базе ФБР\n");
								strcat(dialog, "{FFFF00}/armopen (1-2) - {FFFFFF}открыть ворота на военной базе\n");
							}
							
							switch(fracid) {
								case 1 : strcat(dialog, "{FFFF00}/duty - {FFFFFF}заступить на дежурство\n");
								case 4 : {
									strcat(dialog, "{FFFF00}/duty - {FFFFFF}заступить на дежурство\n");
									strcat(dialog, "{FFFF00}/heal - {FFFFFF}вылечить игрока\n");
									strcat(dialog, "{FFFF00}/accept medic - {FFFFFF}принять вызов\n");
									strcat(dialog, "{FFFF00}/mopen - {FFFFFF}открыть ворота\n");
								}
								case 5 : strcat(dialog, "{FFFF00}/lcnopen - {FFFFFF}открыть ворота\n");
								case 6 : strcat(dialog, "{FFFF00}/yopen - {FFFFFF}открыть ворота\n");
								case 7 : strcat(dialog, "{FFFF00}/meropen - {FFFFFF}открыть ворота\n");
								case 8 : {
									strcat(dialog, "{FFFF00}/portable - {FFFFFF}открыть ноутбук\n");
									strcat(dialog, "{FFFF00}/hopen - {FFFFFF}открыть ворота\n");
								}
								case 9 : {
									strcat(dialog, "{FFFF00}/news - {FFFFFF}послать новости в эфир\n");
									strcat(dialog, "{FFFF00}/live - {FFFFFF}начать интервью\n");
									strcat(dialog, "{FFFF00}/cnnopen - {FFFFFF}открыть шлагбаум\n");
								}
								case 10 : {
									strcat(dialog, "{FFFF00}/fare - {FFFFFF}установить таксу\n");
									strcat(dialog, "{FFFF00}/topen - {FFFFFF}открыть ворота\n");
								}
								case 11 : {
									strcat(dialog, "{FFFF00}/startlesson - {FFFFFF}начать экзамен\n");
									strcat(dialog, "{FFFF00}/stoplesson - {FFFFFF}завершить экзамен\n");
									strcat(dialog, "{FFFF00}/givelicense - {FFFFFF}выдать лицензию игроку\n");
									strcat(dialog, "{FFFF00}/take - {FFFFFF}отобрать что-то у игрока\n");
								}
								case 12 : strcat(dialog, "{FFFF00}/fcopen - {FFFFFF}открыть ворота\n");
								case 13 : strcat(dialog, "{FFFF00}/rmopen (1-2) - {FFFFFF}открыть ворота\n");
								case 14 : strcat(dialog, "{FFFF00}/gopen - {FFFFFF}открыть ворота\n");
								case 15 : strcat(dialog, "{FFFF00}/copen - {FFFFFF}открыть ворота\n");
								case 16 : strcat(dialog, "{FFFF00}/bopen - {FFFFFF}открыть ворота\n");
								case 17 : {
									strcat(dialog, "{FFFF00}/buymats - {FFFFFF}купить материалы в доках ЛС\n");
									strcat(dialog, "{FFFF00}/sellmats - {FFFFFF}продать материалы на базе\n");
									strcat(dialog, "{FFFF00}/loadmats - {FFFFFF}посмотреть, на сколько загружен склад\n");
									strcat(dialog, "{FFFF00}/ropen - {FFFFFF}открыть ворота\n");
								}
								case 18 : strcat(dialog, "{FFFF00}/vopen - {FFFFFF}открыть ворота\n");
								case 19 : strcat(dialog, "{FFFF00}/sdopen - {FFFFFF}открыть ворота\n");
								case 20 : {
									strcat(dialog, "{FFFF00}/loadmac - {FFFFFF}провеить, сколько мака в амбаре\n");
									strcat(dialog, "{FFFF00}/nopen - {FFFFFF}открыть ворота\n");
								}
							}
							if(IsAMafia(playerid))
							{
								strcat(dialog, "{FFFF00}/selldrugs - {FFFFFF}продать наркоту\n");
								strcat(dialog, "{FFFF00}/sellgun - {FFFFFF}продать оружие\n");
							}
							if(IsAGang(playerid)) strcat(dialog, "{FFFF00}/zahvat - {FFFFFF}атаковать бизнес\n");
							strcat(dialog, "{FFFF00}/color - {FFFFFF}активировать цвет\n");
						} else strcat(dialog, "Вам это меню не доступно!");
					}
					case 4:
					{
						strmid(category, "Работа", 0, 50);
						switch(Pl::Info[playerid][pJob])
						{
							case 1: strcat(dialog, "{FFFF00}/find - {FFFFFF}найти игрока\n");
							case 2: strcat(dialog, "{FFFF00}/free - {FFFFFF}выпустить игрока из тюрьмы\n");
							case 3: strcat(dialog, "{FFFF00}/sex - {FFFFFF}предложить заняться сексом\n");
							case 4: strcat(dialog, "{FFFF00}/selldrugs - {FFFFFF}продать наркотики игроку\n");
							case 5: {
								strcat(dialog, "{FFFF00}/jack - {FFFFFF}взломать замок автомобиля\n");
								strcat(dialog, "{FFFF00}/dropcar - {FFFFFF}экспортировать автомобиль\n");
							}
							case 6: {
								strcat(dialog, "{FFFF00}/at - {FFFFFF}прицепить прицеп\n");
								strcat(dialog, "{FFFF00}/dt - {FFFFFF}отцепить прицеп\n");
								strcat(dialog, "{FFFF00}/duty - {FFFFFF}заступить на дежурство\n");
								strcat(dialog, "{FFFF00}/repair - {FFFFFF}починить автомобиль\n");
								strcat(dialog, "{FFFF00}/refill - {FFFFFF}заправить автомобиль\n");
							}
							case 7: {
								strcat(dialog, "{FFFF00}/mats - {FFFFFF}купить/переработать материалы\n");
								strcat(dialog, "{FFFF00}/sellgun - {FFFFFF}продать оружие игроку\n");
							}
							case 8: strcat(dialog, "{FFFF00}/sellcar - {FFFFFF}продать авто игроку\n");
							case 9: strcat(dialog, "{FFFF00}/fare - {FFFFFF}установить цену проезда\n");
							case 10: strcat(dialog, "{FFFF00}/delivery - {FFFFFF}начать рэйс\n");
							default: strcat(dialog, "У Вас нет работы!");
						}
						if(Pl::Info[playerid][pJob] > 0) strcat(dialog, "{FFFF00}/quitjob - {FFFFFF}уволиться\n");
					}
					case 5:
					{
						strmid(category, "Чаты", 0, 50);
						strcat(dialog, "{FFFF00}/w (/pm) - {FFFFFF}отправить личное сообщение игроку\n");
						strcat(dialog, "{FFFF00}/s - {FFFFFF}крикнуть\n");
						strcat(dialog, "{FFFF00}/b - {FFFFFF}OOC чат\n");
						if(IsAFamily(playerid)) strcat(dialog, "{FFFF00}/f - {FFFFFF}отправить сообщение в фракционный чат\n");
						if(IsATeam(playerid) || fracid == 11)
						{
							strcat(dialog, "{FFFF00}/d - {FFFFFF}отправить сообщение в чат департамента\n");
							strcat(dialog, "{FFFF00}/r - {FFFFFF}сказать по рации\n");
							strcat(dialog, "{FFFF00}/m - {FFFFFF}крикнуть по мегафону\n");
							strcat(dialog, "{FFFF00}/gov - {FFFFFF}отправить сообщение в городские новост\n");
						}
						strcat(dialog, "{FFFF00}/ad - {FFFFFF}подать объявление\n");
						strcat(dialog, "{FFFF00}/me - {FFFFFF}описать свое действие от 3-его лица\n");
						strcat(dialog, "{FFFF00}/do - {FFFFFF}описать действия вокруг себя\n");
						strcat(dialog, "{FFFF00}/try - {FFFFFF}попытаться что-то сделать\n");
						strcat(dialog, "{FFFF00}/togooc - {FFFFFF}вкл/выкл сообщения о входе/выходе игроков\n");
						strcat(dialog, "{FFFF00}/tognews - {FFFFFF}вкл/выкл показ новостей\n");
						strcat(dialog, "{FFFF00}/togfam - {FFFFFF}вкл/выкл семейный чат\n");
						strcat(dialog, "{FFFF00}/togpm - {FFFFFF}вкл/выкл личные сообщения\n");
					}
					
					case 6 : {
						strmid(category, "Телефон", 0, 50);
						LoadFile("dialog/help/phone.txt", dialog);
					}
					
					case 7 : {
						strmid(category, "Аренда авто", 0, 50);
						LoadFile("dialog/help/rent_car.txt", dialog);
					}
					
					case 8 : {
						strmid(category, "Дом", 0, 50);
						LoadFile("dialog/help/home.txt", dialog);
					}
					
					case 9 : {
						strmid(category, "Аренда дома", 0, 50);
						LoadFile("dialog/help/rent_home.txt", dialog);
					}
					
					case 10 : {
						strmid(category, "Бизнес", 0, 50);
						LoadFile("dialog/help/biznes.txt", dialog);
					}
					
					case 11:
					{
						strmid(category, "ЛИДЕРКА", 0, 50);
						if(IsPlayerLeader(playerid) > 0) {
							strcat(dialog, "{FFFF00}/lmenu - {FFFFFF}меню лидера\n");
							strcat(dialog, "{FFFF00}/invite - {FFFFFF}принять игрока в свою фракцию\n");
							strcat(dialog, "{FFFF00}/uninvite - {FFFFFF}выгнать игрока из своей фракции\n");
							strcat(dialog, "{FFFF00}/giverank - {FFFFFF}установить ранг игроку\n");
							strcat(dialog, "{FFFF00}/vigovor - {FFFFFF}дать выговор игроку\n");
							strcat(dialog, "{FFFF00}/unvigovor - {FFFFFF}снять выговор с игрока\n");
							if(fracid == 7) {
								strcat(dialog, "{FFFF00}/settax - {FFFFFF}установить налог\n");
								strcat(dialog, "{FFFF00}/givetax - {FFFFFF}выдать зарплпту законникам\n");
								strcat(dialog, "{FFFF00}/checktax - {FFFFFF}проверить казну\n");
								strcat(dialog, "{FFFF00}/gettax - {FFFFFF}взять деньги из казны\n");
							}
						} else {
							strcat(dialog, "Вы не лидер!");
						}
					}
					case 12:
					{
						strmid(category, "Хелперка", 0, 50);
						if(!IsPHelper(playerid, 1)) strcat(dialog, "Вы не хелпер!");
						strcat(dialog, "{FFFF00}/hc - {FFFFFF}отправить текст в чат хелперов\n");
						strcat(dialog, "{FFFF00}/ans - {FFFFFF}ответить игроку\n");
						strcat(dialog, "{FFFF00}/hduty - {FFFFFF}заступить на дежурство\n");
						if(IsPHelper(playerid, 2)) strcat(dialog, "{FFFF00}/hmute - {FFFFFF}дать мут игроку\n");
						if(IsPHelper(playerid, 3)) strcat(dialog, "{FFFF00}/makehelper(1-3) - {FFFFFF}дать хелперку\n");
					}
					case 13:
					{
						if(!Pl::Info[playerid][pAdmin]) strcat(dialog, "Вы не админ!");
						else
						{
							LoadFile("help/admin.hlp", dialog);
							return SPD(playerid, D_NONE, 0, "[RP]GrandWorld: Помощь > Команды админов", dialog, "Закрыть", "");
						}
					}
				}
				format(tittle, sizeof(tittle), "[RP]GrandWorld: Помощь > %s", category);
				SPD(playerid, D_HELP+33, 0, tittle, dialog, "НАЗАД", "Закрыть");
			}
		}
		
		case D_HELP+33 : { 
			LoadFile("list/help.lst", dialog);
			SPD(playerid, D_HELP, DIALOG_STYLE_LIST,"[RP]GrandWorld: Помощь", dialog, "ВЫБРАТЬ", "Закрыть");
		}
		
		case D_ARMOUR: {
			if(response) {
				if(Rac::GetPlayerArmour(playerid) >= 100.0 && Rac::GetPlayerHealth(playerid) >= 100.0) return Send(playerid, COLOR_GRAD2, "* Вы уже в бронежилете!");
				Rac::SetPlayerHealth(playerid, 100.0);
				Rac::SetPlayerArmour(playerid, 100.0);
				Rac::GivePlayerMoney(playerid, -500);
			}
		}
		
		case D_FARE : {
			if(response) {
				new Veh = GetPlayerVehicleID(playerid);
				if(IsABusCar(Veh)) {
					SetPVarInt(playerid, "NextCP", 0);
					SetPVarInt(playerid, "RouteID", listitem);
					format(string, sizeof(string), ">> %s - %s <<\nТариф: $%i", BusRouteStopName[BusRoute[listitem][0][stopID]], BusRouteStopName[BusRoute[listitem][BusRouteCount[listitem]-1][stopID]], TransportValue[playerid]);
					AttachText[Veh] = Add3DText(string, COLOR_BUS_PRICE, 0.0, 3.5, 2.8, 20.0, INVALID_PLAYER_ID, Veh, 0, 0, 0, -1);
					format(string, sizeof(string), "Вы начали маршрут %s - %s", BusRouteStopName[BusRoute[listitem][0][stopID]], BusRouteStopName[BusRoute[listitem][BusRouteCount[listitem]-1][stopID]]);
					Send(playerid, COLOR_TAXI_PRICE, string);
					Send(playerid,COLOR_LIGHTRED, "Следуете к красному маячку на радаре.");
					checkpointb[playerid] = CreateDynamicRaceCP(2, BusRoute[listitem][0][stopX], BusRoute[listitem][0][stopY], BusRoute[listitem][0][stopZ], 0, 0, 0, 4.0, 0, 0, playerid, 99999.0);
				}
			}
		}

		case D_SKILL : {
			if(response) {
				switch(listitem) {
					case 0: {
						new level = Pl::Info[playerid][pDetSkill];
						if(level >= 0 && level <= 50) format(string,sizeof(string),"*Ваш уровень опыта по профессии детектив = 1.\n*Для повышения уровня необходимо найти ещё %d игроков!", 50 - level);
						else if(level >= 51 && level <= 100) format(string,sizeof(string),"*Ваш уровень опыта по профессии детектив = 2.\n*Для повышения уровня необходимо найти ещё %d игроков!", 100 - level);
						else if(level >= 101 && level <= 200) format(string,sizeof(string),"*Ваш уровень опыта по профессии детектив = 3.\n*Для повышения уровня необходимо найти ещё %d игроков!", 200 - level);
						else if(level >= 201 && level <= 400) format(string,sizeof(string),"*Ваш уровень опыта по профессии детектив = 4.\n*Для повышения уровня необходимо найти ещё %d игроков!", 400 - level);
						else if(level >= 401) format(string,sizeof(string),"*Ваш уровень опыта по профессии детектив = 5.");
						SPD(playerid, D_SKILL+1, DIALOG_STYLE_MSGBOX, "SKILL",string,"ОК","");
					}
					
					case 1: {
						new level = Pl::Info[playerid][pLawSkill];
						if(level >= 0 && level <= 50) format(string,sizeof(string),"*Ваш уровень опыта по профессии адвокат = 1.\n*Для повышения уровня необходимо освободить ещё %d игроков!", 50 - level);
						else if(level >= 51 && level <= 100) format(string,sizeof(string),"*Ваш уровень опыта по профессии адвокат = 2.\n*Для повышения уровня необходимо освободить ещё %d игроков!", 100 - level);
						else if(level >= 101 && level <= 200) format(string,sizeof(string),"*Ваш уровень опыта по профессии адвокат = 3.\n*Для повышения уровня необходимо освободить ещё %d игроков!", 200 - level);
						else if(level >= 201 && level <= 400) format(string,sizeof(string),"*Ваш уровень опыта по профессии адвокат = 4.\n*Для повышения уровня необходимо освободить ещё %d игроков!", 400 - level);
						else if(level >= 401) format(string,sizeof(string),"*Ваш уровень опыта по профессии адвокат = 5.");
						SPD(playerid, D_SKILL+1, DIALOG_STYLE_MSGBOX, "SKILL",string,"ОК","");
					}
					
					case 2: {
						new level = Pl::Info[playerid][pSexSkill];
						if(level >= 0 && level <= 50) format(string,sizeof(string),"*Ваш уровень опыта по профессии шлюха = 1.\n*Для повышения уровня необходимо обслужить ещё %d клиентов!", 50 - level);
						else if(level >= 51 && level <= 100) format(string,sizeof(string),"*Ваш уровень опыта по профессии шлюха = 2.\n*Для повышения уровня необходимо обслужить ещё %d клиентов!", 100 - level);
						else if(level >= 101 && level <= 200) format(string,sizeof(string),"*Ваш уровень опыта по профессии шлюха = 3.\n*Для повышения уровня необходимо обслужить ещё %d клиентов!", 200 - level);
						else if(level >= 201 && level <= 400) format(string,sizeof(string),"*Ваш уровень опыта по профессии шлюха = 4.\n*Для повышения уровня необходимо обслужить ещё %d клиентов!", 400 - level);
						else if(level >= 401) format(string,sizeof(string),"*Ваш уровень опыта по профессии шлюха = 5.");
						SPD(playerid, D_SKILL+1, DIALOG_STYLE_MSGBOX, "SKILL",string,"ОК","");
					}
					
					case 3: {
						new level = Pl::Info[playerid][pDrugsSkill];
						if(level >= 0 && level <= 50) format(string,sizeof(string),"*Ваш уровень опыта по профессии наркодилер = 1.\n*Для повышения уровня необходимо совершить ещё %d сделок!", 50 - level);
						else if(level >= 51 && level <= 100) format(string,sizeof(string),"*Ваш уровень опыта по профессии наркодилер = 2.\n*Для повышения уровня необходимо совершить ещё %d сделок!", 100 - level);
						else if(level >= 101 && level <= 200) format(string,sizeof(string),"*Ваш уровень опыта по профессии наркодилер = 3.\n*Для повышения уровня необходимо совершить ещё %d сделок!", 200 - level);
						else if(level >= 201 && level <= 400) format(string,sizeof(string),"*Ваш уровень опыта по профессии наркодилер = 4.\n*Для повышения уровня необходимо совершить ещё %d сделок!", 400 - level);
						else if(level >= 401) format(string,sizeof(string),"*Ваш уровень опыта по профессии наркодилер = 5.");
						SPD(playerid, D_SKILL+1, DIALOG_STYLE_MSGBOX, "SKILL",string,"ОК","");
					}
					
					case 4: {
						new level = Pl::Info[playerid][pJackSkill];
						if(level >= 0 && level <= 50) format(string,sizeof(string),"*Ваш уровень опыта по профессии автоугонщик = 1.\n*Для повышения уровня необходимо продать ещё %d машин!", 50 - level);
						else if(level >= 51 && level <= 100) format(string,sizeof(string),"*Ваш уровень опыта по профессии автоугонщик = 2.\n*Для повышения уровня необходимо продать ещё %d машин!", 100 - level);
						else if(level >= 101 && level <= 200) format(string,sizeof(string),"*Ваш уровень опыта по профессии автоугонщик = 3.\n*Для повышения уровня необходимо продать ещё %d машин!", 200 - level);
						else if(level >= 201 && level <= 400) format(string,sizeof(string),"*Ваш уровень опыта по профессии автоугонщик = 4.\n*Для повышения уровня необходимо продать ещё %d машин!", 400 - level);
						else if(level >= 401) format(string,sizeof(string),"*Ваш уровень опыта по профессии автоугонщик = 5.");
						SPD(playerid, D_SKILL+1, DIALOG_STYLE_MSGBOX, "SKILL",string,"ОК","");
					}
					
					case 5:	{
						new level = Pl::Info[playerid][pNewsSkill];
						if(level >= 0 && level <= 50) format(string,sizeof(string),"*Ваш уровень опыта по профессии репортер = 1.\n*Для повышения уровня необходимо опубликовать ещё %d новостей в /news!", 50 - level);
						else if(level >= 51 && level <= 100) format(string,sizeof(string),"*Ваш уровень опыта по профессии репортер = 2.\n*Для повышения уровня необходимо опубликовать ещё %d новостей в /news!", 100 - level);
						else if(level >= 101 && level <= 200) format(string,sizeof(string),"*Ваш уровень опыта по профессии репортер = 3.\n*Для повышения уровня необходимо опубликовать ещё %d новостей в /news!", 200 - level);
						else if(level >= 201 && level <= 400) format(string,sizeof(string),"*Ваш уровень опыта по профессии репортер = 4.\n*Для повышения уровня необходимо опубликовать ещё %d новостей в /news!", 400 - level);
						else if(level >= 401) format(string,sizeof(string),"*Ваш уровень опыта по профессии репортер = 5.");
						SPD(playerid, D_SKILL+1, DIALOG_STYLE_MSGBOX, "SKILL",string,"ОК","");
					}
					
					case 6: {
						new level = Pl::Info[playerid][pMechSkill];
						if(level >= 0 && level <= 50) format(string,sizeof(string),"*Ваш уровень опыта по профессии механик = 1.\n*Для повышения уровня необходимо починить/заправить ещё %d машин!", 50 - level);
						else if(level >= 51 && level <= 100) format(string,sizeof(string),"*Ваш уровень опыта по профессии механик = 2.\n*Для повышения уровня необходимо починить/заправить ещё %d машин!", 100 - level);
						else if(level >= 101 && level <= 200) format(string,sizeof(string),"*Ваш уровень опыта по профессии механик = 3.\n*Для повышения уровня необходимо починить/заправить ещё %d машин!", 200 - level);
						else if(level >= 201 && level <= 400) format(string,sizeof(string),"*Ваш уровень опыта по профессии механик = 4.\n*Для повышения уровня необходимо починить/заправить ещё %d машин!", 400 - level);
						else if(level >= 401) format(string,sizeof(string),"*Ваш уровень опыта по профессии механик = 5.");
						SPD(playerid, D_SKILL+1, DIALOG_STYLE_MSGBOX, "SKILL",string,"ОК","");
					}
					
					case 7: {
						new level = Pl::Info[playerid][pCarSkill];
						if(level >= 0 && level <= 50) format(string,sizeof(string),"*Ваш уровень опыта по профессии автодилер = 1.\n*Для повышения уровня необходимо оформить ещё %d автомобилей!", 50 - level);
						else if(level >= 51 && level <= 100) format(string,sizeof(string),"*Ваш уровень опыта по профессии автодилер = 2.\n*Для повышения уровня необходимо оформить ещё %d автомобилей!", 100 - level);
						else if(level >= 101 && level <= 200) format(string,sizeof(string),"*Ваш уровень опыта по профессии автодилер = 3.\n*Для повышения уровня необходимо оформить ещё %d автомобилей!", 200 - level);
						else if(level >= 201 && level <= 400) format(string,sizeof(string),"*Ваш уровень опыта по профессии автодилер = 4.\n*Для повышения уровня необходимо оформить ещё %d автомобилей!", 400 - level);
						else if(level >= 401) format(string,sizeof(string),"*Ваш уровень опыта по профессии автодилер = 5.");
						SPD(playerid, D_SKILL+1, DIALOG_STYLE_MSGBOX, "SKILL",string,"НАЗАД","Закрыть");
					}
				}
			}
		}
		
		case D_SKILL+1 : {
			if(response) {
				ShowDialog(playerid, D_SKILL, DIALOG_STYLE_LIST, "[RP]GrandWorld: SKILL", "list/skill.lst", "Выбор","Отмена");
			}
		}
		
		case D_SPAWN : {
			if(response) {
				Pl::Info[playerid][pOrigin] = listitem ? 2 : 1; 
				Pl::setSpawnInfo(playerid);
				format(string, sizeof string, "* Вы будите спавнится в отеле %s.", listitem ? ("Лас Вентураса") : ("Jefferson"));
				Send(playerid, COLOR_LIGHTBLUE, string);
			}
		}

		case D_SERVICE : {
			if(response) {
				switch(listitem) {
					case 0: {
						if(!TaxiDrivers) return Send(playerid, COLOR_GREY, "Нет свободных таксистов!");
						if(TransportDuty[playerid] > 0) return Send(playerid, COLOR_GREY, "Вы уже вызвали такси!");
						format(string, sizeof(string), "[ВЫЗОВ] Клиент %s. Сообщение: %s  (( Введите /accept taxi ))", GetName(playerid), inputtext);
						sendToFamily(TEAM_TAXI, COLOR_AZTECAS, string);
						Send(playerid, COLOR_LIGHTBLUE, "* Вы позвали Таксиста, ждите ответа.");
						TaxiCall = playerid;
					}
					
					case 1: {
						if(!Medics) return Send(playerid, COLOR_GREY, "Нет свободных медиков!");
						if(Iter_Count(MedicCalls)) {
							if(Iter_Contains(MedicCalls, playerid)) {
								Send(playerid, COLOR_GREY, "* Вы уже вызвали медика!");
							}
						} else {
							format(string, sizeof(string), "[ВЫЗОВ] Клиент %s. Сообщение: %s  ((Введите /accept medic))", GetName(playerid), inputtext);
							sendToFamily(TEAM_MEDIC, COLOR_AZTECAS, string);
							Send(playerid, COLOR_LIGHTBLUE, "* Вы позвали Санитара, ждите ответа.");
							Iter_Add(MedicCalls, playerid);
						}
					}
					
					case 2: {
						if(!Mechanics) return Send(playerid, COLOR_GREY, "Нет свободных механиков!");
						if(Iter_Count(MechanicCalls)) {
							if(Iter_Contains(MechanicCalls, playerid)) {
								Send(playerid, COLOR_GREY, "* Вы уже вызвали механика!");
							}
						} else {
							format(string, sizeof(string), "[ВЫЗОВ] Клиент %s. Сообщение: %s  (( Введите /accept mechanic ))", GetName(playerid), inputtext);
							SendJobMessage(JOB_MECHANIC, COLOR_AZTECAS, string);
							Send(playerid, COLOR_LIGHTBLUE, "* Вы позвали Автомобильного Механика, ждите ответа.");
							Iter_Add(MechanicCalls, playerid);
						}
					}
				}
			}
		}
	}
	
	return 1;
}

public: onServerUpdate() {
    foreach(new p : Player) {
		if(Pl::Info[p][pWait] > 0) {
			Pl::Info[p][pWait] --;
			if(Pl::Info[p][pWait] == 0) {
				GetPlayerName(p, plname, 24);
				if(Pl::isRegged(p)) {
					format(dialog, sizeof dialog, "Вы зашли как %s! Пожалуйста, авторизуйтесь!\n\
					Пароль необходимо вводить без команды /login", plname);
					SPD(p, D_AUTH, 3, "[RP]GRANDWORLD AUTORISATION. Введите ваш пароль!", dialog, "LOGIN", "CANCEL");
				} else {
					if(StuffInfo[sRegged]) {
						format(dialog, sizeof dialog, "Персонаж %s не зарегистрирован! Перед началом игры ознакомтесь с правилами.", plname);
						SPD(p, D_REGG, DIALOG_STYLE_MSGBOX, "[RP]GrandWorld: Rules", dialog, "OK", "CANCEL");
					} else {
						ShowDialog(p, D_NONE, 0, "[RP]GRANDWORLD REGISTRATION", "list/noregged.lst", "OK", "");
						Kick(p);
					}
				}
			}
		} else {
			if(Pl::isLogged(p)) {
				Update(p);
				UnJailPlayer(p);
				playerAFKUpdate(p);
				vehicleStatusUpdate(p);
				playerSpectateUpdate(p);
				PoppyCollection(p);
				OnPlayerPickupExit(p);
			}
		}
    }
	

	static advTimer;
	if(++advTimer >= ADV_TIME) {
		advTimer = 0;
		SendToAll(COLOR_LIGHTGREEN,"На сервере [RP]GrandWorld запрещено: ДБ, ДМ, Флуд, Читы, CLEO скрипты, Капс, Розжиг межрасовой розни");
		SendToAll(COLOR_LIGHTBLUE,"Все интересующие вас вопросы, касающиеся игры вы найдете на нашем форуме: www.rp-grandworld.ru");
		SendToAll(COLOR_DBLUE,"Если вас оскорбили, унизили, убили без причины, либо вы увидели читера или того, кто нарушает правила - то пишите /report [id] жалоба.");
	}
	
	static gainsTime;
	if(++gainsTime >= GAINS_TIME) {
		gainsTime = 0;
		for(new i, gains; i < sizeof Gangs; i++) {
			gains = GangBiznes{Gangs[i]}*300;
			if(gains > 0) {
				GiveFracMoney(Gangs[i], gains);
				format(temp, sizeof(temp), "~r~%s~n~Gains ~g~$%i", GetGangName(Gangs[i]), gains);
				GameTextForGang(Gangs[i], temp, 5000, 1);
			}
		}
	}

	static syncTimer;
	if(++syncTimer >= 60) {
		syncTimer = 0;
		new h, m, s;
		gettime(h, m, s);
		FixHour(h);
		h = shifthour;
		
		format(temp, sizeof temp, "~w~%02i:%02i", h, m);
		Td::SetString(Time, temp);
		foreach(new i : Player) {
			if(Pl::isLogged(i)) {
				Td::ShowForPlayer(i, Time);
			}
		}
		
		if((h > ghour) || (h == 0 && ghour == 23)) {
			ghour = h;
			SetWorldTime(h);
			format(temp, sizeof(temp), "*[RP]GrandWorld: сейчас %d:00 часа(ов).", h);
			SendToAll(COLOR_WHITE, temp);
			SetTimer("onPayDay", 555, false);
			SetTimer("ClearBanList", 777, false);
		}
		if(h == 4 && m == 0) {
			print(" Объявление: через 1 час будет произведен автоматический рестарт сервера");
			SendToAll(COLOR_LIGHTRED, " Объявление: через 1 час будет произведен автоматический рестарт сервера!");
		}
		if(h == 5 && m == 0) {
			Gm::info[Gm::isAutoRest] = 1;
			print(" Внимание: автоматический рестарт сервера");
			SendToAll(COLOR_LIGHTRED, "Внимание: автоматический рестарт сервера!");
			SetTimerEx("GameModeInitExitFunc", 2000, false, "i", Gm::info[Gm::isAutoRest]);
		}
	}

	foreach(new vehicleid : enginedVehicles) {
		AutoInfo[vehicleid][aUpdate] ++;
		if(AutoInfo[vehicleid][aUpdate] >= 25) {
			Benzin{vehicleid} --;
			AutoInfo[vehicleid][aUpdate] = 0;
			new driver = GetVehicleDriver(vehicleid);
			if(driver != INVALID_PLAYER_ID) {
				updateBenzinTD(driver, vehicleid);
			}
			if(Benzin{vehicleid} < 1) {
				Benzin{vehicleid} = 0;
				switch(GetVehicleType(GetVehicleModel(vehicleid))) {
					case VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AUTO : {
						isEngined{vehicleid} = false;
						GetVehicleParamsEx(vehicleid,engine,light,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(vehicleid,false,light,alarm,doors,bonnet,boot,objective);
					}
				}
				new next;
				Iter_SafeRemove(enginedVehicles, vehicleid, next);
				vehicleid = next;
			}
		}
	}
}

stock vehicleStatusUpdate(playerid) {
	//static Float:x, Float:y, Float:z;
	static model, vehicle, speed;
	static Float:health, string[255];
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		vehicle = GetPlayerVehicleID(playerid);
		model = GetVehicleModel(vehicle);
		switch(GetVehicleType(model)) {
			case VEHICLE_TYPE_UNKNOWN : {
				return Rac::Kick(playerid, "unknown vehicle model");
			}
			case VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AUTO : {
				if(isEngined{vehicle}) {
					GetVehicleHealth(vehicle, health);
					if(health < 450 || Benzin{vehicle} <= 0) {
						ToggleVehicleEngine(vehicle, 0);
						format(string, sizeof string, "* Двигатель заглох");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(playerid, (health<450)?("~n~~n~~n~~n~~n~~n~~w~C‡OMAHO"):("~n~~n~~n~~n~~n~~n~~w~HET ЂEH€…HA"), 7000, 5);
					}
				}
				if(!AFKInfo[playerid][afk_State]) {
					speed = Rac::GetPlayerSpeed(playerid, false);
					if(speed > 0) {
						AutoInfo[vehicle][aMileage] += speed / 1.6 / 1609.344;
					}
				}
				format(string, sizeof string, "~w~VEHICLE: ~g~%s [id: %i]      %.1f (miles)", VehicleNames[model-400], model, AutoInfo[vehicle][aMileage]);
				if(model == 482) {
					scf(string, temp, "      MATS: ~r~%i/%i", AutoInfo[vehicle][aMats], AutoInfo[vehicle][aMaxMats]);
				} else if(IsACompTruck(vehicle)) {
					scf(string, temp, "      PRODS: ~r~%i/%i", PlayerHaul[vehicle-comptruck[0]][pLoad], PlayerHaul[vehicle-comptruck[0]][pCapasity]);
				} else if(isTeamVehicle(TEAM_FARMERS, vehicle)) {
					scf(string, temp, "      MAK: ~r~%i/%i", AutoInfo[vehicle][aDrugs], AutoInfo[vehicle][aMaxDrugs]);
				}
			}
			
			default : {
				format(string, sizeof string,"~w~VEHICLE: ~g~%s [id: %i]", VehicleNames[model-400], model, AutoInfo[vehicle][aMileage]);
			}
		}
		Pt::SetString(playerid, Td::Name[playerid], string);
		Pt::SetString(playerid, Td::Status[playerid], (gCarLock{vehicle})?("~r~Lock"):("~w~Lock"));
	}
	return 1;
}

stock PoppyCollection(i) {
	if(GetFracID(i) == 20) {
		if(IsPlayerInDynamicArea(i, area::poppyField)) {
			new vehid = GetPlayerVehicleID(i);
			if(vehid && GetVehicleModel(vehid) == 532) {
				if(Rac::GetPlayerSpeed(i) > 0) {
					if(AutoInfo[vehid][aDrugs] != AutoInfo[vehid][aMaxDrugs]) {
						AutoInfo[vehid][aDrugs] ++;
					}
				}
			}
		}
	}
}

stock UnJailPlayer(i) {
	if(Pl::Info[i][pJailed] > 0 && AFKInfo[i][afk_Time][0] < AFK_TEXT_SET) {
		if(Pl::Info[i][pJailTime] != 0) {
			Pl::Info[i][pJailTime]--;
			if(Pl::Info[i][pJailTime] <= 0) {
				SetPColor(i);
				ClearCrime(i);
				UnJail(i, Pl::Info[i][pJailed]);
				Send(i, COLOR_GRAD1,"* Вы заплатили свой долг обществу.");
				format(temp, sizeof(temp), "~g~Freedom~n~~w~Try to be a better citizen");
				GameTextForPlayer(i, temp, 5000, 1);
			}
		}
	}

	if(WantLawyer[i] >= 1) {
		CallLawyer[i] = 111;
		switch(WantLawyer[i]++) {
			case 1, 8, 15 : Send(i, COLOR_LIGHTRED, "Вы хотите Адвоката? (пишите yes (если нужен) или no (если не нужен) )");
			case 20 : {
				Send(i, COLOR_LIGHTRED, "Адвоката нету. Тюремное заключение началось.");
				WantLawyer[i] = 0;
				CallLawyer[i] = 0;
			}
		}
	}
}

#if defined __rac_included
public onPlayerKick(playerid, reason[], reasonid) {
	GetPlayerName(playerid, plname, 24);
	format(temp, sizeof temp, "[античит] * %s[%i] был кикнут, причина: %s || AC%s", plname, playerid, reason, reasonid == R_NONE ? ("#0000") : R::Info[reasonid]);
	foreach(new i : AdminPlayers) {
		if(playerid != i) {
			if(Pl::isAdmin(i, 1)) {
				Send(i, COLOR_LIGHTRED, temp);
			}
		}
	}
	SendLog("anticheat", temp);
	
	return 1;
}

public onPlayerBan(playerid, reason[], reasonid) {
	GetPlayerName(playerid, plname, 24);
	format(temp, sizeof temp, "[античит] * %s[%i] был забанен, причина: %s || AC%s", plname, playerid, reason, reasonid == R_NONE ? ("#0000") : R::Info[reasonid]);
	foreach(new i : AdminPlayers) {
		if(playerid != i) {
			if(Pl::isAdmin(i, 1)) {
				Send(i, COLOR_LIGHTRED, temp);
			}
		}
	}
	SendLog("anticheat", temp);
	
	return 1;
}
#endif

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid) {
	GMTest{playerid} = false;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid) {
	if(Rac::isValidPlayer(playerid) && Rac::isValidPlayer(damagedid)) {
		if(InAntiDmZone{playerid}) {
			AnimClear[playerid] = 4;
			ApplyAnimation(playerid, "FAT","IDLE_tired", 4.1, 1, 1, 1, 1, 0);
			SetTimerEx("AC_TogglePlayerControllable", 7000, false, "ii", playerid, 1);
		} else {
			switch(weaponid) {
				case 33, 34 : {
					if(IsHeadshot(playerid, damagedid)) {
						SetPlayerDamage(playerid, damagedid, Float:INFINITY, weaponid);
					}
				}
				default : {
					SetPlayerDamage(playerid, damagedid, amount, weaponid);
				}
			}
		}
	}
	return 1;
}

stock SetPlayerDamage(playerid, damagedid, Float:damage, reason) {
	new Float:health, Float:armour;
	GetPlayerHealth(damagedid, health);
	GetPlayerArmour(damagedid, armour);
	if(armour > 1) {
		armour -= damage;
		if(armour < 0) {
			health -= -armour;
			if(health < 1) {
				SyncInfo[damagedid][sKillerID] = playerid;
				SyncInfo[damagedid][sReasonID] = reason;
			}
		}
		Rac::SetPlayerHealth(damagedid, health), Rac::SetPlayerArmour(damagedid, armour);
	} else if(health > 0) {
		health -= damage;
		if(health < 1) {
			SyncInfo[damagedid][sKillerID] = playerid;
			SyncInfo[damagedid][sReasonID] = reason;
		}
		Rac::SetPlayerHealth(damagedid, health), Rac::SetPlayerArmour(damagedid, armour);
	}
	return 1;
}

public OnPlayerUpdate(playerid) {
	AFKInfo[playerid][afk_Time][0] = 0;
	if(AFKInfo[playerid][afk_State] != 0) {
		AFKInfo[playerid][afk_State] = 0;
		Delete3DTextLabel(AFKInfo[playerid][afk_Text]);
	}

	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid) {
	if(Rac::IsValidState(forplayerid) && Rac::IsValidState(playerid)) {
		new fracid = GetFracID(forplayerid);
		if(Bl::Info[playerid][Bl::onFrac][fracid] && Bl::Info[forplayerid][Bl::Observe] == INVALID_PLAYER_ID) {
			if(Bl::Info[playerid][Bl::Finder] == INVALID_PLAYER_ID) {
				Bl::Info[playerid][Bl::Finder] = forplayerid;
				Bl::Info[forplayerid][Bl::Observe] = playerid;
				GetPlayerPos(playerid, posx, posy, posz);
				switch(GetPlayerState(playerid)) {
					case PLAYER_STATE_ONFOOT : {
						Bl::Info[forplayerid][Bl::Marker] = CreateDynamicCP(posx, posy, posz, 1.6, -1, -1, forplayerid, 200.0);
					}
					case PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER : {
						new vehid = GetPlayerVehicleID(playerid);
						GetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, true);
					}
				}
				getname(playerid -> plname, forplayerid -> temp);
				format(src, sizeof(src), "[BLACK LIST] Вы были замечены, %s %s [%s]", RankInfo[fracid][Pl::Info[forplayerid][pRank]], temp, FracInfo[fracid][fName]);
				Send(playerid, COLOR_AZTECAS, src);
				format(src, sizeof(src), "[BLACK LIST] Появился запашок черта, %s %s заметил %s", RankInfo[fracid][Pl::Info[forplayerid][pRank]], temp, plname);
				sendToFamily(fracid, COLOR_AZTECAS, src);
			} else {
				GetPlayerPos(playerid, posx, posy, posz);
				Bl::Info[forplayerid][Bl::Observe] = playerid;
				switch(GetPlayerState(playerid)) {
					case PLAYER_STATE_ONFOOT : {
						Bl::Info[forplayerid][Bl::Marker] = CreateDynamicCP(posx, posy, posz, 1.6, -1, -1, forplayerid, 200.0);
					}
				}
			}
		}
	}
	
	ShowPlayerNameTagForPlayer(forplayerid, playerid, !Pl::Info[playerid][pMaskOn]);
	Iter_Add(inStreamPlayers[forplayerid], playerid);
}

public OnPlayerStreamOut(playerid, forplayerid) {
	if(Rac::IsValidState(forplayerid) && Bl::ValidState(playerid)) {
		new fracid = GetFracID(forplayerid);
		if(Bl::Info[playerid][Bl::onFrac][fracid]) {
			if(!Bl::Info[playerid][Bl::isKilled]) {
				if(Bl::Info[playerid][Bl::Finder] == forplayerid) {
					Bl::Info[playerid][Bl::Finder] = INVALID_PLAYER_ID;
					GetPlayerName(playerid, plname, 24);
					Send(playerid, COLOR_AZTECAS, "[BLACK LIST] Вам удалось скрытся!");
					format(temp, sizeof temp, "[BLACK LIST] След был упущен, %s скрылся", plname);
					sendToFamily(fracid, COLOR_AZTECAS, temp);
				}
			} else {
				Bl::Info[playerid][Bl::isKilled] = false;
			}
		}
	}
	
	Iter_Remove(inStreamPlayers[forplayerid], playerid);
}

forward GateClose(gateid);
public  GateClose(gateid) {
	if(gateid == GateInfo[E_GATE_YAKUZA][E_GATE_OBJECT]) {
		GateInfo[E_GATE_YAKUZA][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_YAKUZA][E_GATE_OBJECT], 1525.08374023, 2773.18920898, 12.44526672, 2.0);
	} else if(gateid == GateInfo[E_GATE_FLAMING][E_GATE_OBJECT]) {
		GateInfo[E_GATE_FLAMING][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_FLAMING][E_GATE_OBJECT], 707.53546143,-479.18560791,17.00000000, 3);
	} else if(gateid == GateInfo[E_GATE_VAGOS][E_GATE_OBJECT]) {
		GateInfo[E_GATE_VAGOS][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_VAGOS][E_GATE_OBJECT], 2797.19482422,-1599.36096191,11.63015938, 3);
	} else if(gateid == GateInfo[E_GATE_SD][E_GATE_OBJECT]) {
		GateInfo[E_GATE_SD][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_SD][E_GATE_OBJECT], 1017.50000000,2133.40820312,12.59399986, 3.0);
	} else if(gateid == GateInfo[E_GATE_KOLXOZ][E_GATE_OBJECT]) {
		GateInfo[E_GATE_KOLXOZ][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_KOLXOZ][E_GATE_OBJECT], -1050.39794922,-1345.34973145,131.00000000, 3);
	} else if(gateid == GateInfo[E_GATE_ARMY][E_GATE_OBJECT]) {
		GateInfo[E_GATE_ARMY][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_ARMY][E_GATE_OBJECT], 96.800,1920.376,18.183, 3);
	} else if(gateid == GateInfo[E_GATE_TAXI][E_GATE_OBJECT]) {
		GateInfo[E_GATE_TAXI][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_TAXI][E_GATE_OBJECT], -1771.3582763672, 985.01013183594, 25.74254989624, 2.0);
	} else if(gateid == GateInfo[E_GATE_RM_1][E_GATE_OBJECT]) {
		GateInfo[E_GATE_RM_1][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_RM_1][E_GATE_OBJECT], -2655.23974609, -224.56163025, 6.21994114, 2.0);
	} else if(gateid == GateInfo[E_GATE_RM_2][E_GATE_OBJECT]) {
		GateInfo[E_GATE_RM_2][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_RM_2][E_GATE_OBJECT], -2801.18750000, -329.59487915, 8.81994534, 2.0);
	} else if(gateid == GateInfo[E_GATE_LCN][E_GATE_OBJECT]) {
		GateInfo[E_GATE_LCN][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_LCN][E_GATE_OBJECT], 1264.04602051, -2048.85009766, 61.09500122, 2.0);
	} else if(gateid == GateInfo[E_GATE_RIFA][E_GATE_OBJECT]) {
		GateInfo[E_GATE_RIFA][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_RIFA][E_GATE_OBJECT], -2127.4970703125, -80.352951049805, 37.093704223633, 2.0);
	} else if(gateid == GateInfo[E_GATE_CNN][E_GATE_OBJECT]) {
		GateInfo[E_GATE_CNN][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_CNN][E_GATE_OBJECT],773.53601074,-1330.10705566,13.92199993,2.0,0.00000000,0.00000000,268.75000000);
	} else if(gateid == GateInfo[E_GATE_FBI_1][E_GATE_OBJECT]) {
		GateInfo[E_GATE_FBI_1][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_FBI_1][E_GATE_OBJECT], -1644.6872558594, 682.34130859375, 9.4969673156738,2.0);
	} else if(gateid == GateInfo[E_GATE_FBI_2][E_GATE_OBJECT]) {
		GateInfo[E_GATE_FBI_2][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_FBI_2][E_GATE_OBJECT], -1571.8803710938, 661.48571777344, 8.9608917236328,2.0);
	} else if(gateid == GateInfo[E_GATE_GOVBARRIER][E_GATE_OBJECT]) {
		GateInfo[E_GATE_GOVBARRIER][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_GOVBARRIER][E_GATE_OBJECT], 1544.07495117,-1841.32495117,15.31999969, 3.0);
	} else if(gateid == GateInfo[E_GATE_LSPDBARRIER][E_GATE_OBJECT]) {
		GateInfo[E_GATE_LSPDBARRIER][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_LSPDBARRIER][E_GATE_OBJECT], 1544.69995117, -1630.80004883,13.10000038-0.004,0.004,0.0,270.00000000,270.00000000);
	} else if(gateid == GateInfo[E_GATE_LSPDDOOR][E_GATE_OBJECT]) {
		GateInfo[E_GATE_LSPDDOOR][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_LSPDDOOR][E_GATE_OBJECT], 247.005905,72.448440,1003.640625, 2.0);
	} else if(gateid == GateInfo[E_GATE_LSPDGATE][E_GATE_OBJECT]) {
		GateInfo[E_GATE_LSPDGATE][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_LSPDGATE][E_GATE_OBJECT], 1590.0573730469, -1637.974609375, 14.743314743042, 2.0);
	} else if(gateid == GateInfo[E_GATE_LICBARRIER][E_GATE_OBJECT]) {
		GateInfo[E_GATE_LICBARRIER][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_LICBARRIER][E_GATE_OBJECT], -2056.89990234,-100.02700043,34.94699860-0.015, 0.015, 0.0,90.00000000,90.00000000);
	} else if(gateid == GateInfo[E_GATE_GOVDOOR][E_GATE_OBJECT]) {
		GateInfo[E_GATE_GOVDOOR][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_GOVDOOR][E_GATE_OBJECT], 372.75192261, 166.50007629, 1007.38281250, 2.0);
	} else if(gateid == GateInfo[E_GATE_SFMCDOOR][E_GATE_OBJECT]) {
		GateInfo[E_GATE_SFMCDOOR][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_SFMCDOOR][E_GATE_OBJECT], 363.94100952148,187.08000183105,1020.125, 2.0);
	} else if(gateid == GateInfo[E_GATE_FBIDOOR_1][E_GATE_OBJECT]) {
		GateInfo[E_GATE_FBIDOOR_1][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_1][E_GATE_OBJECT], 228.24499512,151.34700012,1003.64300537, 2.0, 0.00000000,0.00000000,269.50000000);
	} else if(gateid == GateInfo[E_GATE_FBIDOOR_2][E_GATE_OBJECT]) {
		GateInfo[E_GATE_FBIDOOR_2][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_2][E_GATE_OBJECT], 228.21899414,161.11799622,1003.64300537, 2.0, 0.00000000,0.00000000,270.24462891);
	} else if(gateid == GateInfo[E_GATE_FBIDOOR_3][E_GATE_OBJECT]) {
		GateInfo[E_GATE_FBIDOOR_3][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_3][E_GATE_OBJECT], 230.89100647,169.83099365,1003.64300537, 2.0, 0.00000000,0.00000000,180.00000000);
	} else if(gateid == GateInfo[E_GATE_FBIDOOR_4][E_GATE_OBJECT]) {
		GateInfo[E_GATE_FBIDOOR_4][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_4][E_GATE_OBJECT], 275.57101440,189.32000732,1007.79199219, 2.0, 0.00000000,0.00000000,0.00000000);
	} else if(gateid == GateInfo[E_GATE_FBIDOOR_5][E_GATE_OBJECT]) {
		GateInfo[E_GATE_FBIDOOR_5][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_5][E_GATE_OBJECT], 296.51800537,189.32499695,1007.79199219, 2.0, 0.00000000,0.00000000,0.00000000);
	} else if(gateid == GateInfo[E_GATE_CORONOS_1][E_GATE_OBJECT]) {
		GateInfo[E_GATE_CORONOS_1][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_CORONOS_1][E_GATE_OBJECT],1810.3319091797,-1885.6104736328,14.41153717041, 2.0);
		MoveDynamicObject(GateInfo[E_GATE_CORONOS_2][E_GATE_OBJECT],1810.3541259766,-1893.5799560547,14.405469894409, 2.0);
	} else if(gateid == GateInfo[E_GATE_GROVE_1][E_GATE_OBJECT]) {
		GateInfo[E_GATE_GROVE_1][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_GROVE_1][E_GATE_OBJECT],2439.3210449219,-1664.3826904297,14.108180999756, 2.0);
		MoveDynamicObject(GateInfo[E_GATE_GROVE_2][E_GATE_OBJECT],2439.31640625,-1656.4501953125,14.104577064514, 2.0);
	} else if(gateid == GateInfo[E_GATE_HITMAN_1][E_GATE_OBJECT]) {
		GateInfo[E_GATE_HITMAN_1][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_HITMAN_1][E_GATE_OBJECT], 1032.59033203,-367.15255737,74.69999695, 3);
		MoveDynamicObject(GateInfo[E_GATE_HITMAN_2][E_GATE_OBJECT], 1024.64013672,-367.33731079,74.69999695, 3);
	} else if(gateid == GateInfo[E_GATE_BALLAS_1][E_GATE_OBJECT]) {
		GateInfo[E_GATE_BALLAS_1][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_BALLAS_1][E_GATE_OBJECT], 952.16387939,-1098.89575195,24.20000076, 3);
		MoveDynamicObject(GateInfo[E_GATE_BALLAS_2][E_GATE_OBJECT], 952.30175781,-1106.84375000,24.21918869, 3);
	} else if(gateid == GateInfo[E_GATE_ZONA_1][E_GATE_OBJECT]) {
		GateInfo[E_GATE_ZONA_1][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_ZONA_1][E_GATE_OBJECT], 211.95550537,1875.55676270,13.93265820, 3);
		MoveDynamicObject(GateInfo[E_GATE_ZONA_2][E_GATE_OBJECT], 216.06652832,1875.56518555,13.93265820, 3);
	} else if(gateid == GateInfo[E_GATE_MED][E_GATE_OBJECT]) {
		GateInfo[E_GATE_MED][E_GATE_STATUS] = 0;
		MoveDynamicObject(GateInfo[E_GATE_MED][E_GATE_OBJECT], -2666.6979980469,577.875,15.800000190735, 3.0);
	}
	
	return 1;
}

public: AddsOn() adds = true;
public: onUsePlusC(playerid) usePlusC{playerid} = false;
public: onUseBannyHop(playerid) useBannyHop{playerid} = false;

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
	#define wait(%0); if(!Wait{%0}){Wait{%0} = 1;}else{return 1;}

	if(!useBannyHop{playerid}) {
		if(PRESSED(KEY_SPRINT|KEY_JUMP)) {
			if(GetPlayerVehicleID(playerid) == 0) {
				useBannyHop{playerid} = true;
				SetTimerEx("onUseBannyHop", 1000, false, "i", playerid);
				ApplyAnimation(playerid,"PED","GETUP_FRONT",4.0, 0, 1, 1, 0, 0);
			}
			return 1;
		}
	}
	
	if((newkeys & KEY_JUMP) && !(oldkeys & KEY_JUMP)) {
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) {
			return ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
		}
	}

	if(PRESSED(KEY_RADIO)) {
		if(Rac::GetPlayerState(playerid) == 2) {
			dialog[0] = '\0';
			for(new i; i < sizeof(RadioInfo); i++) {
				scf(dialog, temp, "• %s\n", RadioInfo[i][rName]);
			}
			return SPD(playerid, D_RADIO, 2, "RADIO", dialog, "Выбор", "Отмена");
		}
	}

	if(PRESSED(KEY_CROUCH)) {
		wait(playerid);
		
		if(IsPlayerInRangeOfPoint(playerid, 10.0,1544.4993,-1627.1409,13.3828)) {
			if(IsACop(playerid) || GetFracID(playerid) == 7) {
				if(!GateInfo[E_GATE_LSPDBARRIER][E_GATE_STATUS]) {
					GateInfo[E_GATE_LSPDBARRIER][E_GATE_STATUS] = 1;
					MoveDynamicObject(GateInfo[E_GATE_LSPDBARRIER][E_GATE_OBJECT], 1544.69921875,-1630.79980469,13.10000038+0.004, 0.004, 0.00000000,0.00000000,270.00000000);
					SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_LSPDBARRIER][E_GATE_OBJECT]);
					ProxDetector(30.0, playerid, "* Заскрипел шлагбаум.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		} else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1590.0573730469, -1637.974609375, 14.743314743042)) {
			if(IsACop(playerid) || GetFracID(playerid) == 7) {
				if(!GateInfo[E_GATE_LSPDGATE][E_GATE_STATUS]) {
					GateInfo[E_GATE_LSPDGATE][E_GATE_STATUS] = 1;
					MoveDynamicObject(GateInfo[E_GATE_LSPDGATE][E_GATE_OBJECT], 1590.056640625,-1637.974609375,7.3683304786682, 2.0);
					SetTimerEx("GateClose", 10000, false, "i", GateInfo[E_GATE_LSPDGATE][E_GATE_OBJECT]);
					Send(playerid,0x15AAEAAA,"* Ворота открыты на 10 секунд, проезжайте!");
				}
			}
		} else if(IsPlayerInRangeOfPoint(playerid, 15.0, -2062.6289, -96.4922, 35.1641)) {
			if(GetFracID(playerid) == 11 || TakingLesson[playerid]) {
				if( !GateInfo[E_GATE_LICBARRIER][E_GATE_STATUS]) {
					GateInfo[E_GATE_LICBARRIER][E_GATE_STATUS] = 1;
					MoveDynamicObject(GateInfo[E_GATE_LICBARRIER][E_GATE_OBJECT], -2056.89990234, -100.02700043, 34.94699860+0.015, 0.015, 0.00000000,0.00000000,90.00000000); //object(barrierturn) (1)
					SetTimerEx("GateClose", 7000, false, "i", GateInfo[E_GATE_LICBARRIER][E_GATE_OBJECT]);
					ProxDetector(30.0, playerid, "* Заскрипел шлагбаум.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
		
		return 1;
	}
	
	if(PRESSED(KEY_AIM) && GetPlayerWeapon(playerid) == 0) {
		wait(playerid);
		
		switch(Rac::GetPlayerState(playerid)) {
			case PLAYER_STATE_ONFOOT : {
				new c = ClosestVeh(playerid, 5.1);
				if(c != INVALID_VEHICLE_ID) {
					GetCoordBootVehicle(c, vehx, vehy, vehz);
					if(IsPlayerInRangeOfPoint(playerid, 1.5, vehx, vehy, vehz)) {
						VehicleBoot{c} = !VehicleBoot{c};
						GetVehicleParamsEx(c,engine,light,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(c,engine,light,alarm,doors,bonnet,VehicleBoot{c},objective);
					} else {
						GetCoordBonetVehicle(c, vehx, vehy, vehz);
						if(IsPlayerInRangeOfPoint(playerid, 1.4, vehx, vehy, vehz)) {
							VehicleBonnet{c} = !VehicleBonnet{c};
							GetVehicleParamsEx(c,engine,light,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(c,engine,light,alarm,doors,VehicleBonnet{c},boot,objective);
						}
					}
					if(Pl::Info[playerid][pJob] == 6) {
						switch(GetVehicleType(GetVehicleModel(c))) {
							case VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AUTO : {
								if(JobWaitTime[playerid] != 0) return Send(playerid, COLOR_GREY, "* Невозможно чинить/заправлять слишком часто, качайте скилл!");
					
								new fuel, found;
								if(!IsAMehCar(c)) {
									foreach(new i : JobVehicles[JOB_MECHANIC]) {
										if(IsVehicleClosestForPlayer(playerid, i, 20.0)) {
											found=1;
											Pl::Info[playerid][pMechSkill] ++;
											switch(Pl::Info[playerid][pMechSkill]) {
												case 50 : Send(playerid, COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 2, Вы можете добавить больше Топлива к любым Автомобилям Игроков.");
												case 100 : Send(playerid, COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 3, Вы можете добавить больше Топлива к любым Автомобилям Игроков.");
												case 200 : Send(playerid, COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 4, Вы можете добавить больше Топлива к любым Автомобилям Игроков.");
												case 400 : Send(playerid, COLOR_YELLOW, "* Ваш Автомобильный Навык Механика - теперь Уровень 5, Вы можете добавить больше Топлива к любым Автомобилям Игроков.");
											}
											break;
										}
									}
								} else {
									found=1;
								}
								if(found) {
									switch(Pl::Info[playerid][pMechSkill]) {
										case 0..50		: fuel = 15, JobWaitTime[playerid] = 120;
										case 51..100	: fuel = 25, JobWaitTime[playerid] = 80;
										case 101..200	: fuel = 35, JobWaitTime[playerid] = 60;
										case 201..300 	: fuel = 45, JobWaitTime[playerid] = 40;
										case 301..400 	: fuel = 55, JobWaitTime[playerid] = 30;
										case 401..501 	: fuel = 65, JobWaitTime[playerid] = 20;
										default 		: fuel = 65, JobWaitTime[playerid] = 20;
									}

									found=0;
									foreach(new p: vehiclePassengers[c]) {
										if(GetPlayerState(p) == 2) {
											found++;
											format(temp, sizeof temp, "Механик %s починил и заправил машину %s", GetName(playerid), GetName(p));
											break;
										}
									}
									
									if(Benzin{c} < 100) Benzin{c} += fuel;
									Rac::RepairVehicle(c);
									if(!found) format(temp, sizeof temp, "Автомеханик %s починил и заправил машину", GetName(playerid));
									ProxDetector(15.0, playerid, temp, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								} else {
									Send(playerid, COLOR_GREY, "* Рядом с вами нет машины механика!");
								}
							}
						}
					}
				}
			}
		}
		return 1;
	}

	if(PRESSED(KEY_LOOK_BEHIND)) {
		wait(playerid);
		
		switch(Rac::GetPlayerState(playerid)) {
			case PLAYER_STATE_ONFOOT : {
				if(IsPlayerInRangeOfPoint(playerid, 2, 372.75192261, 166.50007629, 1007.38281250)) {
					if(!GateInfo[E_GATE_GOVDOOR][E_GATE_STATUS]) {
						if(IsACop(playerid) || GetFracID(playerid) == 7) {
							GateInfo[E_GATE_GOVDOOR][E_GATE_STATUS] = 1;
							MoveDynamicObject(GateInfo[E_GATE_GOVDOOR][E_GATE_OBJECT], 374.19226074, 166.50007629, 1007.38281250, 2.0);
							SetTimerEx("GateClose", 5000, false, "i", GateInfo[E_GATE_GOVDOOR][E_GATE_OBJECT]);
							Send(playerid,0x15AAEAAA,"* Дверь открыта, проходите!");
						}
						else Send(playerid, COLOR_GREY,"* Вы не законник!");
					}
				} else if(IsPlayerInRangeOfPoint(playerid, 2.5, 363.94100952148,187.08000183105,1020.125)) {
					if(!GateInfo[E_GATE_SFMCDOOR][E_GATE_STATUS]) {
						if(GetFracID(playerid) == 4) {
							GateInfo[E_GATE_SFMCDOOR][E_GATE_STATUS] = 1;
							MoveDynamicObject(GateInfo[E_GATE_SFMCDOOR][E_GATE_OBJECT], 362.40301513672,187.05000305176,1020.125, 2.0);
							SetTimerEx("GateClose", 5000, false, "i", GateInfo[E_GATE_SFMCDOOR][E_GATE_OBJECT]);
							Send(playerid,0x15AAEAAA,"* Дверь открыта, проходите!");
						}
						else Send(playerid, COLOR_GREY,"* Вы не медик!");
					}
				} else if(IsPlayerInRangeOfPoint(playerid, 2, 246.5634,72.0044,1003.6406)) {
					if(!GateInfo[E_GATE_LSPDDOOR][E_GATE_STATUS]) {
						if(IsACop(playerid) || GetFracID(playerid) == 7) {
							GateInfo[E_GATE_LSPDDOOR][E_GATE_STATUS] = 1;
							MoveDynamicObject(GateInfo[E_GATE_LSPDDOOR][E_GATE_OBJECT], 247.005905, 72.448440, 1006.912902, 2.0);// открытое положение
							SetTimerEx("GateClose", 6000, false, "i", GateInfo[E_GATE_LSPDDOOR][E_GATE_OBJECT]);
							Send(playerid,0x15AAEAAA,"* Решётка открыта, проходите!");
						}
						else Send(playerid, COLOR_GREY,"* Вы не законник!");
					}
				} else if(IsPlayerInRangeOfPoint(playerid, 2.0, 228.24499512,151.34700012,1003.64300537)) {
					if(!GateInfo[E_GATE_FBIDOOR_1][E_GATE_STATUS]) {
						if(IsACop(playerid) || GetFracID(playerid) == 7) {
							GateInfo[E_GATE_FBIDOOR_1][E_GATE_STATUS] = 0;
							MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_1][E_GATE_OBJECT], 228.24400330,151.34700012,1006.19598389, 2.0, 0.00000000,0.00000000,269.49462891);
							SetTimerEx("GateClose", 6000, false, "i", GateInfo[E_GATE_FBIDOOR_1][E_GATE_OBJECT]);
							Send(playerid,0x15AAEAAA,"* Решётка открыта, проходите!");
						}
						else Send(playerid, COLOR_GREY,"* Вы не законник!");
					}
				} else if(IsPlayerInRangeOfPoint(playerid, 2.0, 228.21899414,161.11799622,1003.64300537)) {
					if(!GateInfo[E_GATE_FBIDOOR_2][E_GATE_STATUS]) {
						if(IsACop(playerid) || GetFracID(playerid) == 7) {
							GateInfo[E_GATE_FBIDOOR_2][E_GATE_STATUS] = 1;
							MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_2][E_GATE_OBJECT], 228.21899414, 161.11700439, 1006.19598389, 2.0, 0.00000000,0.00000000,270.24169922);
							SetTimerEx("GateClose", 6000, false, "i",GateInfo[E_GATE_FBIDOOR_2][E_GATE_OBJECT]);
							Send(playerid,0x15AAEAAA,"* Решётка открыта, проходите!");
						}
						else Send(playerid, COLOR_GREY,"* Вы не законник!");
					}
				} else if(IsPlayerInRangeOfPoint(playerid, 2.0, 230.89100647,169.83099365,1003.64300537)) {
					if(!GateInfo[E_GATE_FBIDOOR_3][E_GATE_STATUS]) {
						if(IsACop(playerid) || GetFracID(playerid) == 7) {
							GateInfo[E_GATE_FBIDOOR_3][E_GATE_STATUS] = 1;
							MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_3][E_GATE_OBJECT], 230.89100647, 169.83000183, 1006.19598389, 2.0, 0.00000000,0.00000000,179.99450684);
							SetTimerEx("GateClose", 6000, false, "i", GateInfo[E_GATE_FBIDOOR_3][E_GATE_OBJECT]);
							Send(playerid,0x15AAEAAA,"* Решётка открыта, проходите!");
						}
						else Send(playerid, COLOR_GREY,"* Вы не законник!");
					}
				} else if(IsPlayerInRangeOfPoint(playerid, 2.0, 275.57101440,189.32000732,1007.79199219)) {
					if(!GateInfo[E_GATE_FBIDOOR_4][E_GATE_STATUS]) {
						if(IsACop(playerid) || GetFracID(playerid) == 7) {
							GateInfo[E_GATE_FBIDOOR_4][E_GATE_STATUS] = 1;
							MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_4][E_GATE_OBJECT], 275.57000732, 189.31900024, 1010.26898193, 2.0, 0.00000000,0.00000000,0.00000000);
							SetTimerEx("GateClose", 6000, false, "i", GateInfo[E_GATE_FBIDOOR_4][E_GATE_OBJECT]);
							Send(playerid,0x15AAEAAA,"* Решётка открыта, проходите!");
						}
						else Send(playerid, COLOR_GREY,"* Вы не законник!");
					}
				} else if(IsPlayerInRangeOfPoint(playerid, 2.0, 296.51800537,189.32499695,1007.79199219)) {
					if(!GateInfo[E_GATE_FBIDOOR_5][E_GATE_STATUS]) {
						if(IsACop(playerid) || GetFracID(playerid) == 7) {
							GateInfo[E_GATE_FBIDOOR_5][E_GATE_STATUS] = 1;
							MoveDynamicObject(GateInfo[E_GATE_FBIDOOR_5][E_GATE_OBJECT], 296.51800537, 189.32400513, 1010.29400635, 2.0, 0.00000000,0.00000000,0.00000000); //object(chinatgaragedoor)
							SetTimerEx("GateClose", 6000, false, "i", GateInfo[E_GATE_FBIDOOR_5][E_GATE_OBJECT]);
							Send(playerid,0x15AAEAAA,"* Решётка открыта, проходите!");
						}
						else Send(playerid, COLOR_GREY,"* Вы не законник!");
					}
				}
			}
		}
		return 1;
	}
	
	if(PRESSED(KEY_FIRE)) {
		wait(playerid);
		
		switch(Rac::GetPlayerState(playerid)) {
			case PLAYER_STATE_DRIVER : {
				new vehid = GetPlayerVehicleID(playerid);
				switch(GetVehicleType(GetVehicleModel(vehid))) {
					case VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AUTO : {
						if(Benzin{vehid} <= 0) {
							Send(playerid,COLOR_WHITE,"* Вызовите механика, нет топлива! (/service)");
							format(src, sizeof(src), "* %s попытался завести двигатель (неудачно)", GetName(playerid));
							ProxDetector(20.0, playerid, src, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~HET ЂEH€…HA", 5000, 5);
						} else if(Rac::GetVehicleHealth(vehid) < 450) {
							Send(playerid,COLOR_WHITE,"* Вызовите механика, машина повреждена! (/service)");
							format(src, sizeof(src), "* %s попытался завести двигатель (неудачно)", GetName(playerid));
							ProxDetector(20.0, playerid, src, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~C‡OMAHO", 7000, 5);
						} else {
							if(!isEngined{vehid}) {
								ToggleVehicleEngine(vehid, 1);
								format(src, sizeof(src), "* %s завел(а) двигатель", GetName(playerid));
								ProxDetector(20.0, playerid, src, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							} else {
								ToggleVehicleEngine(vehid, 0);
								format(src, sizeof(src), "* %s заглушил(а) двигатель", GetName(playerid));
								ProxDetector(20.0, playerid, src, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				}
			}
		}
		return 1;
	}
	
	if(PRESSED(KEY_ACTION)) {
		wait(playerid);
	
		switch(Rac::GetPlayerState(playerid)) {
			case PLAYER_STATE_DRIVER : {
				new veh = GetPlayerVehicleID(playerid);
				switch(GetVehicleType(GetVehicleModel(veh))) {
					case VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AUTO : {
						VehicleLight{veh} = !VehicleLight{veh};
						GetVehicleParamsEx(veh,engine,light,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(veh,engine,VehicleLight{veh},alarm,doors,bonnet,boot,objective);
					}
				}
			}
		}
		return 1;
	}
	
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source) {
	if(Pl::isAdmin(playerid, 3)) {
		if(!TogTP[clickedplayerid] && !Pl::isAdmin(playerid, 5)) return 1;

		GetPlayerPos(clickedplayerid, posx, posy, posz);
		if(GetPlayerState(playerid) == 2) {
			Rac::SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(clickedplayerid));
			Rac::SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));
			Rac::SetVehiclePos(GetPlayerVehicleID(playerid), posx, posy, posz);
		} else {
			Rac::SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(clickedplayerid));
			Rac::SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));
			Rac::SetPlayerPos(playerid, posx, posy, posz+1);
		}
	}
	return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ) {
	if(Pl::isAdmin(playerid, 4)) {
		if(GetPlayerState(playerid) == 2) {
			Rac::SetPlayerVirtualWorld(playerid, 0);
			Rac::SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ);
		} else {
			Rac::SetPlayerInterior(playerid, 0);
			Rac::SetPlayerVirtualWorld(playerid, 0);
			Rac::SetPlayerPos(playerid, fX, fY, fZ);
			Pl::Info[playerid][pLocal] = 0;
		}
	}
	return 1;
}

stock ChangeName(playerid) {
	new oldName[MAX_PLAYER_NAME], newName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, oldName, MAX_PLAYER_NAME);
	GetPVarString(playerid, "NewName", newName, MAX_PLAYER_NAME);
	DeletePVar(playerid, "NewName");
	
	if(SetPlayerName(playerid, newName) == 1) {
		new nlen = strlen(newName);
		new bidx = GetBizIndex(Pl::Info[playerid][pBizKey]);
		new hidx = Pl::Info[playerid][pHouseKey];

		if(IsValidHouse(hidx)) {
			if(strcmp(oldName, HouseInfo[hidx][hOwner], false) == 0) {
				strmid(HouseInfo[hidx][hOwner], newName, 0, nlen, MAX_PLAYER_NAME);
				UpdateHouse(hidx);
			}
		}
		if(IsValidBiz(bidx)) {
			if(strcmp(oldName, BizzInfo[bidx][bOwner], false) == 0) {
				strmid(BizzInfo[bidx][bOwner], newName, 0, nlen, MAX_PLAYER_NAME);
				UpdateBizz(bidx);
			}
		}
		
		for(new i; i < TOTAL_BIZZ; i++) {
			if(BizzInfo[i][bOwned] != 0) {
				if(strcmp(oldName, BizzInfo[i][bExtortion], false) == 0) {
					strmid(BizzInfo[i][bOwner], newName, 0, nlen, MAX_PLAYER_NAME);
					UpdateBizz(i);
				}
			}
		}
		
		format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableUsers__"` SET `Name`='%s' WHERE `ID`='%i'", newName, Pl::Info[playerid][pID]),
			Db::query(query,playerid);
		
		format(temp, sizeof temp, "** %s теперь изветен как %s (userid:%i)", oldName, newName, Pl::Info[playerid][pID]),
			SendLog("changename", temp);
			
		format(temp, sizeof temp,"*[RP]GrandWorld: %s теперь изветен как %s", oldName, newName),
			SendToAll(COLOR_LIGHTRED, temp);	
	} else {
		Send(playerid, COLOR_LIGHTRED, "* К сожалению при смене вашего ника произошла ошибка.");
		Send(playerid, COLOR_LIGHTRED, "* Обратитесь к администрации: /report");
	}
}

public OnVehicleStreamIn(vehicleid, forplayerid) {
	Iter_Add(inStreamVehicles[forplayerid], vehicleid);
	SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, gCarLock{vehicleid});
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid) {
	Iter_Remove(inStreamVehicles[forplayerid], vehicleid);
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success) {
	new _ip[16];
	if(!checkvar("bind","127.0.0.1")) {
		if(success) {
			foreach(new playerid : Player) {
				GetPlayerIp(playerid, _ip, 16);
				if(!strcmp(ip, _ip, true)) {
					return 1;
				}
			}
			format(temp, sizeof temp, "banip %s", ip);
			SendRconCommand(temp);
		} else {
			foreach(new playerid : Player) {
				GetPlayerIp(playerid, _ip, 16);
				if(!strcmp(ip, _ip, true)) {
					if(++Rac::Info[playerid][Rac::BadRconLogin] >= 2) {
						AddBanList(playerid, -1, 10*1440, "Попытка взлома RCON пароля.", 2);
						return 0;
					} else {
						GetPlayerName(playerid, plname, 24);
						format(temp, sizeof temp, "[AdmWarn] * %s[%i] попытался залогинистся как RCON-админ!", plname, playerid);
						SendToAdmin(COLOR_YELLOW, temp, 3, 3);
						return 0;
					}
				}
			}
			format(temp, sizeof temp, "banip %s", ip);
			SendRconCommand(temp);
		}
	}
	return 1;
}

stock GiveFracMoney(fracid, amount) {
	if(1 <= fracid <= 20) return FracInfo[fracid][fBank] += amount;
	return 0;
}

stock GetFracMoney(fracid) {
	if(1 <= fracid <= 20) return FracInfo[fracid][fBank];
	return 0;
}

stock GiveBankMoney(playerid, amount) Pl::Info[playerid][pBank] += amount;

public: ReduceTimer(playerid) ReduceTime[playerid] = 0;

public: TazerTime(playerid) PlayerUseTazed[playerid] = false;


stock IsAtATM(playerid) {
	for(new i; i < sizeof(ATMs); i++) {
		if(IsPlayerInRangeOfPoint(playerid, 2.0, ATMs[i][0], ATMs[i][1], ATMs[i][2])) {
			return 1;
		}
	}
	return 0;
}

stock IsAtGasStation(playerid) {
	for(new i; i < TOTAL_GASS; i++) {
		if(IsPlayerInRangeOfPoint(playerid, 8.0, GasStations[i][pX], GasStations[i][pY], GasStations[i][pZ])) {
			return 1;
		}
	}
	return 0;
}

stock GetName(playerid) {
	static name[24];
	GetPlayerName(playerid, name, 24);
	return name;
}

stock GetPIP(playerid) {
	static pip[16];
	GetPlayerIp(playerid, pip, 16);
	return pip;
}

stock GetAccountName(uid) {
	static name[24];
	format(query, sizeof query, "SELECT `Name` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `ID` = '%i'", uid);
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows() > 0) {
			Db::fetch_row(name);
		} else {
			strmid(name, "-", 0, 1, 24);
		}
	} else {
		strmid(name, "-", 0, 1, 24);
	}
	return name;
}

stock GetGangName(gangid) {
	static gangname[24];
	switch(gangid) {
		case 12 : strmid(gangname, "Flaming Cobra", 0, 13);
		case 14 : strmid(gangname, "Grove", 0, 5);
		case 15 : strmid(gangname, "Coronos", 0, 7);
		case 16 : strmid(gangname, "Ballas", 0, 6);
		case 17 : strmid(gangname, "Rifa", 0, 4);
		case 18 : strmid(gangname, "Vagos", 0, 5);
		case 19 : strmid(gangname, "Street Dogs", 0, 11);
		default : strmid(gangname, "посторонний", 0, 11);
	}
	return gangname;
}

native gpci(playerid, serial[], maxlen=sizeof serial);
stock GetPlayerSerial(playerid) {
	static serial[54];
	gpci(playerid, serial);
	return serial;
}

stock playerAFKUpdate(playerid) {
	static paused;
	static Float:x, Float:y, Float:z;
	paused = Rac::IsPlayerInPause(playerid);
	
	GetPlayerPos(playerid, x, y, z);
	if(AFKInfo[playerid][afk_Pos] == x) {
		if(paused) {
			AFKInfo[playerid][afk_Time][0] ++;
			AFKInfo[playerid][afk_Time][1] = 0;
		} else {
			AFKInfo[playerid][afk_Time][1] ++;
		}
	} else {
		if(!paused) {
			AFKInfo[playerid][afk_Time][0] = 0;
			AFKInfo[playerid][afk_Time][1] = 0;
			if(AFKInfo[playerid][afk_State] != 0) {
				AFKInfo[playerid][afk_State] = 0;
				Delete3DTextLabel(AFKInfo[playerid][afk_Text]);
			}
		}
	}

	switch(AFKInfo[playerid][afk_State]) {
		case 0 : {
			if(paused && AFKInfo[playerid][afk_Time][0] == AFK_TEXT_SET) {
				AFKInfo[playerid][afk_State] = 1;
				format(temp, sizeof temp, "{FF6347}[AFK: {ffffff}%i/%i {FF6347}секунд]", AFKInfo[playerid][afk_Time][0], MAX_AFK_TIME);
				AFKInfo[playerid][afk_Text] = Create3DTextLabel(temp, 0xFFFFFFFF, 0.00, 0.00, 10000.00, T_DIST, 0);
				Attach3DTextLabelToPlayer(AFKInfo[playerid][afk_Text], playerid, 0.0, 0.0, 0.3);
			} else if(!paused && AFKInfo[playerid][afk_Time][1] > MAX_AFK_TIME) {
				format(temp, sizeof temp,"[RP]GrandWorld: [%d]%s был кикнут сервером, причина: AFK", playerid, GetName(playerid));
				SendToAll(COLOR_GREY, temp);
				Kick(playerid);
			}
		}
		
		case 1 : {
			if(AFKInfo[playerid][afk_Time][0] > MAX_AFK_TIME) {
				if(Pl::isAdmin(playerid, DEV_ADMIN)) {
					AFKInfo[playerid][afk_Time][0] = AFK_TEXT_SET;
					format(temp, sizeof temp, "{FF6347}[AFK: {ffffff}%i/%i {FF6347}секунд]", AFKInfo[playerid][afk_Time], MAX_AFK_TIME);
					Update3DTextLabelText(AFKInfo[playerid][afk_Text], 0xFFFFFFFF, temp);
				} else {
					format(temp, sizeof temp,"[RP]GrandWorld: [%d]%s был кикнут сервером. Причина: AFK", playerid, GetName(playerid));
					SendToAll(COLOR_GREY, temp);
					Kick(playerid);
				}
			} else {
				format(temp, sizeof temp, "{FF6347}[AFK: {ffffff}%i/%i {FF6347}секунд]", AFKInfo[playerid][afk_Time][0], MAX_AFK_TIME);
				Update3DTextLabelText(AFKInfo[playerid][afk_Text], 0xFFFFFFFF, temp);
			}
		}
	}
	
	AFKInfo[playerid][afk_Pos] = x;
}

stock UpdateGI() {
	for(new p; p < sizeof(GangInfo); p++) {
		format(src, sizeof(src),
			"**GANG INFO**\n\n.::%s::.\nБизнесы: %i\nУважение: %i\nБанк: $%i\nЗахват с %i ранга",
			GetGangName(GangInfo[p][fID]),
			GangBiznes{GangInfo[p][fID]},
			GangInfo[p][gRespect],
			GetFracMoney(GangInfo[p][fID]),
			GetZRank(GangInfo[p][fID])
		);
		UpdateDynamic3DTextLabelText(GangInfo[p][gText], GetFracColor(GangInfo[p][fID]), src);
	}
	sorting::gnome_ex(GangInfo, gInfo, gRespect, sorting::desc);
	SaveGI();
}

stock IsAGang(playerid) {
	return (linearSearch(Gangs, GetFracID(playerid)) != -1);
}

stock IsAGangF(fracid) {
	return (linearSearch(Gangs, fracid) != -1);
}

stock GiveGangRespect(gangid, amount) {
	for(new i; i < sizeof(GangInfo); i++) {
		if(GangInfo[i][fID] == gangid) {
			return GangInfo[i][gRespect] += amount;
		}
	}
	return 0;
}

stock SetGangRespect(gangid, amount) {
	for(new i; i < sizeof(GangInfo); i++) {
		if(GangInfo[i][fID] == gangid) {
			return GangInfo[i][gRespect] = amount;
		}
	}
	return 0;
}

stock GetPlayerOrigin(playerid) {
	new origin[24];
	switch(Pl::Info[playerid][pOrigin]) {
		case 1: strunpack(origin, !"Европа", sizeof origin);
		case 2: strunpack(origin, !"Азиа", sizeof origin);
		case 3: strunpack(origin, !"Америка", sizeof origin);
		default: strunpack(origin,!"Европпа", sizeof origin);
	}
	return origin;
}

stock GetPlayerSex(playerid) {
	new sex[16];
	switch(Pl::Info[playerid][pSex]) {
		case 1: strunpack(sex, !"Мужской", sizeof sex);
		case 2: strunpack(sex, !"Женский", sizeof sex);
		default: strunpack(sex, !"-", sizeof sex);
	}
	return sex;
}

stock GetPlayerAge(playerid) {
	new age[5];
	if(Pl::Info[playerid][pAge]) {
		format(age, sizeof age, "%i", Pl::Info[playerid][pAge]);
	} else {
		format(age, sizeof age, "-");
	}
	return age;
}

stock IsAMafia(playerid) {
	switch(GetFracID(playerid)) {
		case 5, 6, 13: return 1;
	}
	return 0;
}
stock IsAMafiaF(fracid) {
	switch(fracid) {
		case 5, 6, 13: return 1;
	}
	return 0;
}

stock GetRankNameEx(playerid, dest[], len = sizeof(dest)) {
	format(query, sizeof query, "SELECT `r_name` FROM `"#__DbPrefix__""#__TableFracRanks__"` WHERE `f_id`='%i' AND `r_id`='%i'", GetFracID(playerid), Pl::Info[playerid][pRank]);
	if(Db::query(query) && Db::store_result()) if(Db::num_rows()) { Db::fetch_row(dest); } else { strunpack(dest, !"-", len); }
	return Db::free_result();
}

stock GetMaxRank(fracid) {
	format(query, sizeof query, "SELECT `r_id` FROM `"#__DbPrefix__""#__TableFracRanks__"` WHERE `f_id`='%i'", fracid);
	if(Db::query(query) && Db::store_result()) return Db::num_rows();
	return 0;
}

stock GetFracColor(fracid) {
	static const fracclr[] = {	
		COLOR_ALPHA,
		COLOR_BLUE,
		COLOR_INDIGO,
		COLOR_GREEN,
		COLOR_LIGHTRED,
		COLOR_ORANGERED,
		COLOR_YELLOW,
		COLOR_WHITE,
		COLOR_ALPHA,
		COLOR_ORANGE,
		COLOR_MAROON,
		COLOR_FLBLUE,
		COLOR_IVORY,
		COLOR_MIDNIGHTBLUE,
		0x10F441AA,
		//0x36D352AA,
		//COLOR_LIGHTBLUE,
		0x33CCFFAA,
		COLOR_MAGENTA,
		COLOR_MEDIUMAQUA,
		COLOR_GOLD,
		COLOR_BRIGHTRED,
		COLOR_GREY
	};
	if(0 <= fracid <= 20) {
		return fracclr[fracid];
	}
	return COLOR_ALPHA;
}

stock GetAdminRank(admlevel) {
	static dest[16];
	switch(admlevel) {
		case 1: strunpack(dest, !"Модератор 1lvl");
		case 2: strunpack(dest, !"Модератор 2lvl");
		case 3: strunpack(dest, !"Модератор 3lvl");
		case 4: strunpack(dest, !"Супермодератор");
		case 5: strunpack(dest, !"Администратор");
		default: strunpack(dest, !"-");
	}
	return dest;
}

stock GetHelperRank(hlvl) {
	new hrank[16];
	switch(hlvl) {
		case 1:		strunpack(hrank, !"Хелпер");
		case 2:		strunpack(hrank, !"Старший Хелпер");
		case 3:		strunpack(hrank, !"Главный Хелпер");
		default:	strunpack(hrank, !"Хелпер");
	}
	return hrank;
}

static sqlConnect() {
	Db::debug(true);
	new iniFile = iniOpen("mysql-config.ini");
	if(iniFile != INI_FILE_NOT_FOUND) {
		iniGet(iniFile, "mysql.host", Db::conf[0], 32);
		iniGet(iniFile, "mysql.user", Db::conf[1], 32);
		iniGet(iniFile, "mysql.base", Db::conf[2], 32);
		iniGet(iniFile, "mysql.pass", Db::conf[4], 36);
		iniGet(iniFile, "mysql.charset", Db::conf[3], 16);
		
		Db::handle = Db::connect(Db::conf[0], Db::conf[1], Db::conf[2], Db::conf[4]);
		format(temp, sizeof temp, "%s_general_ci", Db::conf[3]), Db::set_charset(temp);
		format(temp, sizeof temp, "SET NAMES '%s'",Db::conf[3]), Db::query(temp);
		return 1;
	}
	Db::debug(false);
	return 0;
}

stock Db::update() {
	if(fexist("update.sql")) {
		Db::debug(true);
		new File:fhandle = fopen("update.sql", io_read);
		while(fread(fhandle, temp)) {
			LoadFile(temp, query), Db::query(query);
		}
		fclose(fhandle);
		Db::debug(false);
	}
}


stock SetZRank(fracid, zrank) {
	if(1 <= fracid <= 20) {
		FracInfo[fracid][fRConf][zRANK] = zrank;
		UpdateGI();
	}
	return 1;
}

stock GetZRank(fracid) {
	if(1 <= fracid <= 20) {
		return FracInfo[fracid][fRConf][zRANK];
	}
	return 0;
}


stock SetBRank(fracid, zrank) {
	if(1 <= fracid <= 20) {
		FracInfo[fracid][fRConf][bRANK] = zrank;
	}
	return 1;
}

stock GetBRank(fracid) {
	if(1 <= fracid <= 20) {
		return FracInfo[fracid][fRConf][bRANK];
	}
	return 0;
}

stock SetGRank(fracid, zrank) {
	if(1 <= fracid <= 20) {
		FracInfo[fracid][fRConf][gRANK] = zrank;
	}
	return 1;
}

stock GetGRank(fracid) {
	if(1 <= fracid <= 20) {
		return FracInfo[fracid][fRConf][gRANK];
	}
	return 0;
}

stock Pl::isLogged(playerid) {
	if(IsPlayerConnected(playerid)) {
		return PlayerLogged{playerid};
	}
	return 0;
}

stock Pl::isRegged(playerid) {
	if(IsPlayerConnected(playerid)) {
		return Pl::Info[playerid][pID] == -1 ? 0 : 1;
	}
	return 0;
}

stock GameTextForAllGang(const mess[], time, type, ...) {
	if(numargs() > 3) {
		new fracid;
		for(new i=numargs()-1; i != 2; ++i) {
			fracid = getarg(i);
			GameTextForGang(fracid, mess, time, type);
		}
	} else {
		for(new i; i < sizeof Gangs; i++) {
			GameTextForGang(Gangs[i], mess, time, type);
		}
	}
	return 1;
}

stock GameTextForGang(gangid, const mess[], time, type) {
	foreach(new p: TeamPlayers[gangid]) {
		GameTextForPlayer(p, mess, time, type);
	}
}

stock Pl::Init(playerid) {
	GMTest					{playerid} = false;
	usePlusC				{playerid} = false;
	useBannyHop				{playerid} = false;
	InAntiDmZone			{playerid} = false;
	
	CP						[playerid] = 0;
	Fixr					{playerid} = 0;
	Wait					{playerid} = 0;
	ChosenSkin				[playerid] = 0;
	SelectCharPlace			[playerid] = 0;
	GettingJob				[playerid] = 0;
	ApprovedLawyer			[playerid] = 0;
	CallLawyer				[playerid] = 0;
	WantLawyer				[playerid] = 0;
	UsedFind				[playerid] = 0;
	CarOffer				[playerid] = INVALID_PLAYER_ID;
	CarPrice				[playerid] = 0;
	CarID					[playerid] = 0;
	CarCalls				[playerid] = 0;
	Condom					[playerid] = 0;
	acceptgruz				{playerid} = 0;
	TaxiCallTime			[playerid] = 0;
	STDPlayer				[playerid] = 0;
	SexOffer				[playerid] = INVALID_PLAYER_ID;
	SexPrice				[playerid] = 0;
	RepairOffer				[playerid] = INVALID_PLAYER_ID;
	RepairPrice				[playerid] = 0;
	RepairCar				[playerid] = 0;
	TalkingLive				[playerid] = INVALID_PLAYER_ID;
	LiveOffer				[playerid] = INVALID_PLAYER_ID;
	RefillOffer				[playerid] = INVALID_PLAYER_ID;
	RefillPrice				[playerid] = 0;
	DrugOffer				[playerid] = INVALID_PLAYER_ID;
	DrugPrice				[playerid] = 0;
	DrugGram				[playerid] = 0;
	AnimClear				[playerid] = 0;
	JailPrice				[playerid] = 0;
	Mobile					[playerid] = 255;
	Music					[playerid] = 0;
	TransportCost			[playerid] = 0;
	gLastCar				[playerid] = INVALID_VEHICLE_ID;
	BusCallTime				[playerid] = 0;
	PlayerTazeTime			[playerid] = 0;
	useknock				[playerid] = 0;
	TicketOffer				[playerid] = INVALID_PLAYER_ID;
	TicketMoney				[playerid] = 0;
	MatsHolding				[playerid] = 0;
	TransportTime			[playerid] = 0;
	TaxiAccepted			[playerid] = INVALID_PLAYER_ID;
	BusAccepted				[playerid] = INVALID_PLAYER_ID;
	Fell					[playerid] = 0;
	HireCar					[playerid] = INVALID_VEHICLE_ID;
	TransportValue			[playerid] = 0;
	TransportDriver			[playerid] = INVALID_PLAYER_ID;
	TransportDuty			[playerid] = 0;
	DrugIntoxic				[playerid] = 0;
	JobWaitTime				[playerid] = 0;
	Mobile					[playerid] = INVALID_PLAYER_ID;
	NameChange				{playerid} = 0;
	FindTime				[playerid] = 0;
	
	MedicCallTime			[playerid][0] = INVALID_PLAYER_ID;
	MedicCallTime			[playerid][1] = 0;
	MechanicCallTime		[playerid][0] = INVALID_PLAYER_ID;
	MechanicCallTime		[playerid][1] = 0;

	PickupInfo				[playerid][pOld] = -1;
	PickupInfo				[playerid][pDelay] = 0;
	
	AFKInfo					[playerid][afk_State] = 0;
	AFKInfo					[playerid][afk_Time][0] = 0;
	AFKInfo					[playerid][afk_Time][1] = 0;
	
	Pl::Drunk				[playerid] = 0;
	Pl::CarInt				[playerid] = INVALID_VEHICLE_ID;
	Pl::Stoned				[playerid] = 0;
	Pl::NetStats			[playerid] = INVALID_PLAYER_ID;
	Pl::DrunkTime			[playerid] = 0;
	Pl::CuffedTime			[playerid] = 0;
	Pl::Paintballing		[playerid] = 0;
	Pl::PaintballKills		[playerid] = 0;
	
	Pl::SpecInfo[playerid][pSpecID] = INVALID_PLAYER_ID;
	
	SyncInfo[playerid][sKillerID] = INVALID_PLAYER_ID;
	SyncInfo[playerid][sReasonID] = 255;

	Pl::Info[playerid][pReg]			= 0;
	Pl::Info[playerid][pSex]			= 0;
	Pl::Info[playerid][pAge]			= 0;
	Pl::Info[playerid][pExp]			= 0;
	Pl::Info[playerid][pJob]			= 0;
	Pl::Info[playerid][pBank]			= 0;
	Pl::Info[playerid][pWait]			= 10;
	Pl::Info[playerid][pLevel]			= 0;
	Pl::Info[playerid][pAdmin]			= 0;
	Pl::Info[playerid][pKills]			= 0;
	Pl::Info[playerid][pHelper]			= 0;
	Pl::Info[playerid][pOrigin]			= 1;
	Pl::Info[playerid][pCrimes]			= 0;
	Pl::Info[playerid][pDeaths]			= 0;
	Pl::Info[playerid][pArrested]		= 0;
	Pl::Info[playerid][pWantedL]		= 0;
	Pl::Info[playerid][pWantedD]		= 0;
	Pl::Info[playerid][pPhoneBook]		= 0;
	Pl::Info[playerid][pLottoNr]		= 0;
	Pl::Info[playerid][pPayCheck]		= 0;
	Pl::Info[playerid][pJailed]			= 0;
	Pl::Info[playerid][pJailTime]		= 0;
	Pl::Info[playerid][pMats]			= 0;
	Pl::Info[playerid][pDrugs]			= 0;
	Pl::Info[playerid][pLeader]			= 0;
	Pl::Info[playerid][pMember]			= 0;
	Pl::Info[playerid][pRank]			= 0;
	Pl::Info[playerid][pChar]			= 79;
	Pl::Info[playerid][pContractTime]	= 0;
	Pl::Info[playerid][pDetSkill]		= 0;
	Pl::Info[playerid][pSexSkill]		= 0;
	Pl::Info[playerid][pLawSkill]		= 0;
	Pl::Info[playerid][pMechSkill]		= 0;
	Pl::Info[playerid][pJackSkill]		= 0;
	Pl::Info[playerid][pCarSkill]		= 0;
	Pl::Info[playerid][pNewsSkill]		= 0;
	Pl::Info[playerid][pDrugsSkill]		= 0;
	Pl::Info[playerid][pLocal]			= 0;
	Pl::Info[playerid][pNumber]			= 0;
	Pl::Info[playerid][pHouseKey]		= 999;
	Pl::Info[playerid][pBizKey]			= 255;
	Pl::Info[playerid][pCarLic]			= 0;
	Pl::Info[playerid][pFlyLic]			= 0;
	Pl::Info[playerid][pBoatLic]		= 0;
	Pl::Info[playerid][pGunLic]			= 0;
	Pl::Info[playerid][pCarTime]		= 0;
	Pl::Info[playerid][pPayDay]			= 0;
	Pl::Info[playerid][pCDPlayer]		= 0;
	Pl::Info[playerid][pPayDayHad]		= 0;
	Pl::Info[playerid][pMutedTime]		= 0;
	Pl::Info[playerid][pMaskOn]			= false;
	Pl::Info[playerid][pWarns]			= 0;
	Pl::Info[playerid][pFuel]			= 0;
	Pl::Info[playerid][pRebuke]			= 0;
	Pl::Info[playerid][pReport]			= 0;
	Pl::Info[playerid][pFightstyle]		= 0;
	Pl::Info[playerid][pVip]			= 0;
	Pl::Info[playerid][pPasport][0]	= 0;
	Pl::Info[playerid][pPasport][1]	= 0;
	Pl::Info[playerid][pPasport][2]	= 0;
	Pl::Info[playerid][pContract]		= -1;


	Gag[playerid] = false;
	gOoc[playerid] = true;
	gFam[playerid] = true;
	gNews[playerid] = true;
	gDice[playerid] = false;
	OnAir[playerid] = false;
	TogTP[playerid] = true;
	OnDuty[playerid] = false;
	BigEar[playerid] = false;
	HidePM[playerid] = false;
	EditMode[playerid] = false;
	MedicBill[playerid] = false;
	SwitchKey[playerid] = false;
	AdminDuty[playerid] = false;
	WatchingTV[playerid] = false;
	WrongLogin[playerid] = 3;
	PlayerTied[playerid] = false;
	HelperDuty[playerid] = false;
	SpawnChange[playerid] = false;
	SuspectKill[playerid] = false;
	PhoneOnline[playerid] = true;
	MoneyMessage[playerid] = false;
	TakingLesson[playerid] = false;
	PlayerCuffed[playerid] = false;
	PlayerUseTazed[playerid] = false;

	SetPVarInt(playerid, "RouteID",			0xFFFF);
	SetPVarInt(playerid, "SelectedCar",		-1);
	SetPVarInt(playerid, "SelectedItem",	-1);
	SetPVarInt(playerid, "selectTeleport",	0xFFFF);
	
	SetPVarInt(playerid, "InvateFrac", 0);
	SetPVarInt(playerid, "AnsweredHelper", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "TransferPlayer", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "TransferAmount", 0);

	Rac::SetPlayerMoney(playerid, 0);
	Rac::SetPlayerHealth(playerid, 100.0);
	SetPlayerColor(playerid, COLOR_GRAD2);
	
	for(new slot; slot < 6; slot++) {
		DisablePlayerCheckpointEx(playerid, slot);
	}
	
	return 1;
}

stock Pl::RemoveWorldModel(playerid) {
	RemoveBuildingForPlayer(playerid, 2938, 1053.2607,2088.0015,10.8203, 20.0);
	return 1;
}

stock Bl::Init(playerid) {
	for(new i; i < MAX_FRAC; i++) {
		Bl::Info[playerid][Bl::onFrac][i] = 0;
		Bl::Info[playerid][Bl::Kills][i] = 0;
	}
	Bl::Info[playerid][Bl::isKilled] = false;
	Bl::Info[playerid][Bl::Observe] = INVALID_PLAYER_ID;
	Bl::Info[playerid][Bl::Finder] = INVALID_PLAYER_ID;
}

stock ClearCrime(playerid) {
	if(IsPlayerConnected(playerid)) {
		new len = strlen("********");
		strmid(Pl::Crime[playerid][pVictim], "********", 0,  len, 255);
		strmid(Pl::Crime[playerid][pAccusing], "•••••••••", 0, len, 255);
		strmid(Pl::Crime[playerid][pAccused], "•••••••••", 0, len, 255);
	}
}

stock Td::Init() {
	Logo[0] = Td::Create(473.000000, 6.000000, "~w~www.~g~rp-grandworld~w~.ru");
	Td::BackgroundColor(Logo[0], 255);
	Td::Font(Logo[0], 3);
	Td::LetterSize(Logo[0], 0.380000, 1.200000);
	Td::Color(Logo[0], 0xCCCCCCCC);
	Td::SetOutline(Logo[0], 1);
	Td::SetProportional(Logo[0], 1);

	
	Time = Td::Create(556.000000, 23.000000, "~w~00:00");
	Td::BackgroundColor(Time, 255);
	Td::Font(Time, 3);
	Td::LetterSize(Time, 0.480000, 2.399999);
	Td::Color(Time, 0xCCCCCCCC);
	Td::SetOutline(Time, 1);
	Td::SetProportional(Time, 1);

	new h, m, s; gettime(h, m, s);
	format(temp, sizeof temp, "~w~%02i:%02i", h, m);
	Td::SetString(Time, temp);
	
	return 1;
}

stock SetVehicleNumber(vehid, stringx[] = "none") {
	if(strcmp(stringx, "none", false)) {
		SetVehicleNumberPlate(vehid, stringx);
    } else {
		format(temp, sizeof temp, "%c%c%04i%c", ('A'+random(26)), ('A'+random(26)), vehid, ('A'+random(26)));
		SetVehicleNumberPlate(vehid, temp);
	}
}

stock ShowBizZones(playerid) {
	new fracid = GetFracID(playerid);
	for(new i; i < TOTAL_BIZZ; ++i) {
		Gz::ShowForPlayer(playerid, BizzInfo[i][bZone], GetFracColor(BizzInfo[i][bFrac]));
		if(BizzInfo[i][bOnBattle] == 1) {
			Gz::FlashForPlayer(playerid, BizzInfo[i][bZone], GetFracColor(BizzInfo[i][bAttack]));
			if(fracid == BizzInfo[i][bDefend] || fracid == BizzInfo[i][bAttack]) {
				SetPlayerCheckpointEx(playerid, ZAHVAT_ICON, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ], 19, 0, -1, -1, true);
			}
		}
	}
	return 1;
}

stock HideBizZones(playerid) {
	for(new i; i < TOTAL_BIZZ; ++i) {
		if(BizzInfo[i][bOnBattle] == 1) {
			Gz::StopFlashForPlayer(playerid, BizzInfo[i][bZone]);
		}
		Gz::HideForPlayer(playerid, BizzInfo[i][bZone]);
	}
	return 1;
}

stock Gz::ShowForGangs(zoneid, color) {
	for(new i; i < sizeof Gangs; i++) {
		foreach(new playerid : TeamPlayers[Gangs[i]]) {
			Gz::ShowForPlayer(playerid, zoneid, color);
		}
	}
	return 1;
}

stock Gz::HideForGangs(zoneid) {
	for(new i; i < sizeof Gangs; i++) {
		foreach(new playerid : TeamPlayers[Gangs[i]]) {
			Gz::HideForPlayer(playerid, zoneid);
		}
	}
	return 1;
}

stock Gz::FlashForGangs(zoneid, color) {
	for(new i; i < sizeof Gangs; i++) {
		foreach(new playerid : TeamPlayers[Gangs[i]]) {
			Gz::FlashForPlayer(playerid, zoneid, color);
		}
	}
	return 1;
}

stock Td::ShowForFrac(Text:textid, ...) {
	for(new fracid, i = numargs()-1; i != 0; --i) {
		if(1 <= (fracid=getarg(i)) <= 20) {
			foreach(new p : TeamPlayers[fracid]) {
				Td::ShowForPlayer(p, textid);
			}
		}
	}	
}

stock Td::HideForFrac(Text:textid, ...) {
	for(new fracid, i = numargs()-1; i != 0; --i) {
		if(1 <= (fracid=getarg(i)) <= 20) {
			foreach(new p : TeamPlayers[frac]) {
				Td::HideForPlayer(p, textid);
			}
		}
	}	
}

stock Pt::Init(playerid) {
	Td::Fuel[playerid] = CreatePlayerTextDraw(playerid, 8.000000, 321.000000, "~w~Benzin: ~b~loading");
	Pt::BackgroundColor(playerid, Td::Fuel[playerid], 255);
	Pt::Font(playerid, Td::Fuel[playerid], 3);
	Pt::LetterSize(playerid, Td::Fuel[playerid], 0.400000, 1.699998);
	Pt::Color(playerid, Td::Fuel[playerid],0xCCCCCCCC);
	Pt::SetOutline(playerid, Td::Fuel[playerid], 1);
	Pt::SetProportional(playerid, Td::Fuel[playerid], 1);
	
	Td::Status[playerid] = CreatePlayerTextDraw(playerid, 8.000000, 339.000000, "~w~Lock");
	Pt::BackgroundColor(playerid, Td::Status[playerid], 255);
	Pt::Font(playerid, Td::Status[playerid], 3);
	Pt::LetterSize(playerid, Td::Status[playerid], 0.400000, 1.699998);
	Pt::Color(playerid, Td::Status[playerid], 0xCCCCCCCC);
	Pt::SetOutline(playerid, Td::Status[playerid], 1);
	Pt::SetProportional(playerid, Td::Status[playerid], 1);
	
	Td::Name[playerid] = CreatePlayerTextDraw(playerid, 8.000000, 430.000000, "_");
	Pt::BackgroundColor(playerid, Td::Name[playerid], 255);
	Pt::Font(playerid, Td::Name[playerid], 3);
	Pt::LetterSize(playerid, Td::Name[playerid], 0.400000, 1.499999);
	Pt::Color(playerid, Td::Name[playerid],0xCCCCCCCC);
	Pt::SetOutline(playerid, Td::Name[playerid], 1);
	Pt::SetProportional(playerid, Td::Name[playerid], 1);
	
	Td::Spec[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "_");
	Pt::Alignment(playerid, Td::Spec[playerid], 2);
	Pt::BackgroundColor(playerid, Td::Spec[playerid], 255);
	Pt::Font(playerid, Td::Spec[playerid], 2);
	Pt::LetterSize(playerid, Td::Spec[playerid], 0.489998, 2.099999);
	Pt::Color(playerid, Td::Spec[playerid],0xCCCCCCCC);
	Pt::SetOutline(playerid, Td::Spec[playerid], 1);
	Pt::SetProportional(playerid, Td::Spec[playerid], 1);

	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid) {
	if(Rac::Info[ playerid ][ Rac::Warns ][ R::TUNING_HACK ] == 0) {
		AutoInfo[vehicleid][aTuning][GetVehicleComponentType(componentid)] = componentid;
		return 1;
	}
	
	return 0;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2) {
	if(color1==-1&&color2==-1) {
		for(new b; b < TOTAL_BIZZ; b++) {
			if(IsPlayerInSquare2D(playerid, 13.0, BizzInfo[b][bEnterX], BizzInfo[b][bEnterY])) {
				if(BizzInfo[b][bOwned]) {
					if(Rac::GetPlayerMoney(playerid) < BizzInfo[b][bEntranceCost]) {
						GameTextForPlayer(playerid, "~r~You dont have the cash", 5000, 1);
					} else {
						BizzInfo[b][bTill] += BizzInfo[b][bEntranceCost];
						Rac::GivePlayerMoney(playerid, -BizzInfo[b][bEntranceCost]);
						format(src, sizeof(src), "~r~repair price~w~~n~%i$", BizzInfo[b][bEntranceCost]);
						GameTextForPlayer(playerid, src, 5000, 1);
					}
				} else {
					if(Rac::GetPlayerMoney(playerid) < BizzInfo[b][bEntranceCost]) {
						GameTextForPlayer(playerid, "~r~You dont have the cash", 5000, 1);
					} else {
						BizzInfo[b][bTill] += 500;
						Rac::GivePlayerMoney(playerid, -500);
						GameTextForPlayer(playerid, "~r~repair price~w~~n~500$", 5000, 1);
					}
				}
				break ;
			}
		}
	} else {
		AutoInfo[vehicleid][aColor1] = color1;
		AutoInfo[vehicleid][aColor2] = color2;
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid) {
	AutoInfo[vehicleid][aPaintJob] = paintjobid;
	return 1;
}

stock IsAnyTrailerAttachedToVehicle(vehicleid) {
	return linearSearch(trailerID, GetVehicleModel(GetVehicleTrailer(vehicleid))) != -1;
}

stock UpdateTuning(vehid, type, id) {
	switch(type) {
		case 1: {
			if(!IsValidHouse(id)) return 0;
			format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableHouses__"` SET `Tuning`='");
			scf(query, src, "%d,%d,%d,%d,", AutoInfo[vehid][aTuning][0], AutoInfo[vehid][aTuning][1], AutoInfo[vehid][aTuning][2], AutoInfo[vehid][aTuning][3]);
			scf(query, src, "%d,%d,%d,%d,", AutoInfo[vehid][aTuning][4], AutoInfo[vehid][aTuning][5], AutoInfo[vehid][aTuning][6], AutoInfo[vehid][aTuning][7]);
			scf(query, src, "%d,%d,%d,%d,", AutoInfo[vehid][aTuning][8], AutoInfo[vehid][aTuning][9], AutoInfo[vehid][aTuning][10], AutoInfo[vehid][aTuning][11]);
			scf(query, src, "%d,%d,%d' ", AutoInfo[vehid][aTuning][12], AutoInfo[vehid][aTuning][13], AutoInfo[vehid][aPaintJob]);
			scf(query, src, "WHERE `ID`='%d'", id); Db::query(query); Db::free_result();
		}
		case 2: {
			format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableVehicles__"` SET `tuning`='");
			scf(query, src, "%d,%d,%d,%d,", AutoInfo[vehid][aTuning][0], AutoInfo[vehid][aTuning][1], AutoInfo[vehid][aTuning][2], AutoInfo[vehid][aTuning][3]);
			scf(query, src, "%d,%d,%d,%d,", AutoInfo[vehid][aTuning][4], AutoInfo[vehid][aTuning][5], AutoInfo[vehid][aTuning][6], AutoInfo[vehid][aTuning][7]);
			scf(query, src, "%d,%d,%d,%d,", AutoInfo[vehid][aTuning][8], AutoInfo[vehid][aTuning][9], AutoInfo[vehid][aTuning][10], AutoInfo[vehid][aTuning][11]);
			scf(query, src, "%d,%d,%d' ", AutoInfo[vehid][aTuning][12], AutoInfo[vehid][aTuning][13], AutoInfo[vehid][aPaintJob]);
			scf(query, src, "WHERE `ID`='%d'", id); Db::query(query); Db::free_result();
		}
		default: return 0;
	}
	return 1;
}

stock ResetTuning(vehid, type, id) {
	switch(type) {
		case 1: { // Для домаших авто
			if(IsValidHouse(id)) {
				RemoveTuning(vehid);
				format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableHouses__"` SET `Tuning`='0,0,0,0,0,0,0,0,0,0,0,0,0,0,3' WHERE `ID`='%i'", id);
				Db::query(query); Db::free_result();
			}
		}
		
		case 2: { // Для авто которые стоят по штату
			RemoveTuning(vehid);
			format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableVehicles__"` SET `tuning`='0,0,0,0,0,0,0,0,0,0,0,0,0,0,3' WHERE `ID`='%i'", id);
			Db::query(query);
			Db::free_result(); 
		}
		default: return 0;
	}
	return 1;
}

stock AddTuning(vehid) {
	for(new i; i < MAX_COMPONENT; i++) {
		if(AutoInfo[vehid][aTuning][i] != 0) {
			AddVehicleComponent(vehid, AutoInfo[vehid][aTuning][i]);
		}
	}
	if(AutoInfo[vehid][aPaintJob] != 3) {
		ChangeVehiclePaintjob(vehid, AutoInfo[vehid][aPaintJob]);
	}
	return 1;
}

stock RemoveTuning(vehid) {
	// Удаляем компоненты у авто
	for(new i; i < MAX_COMPONENT; i++) {
		RemoveVehicleComponent(vehid, AutoInfo[vehid][aTuning][i]);
		AutoInfo[vehid][aTuning][i] = 0;
	}
	AutoInfo[vehid][aPaintJob] = 3;
	ChangeVehiclePaintjob(vehid, AutoInfo[vehid][aPaintJob]);
	return 1;
}

stock ShowRankList(playerid, fracid) {
	clear(dialog);
	for(new i = RankNums[ fracid ]; i != 0; --i)
		scf(dialog, src, "%i.  %s\n", i, RankInfo[ fracid ][ i ]);

	SetPVarInt(playerid, "SelectedFrac", fracid);
	format(temp, sizeof(temp), "Ранги [%s]", FracInfo[ fracid ][ fName ]);
	SPD(playerid, D_CRANK, DIALOG_STYLE_LIST, temp, dialog, "SELECT", "CANCLE");
	return 1;
}

stock UpdateRank(fracid, rankid, rank[])
{
	new escname[36];
	Db::real_escape_string(rank, escname);
	strmid( RankInfo[ fracid ][ rankid ], rank, 0, strlen( rank ), 255 );
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableFracRanks__"` SET `r_name` = '%s' WHERE `f_id` = '%i' AND `r_id` = '%i'", escname, fracid, rankid);
	if( Db::query(query) && Db::affected_rows() ) return 1;
	
	return 0;
}

stock SetFracName(fracid, name[]) {
	if(1 <= fracid <= 20) {
		new escname[36];
		Db::real_escape_string(name, escname);
		strmid(FracInfo[fracid][fName], name, 0, strlen(name), 255);
		format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableFracInfo__"` SET `fName` = '%s' WHERE `fID` = '%i'", escname, fracid );
		if( Db::query(query) && Db::affected_rows() ) return 1;
	}
	return 0;
}

	// Бан игрока
stock AddBanList(playerid, adminid, mins, reason[], type = 1) {
	new unbandate, currdate = gettime();
	unbandate = currdate + mins*60;
	
	new safestr[36];
	Db::real_escape_string(reason, safestr);
	format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableBanned__"` (`user_id`,`admin_id`,`ip`,`date`,`unbandate`,`reason`) VALUES (");
	scf(query, src, "'%i','%i','%s',", Pl::Info[playerid][pID], adminid==-1 ? adminid : Pl::Info[adminid][pID], GetPIP(playerid));
	scf(query, src, "'%i','%i','%s')", currdate, unbandate, safestr);
	Db::query(query, playerid);
	
	switch(type) {
		case 1 : {
			format(query, sizeof query, "*[RP]GrandWorld: %s был забанен администратором %s, причина: %s", GetName(playerid), GetName(adminid), reason);
			SendToAll(COLOR_LIGHTRED, query);
		}
		case 2 : {
			format(src, sizeof(src), "* Вы были забанены, причина: %s", reason); 
			Send(playerid, COLOR_LIGHTRED, src);
			format(src, sizeof(src), "[AdmWarn] * %s[%i] был забанен, причина: %s", GetName(playerid), playerid, reason);
			SendToAdmin(COLOR_LIGHTRED, src, 1, 3);
		}
		case 3 : {
			format(src, sizeof(src), "* Вы были забанены, причина: %s", reason);
			Send(playerid, COLOR_LIGHTRED, src);
			format(src, sizeof(src), "[античит] * %s[%i] был забанен, причина: %s", GetName(playerid), playerid, reason);
			SendToAdmin(COLOR_LIGHTRED, src, 1, 1);
		}
		default : {
			format(query, sizeof query, "[SBAN] Админ %s забанил игрока %s[%i], причина: %s", GetName(adminid), GetName(playerid), playerid, reason);
			SendToAdmin(COLOR_LIGHTBLUE, query, 1, 3);
		}
	}
	return BanEx(playerid, reason);
}

	// Удаление игрока из бан-листа
stock RemoveBanList(userid) {
	new banIp[16];
	format(query, sizeof query, "SELECT `ip` FROM `"#__DbPrefix__""#__TableBanned__"` WHERE `user_id`='%i'", userid);
	if(Db::query(query) && Db::store_result()) {
		if(Db::fetch_row(banIp)) {
			format(query, sizeof query, "unbanip %.16s", banIp);
			SendRconCommand(query);
			Db::free_result();
			
			format(query, sizeof query, "DELETE FROM `"#__DbPrefix__""#__TableBanned__"` WHERE `user_id`='%i'", userid);
			return (Db::query(query) && Db::affected_rows());
		}
	}
	return 0;
}

stock isBanned(userid) {
	format(query, sizeof query, "SELECT `user_id` FROM `"#__DbPrefix__""#__TableBanned__"` WHERE `user_id` = '%i'", userid);
	if(Db::query(query) && Db::store_result()) return (Db::num_rows() > 0);
	return 0;
}

stock CheckBan(playerid) {
	if(Pl::Info[playerid][pID] != -1) {
		new unbandate, bandate, bip[16], aname[24], reason[64];
		format(query, sizeof query, "SELECT (SELECT `Name` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `ID`=`user_id`),(SELECT `Name` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `ID`=`admin_id`),`ip`,`date`,`unbandate`,`reason` FROM `"#__DbPrefix__""#__TableBanned__"` WHERE `user_id`='%i'", Pl::Info[playerid][pID]);
		if(Db::query(query) && Db::store_result()) {
			if(Db::fetch_row(query)) {
				sscanf(query, "p<|>s[24]s[24]s[16]iis[64]", plname, aname, bip, bandate, unbandate, reason);
				if((unbandate-gettime()) > 0) {
					new date_s[2][28];
					to_timestamp(date_s[0], bandate, "%d-%m-%Y, %X");
					to_timestamp(date_s[1], unbandate, "%d-%m-%Y, %X");
					
					format(dialog, sizeof dialog, "* Вы были забанены!\n\n");
					scf(dialog, src, "Забанил: %s\n", issqlnull(aname) ? ("System") : aname);
					scf(dialog, src, "Причина: %s\n", reason);
					scf(dialog, src, "Срок бана: %i дней\n", getday(unbandate, bandate));
					scf(dialog, src, "Дата бана: %s\n", date_s[0]);
					scf(dialog, src, "Дата разбана: %s\n", date_s[1]);
					return SPD(playerid, D_NONE, 0, "[RP]GRANDWORLD BAN. Введите /q для выхода.", dialog, "*", "");
				} else {
					RemoveBanList(Pl::Info[playerid][pID]);
				}
			}
		}
	}
	return 0;
}

stock ShowPlayerBanList(adminid, pname[]) {
	new bandate, unbandate, bip[16], aname[24], reason[64], date_s[2][28];
	format(query, sizeof query, "SELECT (SELECT `Name` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `ID`=`user_id`),(SELECT `Name` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `ID`=`admin_id`),`ip`,`date`,`unbandate`,`reason` FROM `"#__DbPrefix__""#__TableBanned__"` WHERE `user_id`=(SELECT `ID` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Name`='%s')", pname);
	if(Db::query(query) && Db::store_result()) {
		if(Db::fetch_row(query)) {
			sscanf(query, "p<|>s[24]s[24]s[16]iis[64]", pname, aname, bip, bandate, unbandate, reason);
			
			to_timestamp(date_s[0], bandate, "%d-%m-%Y, %X");
			to_timestamp(date_s[1], unbandate, "%d-%m-%Y, %X");
			
			format(dialog, sizeof dialog, "* Забаненый %s\n\n", pname);
			scf(dialog, src, "Забанил: %s\n", issqlnull(aname) ? ("System") : aname);
			scf(dialog, src, "Причина: %s\n", reason);
			scf(dialog, src, "Срок бана: %i дней\n", getday(unbandate, bandate));
			scf(dialog, src, "Дата бана: %s\n", date_s[0]);
			scf(dialog, src, "Дата разбана: %s\n\n", date_s[1]);
			SPD(adminid, D_BANLIST, 0, "[RP]GRANDWORLD BANS.", dialog, "UNBAN", "OK");
			SetPVarString(adminid, "UnbanPlayer", pname);
		} else {
			Send(adminid, COLOR_GREY, "* Этот игрок не забанен!");
		}
	}
	Db::free_result();
	return 1;
}

stock IsWrongWeponID(weponid)
{
	if(weponid <= 0) return true;
	for(new i; i < sizeof(wrongWeapon); i++) if(wrongWeapon[i] == weponid) return true;
	return false;
}

stock IsValidHouse(houseid) {
	if(1 <= houseid <= (sizeof(HouseInfo)-1)) return 1;
	return 0;
}

stock IsValidBiz(bizid) {
	if(0 <= bizid <= (sizeof(BizzInfo)-1)) return 1;
	return 0;
}

stock Jailed(playerid, jailtime, type = -1) {
	TempSkin[playerid] = GetPlayerSkin(playerid);
	SetPlayerSkin(playerid, GetJailedSkin(playerid));
	switch(type) {
		case 1 : {
			WantLawyer[playerid] = 1;
			Pl::Info[playerid][pJailed] = 1;
			Rac::SetPlayerInterior(playerid, 6);
			Rac::SetPlayerVirtualWorld(playerid, 1);
			Rac::SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
		}
		case 2 : {
			Pl::Info[playerid][pJailed] = 2;
			Rac::SetPlayerInterior(playerid, 1);
			Rac::SetPlayerVirtualWorld(playerid, 1);
			Rac::SetPlayerPos(playerid, 1401.3,-15.5,1002.9);
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453);
		}
		default : {
			Pl::Info[playerid][pJailed] = 1;
			Rac::SetPlayerInterior(playerid, 6);
			Rac::SetPlayerVirtualWorld(playerid, 1);
			Rac::SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
		}
	}
	SetPlayerWL(playerid, 0);
	Pl::Info[playerid][pJailTime] = jailtime;
	Pl::setSpawnInfo(playerid);
	Rac::ResetPlayerWeapons(playerid);

	return;
}

stock SetPlayerWL(playerid, lvl) {
	if(lvl > 6) lvl = 6; else if(lvl < 0) lvl = 0; 
	if(lvl) Iter_Add(WantedPlayers, playerid);
	else Iter_Remove(WantedPlayers, playerid);
	Pl::Info[playerid][pWantedL] = lvl;
	return SetPlayerWantedLevel(playerid, Pl::Info[playerid][pWantedL]);
}

stock CarUpgrade(playerid, hid, newveh) {
	if(HouseInfo[hid][hVeh] != 0) {
		ResetTuning(HouseInfo[hid][hAuto], 1, hid);
		DestroyVeh(HouseInfo[hid][hAuto]);
		HouseInfo[hid][hVeh] = newveh;
		AutoInfo[HouseInfo[hid][hAuto]][aMileage] = 0.0;

		HouseInfo[hid][hAuto] =
		CreateVeh(
			HouseInfo[hid][hVeh],
			HouseInfo[hid][hvX],
			HouseInfo[hid][hvY],
			HouseInfo[hid][hvZ],
			HouseInfo[hid][hvA],
			HouseInfo[hid][hvCol1],
			HouseInfo[hid][hvCol2],
			18000
		);

		AutoInfo[HouseInfo[hid][hAuto]][aMileage] = AutoInfo[0][aMileage];
		SetVehicleNumber(HouseInfo[hid][hAuto]);
		ToggleVehicleDoor(HouseInfo[hid][hAuto], false);
		Benzin{HouseInfo[hid][hAuto]} += 50;
	}
	else
	{
		GetPlayerPos(playerid, HouseInfo[hid][hvX], HouseInfo[hid][hvY], HouseInfo[hid][hvZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[hid][hvA]);
		HouseInfo[hid][hVeh] = newveh;
		HouseInfo[hid][hAuto] =
		CreateVeh(
			HouseInfo[hid][hVeh],
			HouseInfo[hid][hvX],
			HouseInfo[hid][hvY],
			HouseInfo[hid][hvZ],
			HouseInfo[hid][hvA],
			HouseInfo[hid][hvCol1],
			HouseInfo[hid][hvCol2],
			18000
		);
		AutoInfo[HouseInfo[hid][hAuto]][aMileage] = 0.0;
		SetVehicleNumber(HouseInfo[hid][hAuto]);
		ToggleVehicleDoor(HouseInfo[hid][hAuto], false);
		Benzin{HouseInfo[hid][hAuto]} += 50;
		Rac::PutPlayerInVehicle(playerid, HouseInfo[hid][hAuto], 0);
	}
	return 1;
}

stock Pl::setSpawnInfo(playerid) {
	new i;
	if(Pl::Paintballing[playerid] != 0) {
		i = random(sizeof(PaintballSpawns));
		SetSpawnInfo(
			playerid,
			1,
			Pl::Info[playerid][pChar],
			PaintballSpawns[i][0],
			PaintballSpawns[i][1],
			PaintballSpawns[i][2],
			0.0, 0, 0, 0, 0, 0, 0
		);
		
		return ;
	}
	
	if(Pl::Info[playerid][pJailed]) {
		switch(Pl::Info[playerid][pJailed]) {
			case 1: {
				SetSpawnInfo(
					playerid,
					1,
					GetJailedSkin(playerid),
					264.6288,
					77.5742,
					1001.0391,
					0.0, 0, 0, 0, 0, 0, 0
				);
			}
			case 2 : {
				SetSpawnInfo(
					playerid,
					1,
					GetJailedSkin(playerid),
					1413.5350,
					-28.7661,
					1000.9248,
					90.5306,
					0, 0, 0, 0, 0, 0
				);
			}
		}
		
		return ;
	}
	
	i = Pl::Info[playerid][pHouseKey];
	if(IsValidHouse(i) && !SpawnChange[playerid]) {
		SetSpawnInfo(
			playerid,
			1,
			Pl::Info[playerid][pChar],
			HouseInfo[ i ][hExitx],
			HouseInfo[ i ][hExity],
			HouseInfo[ i ][hExitz],
			0.0, 0, 0, 0, 0, 0, 0
		);
	} else {
		i = GetFracID(playerid);
		if(i > 0) {
			SetSpawnInfo(
				playerid,
				1,
				Pl::Info[playerid][pChar],
				SpawnInfo[ i ][spX],
				SpawnInfo[ i ][spY],
				SpawnInfo[ i ][spZ],
				SpawnInfo[ i ][spA],
				0, 0, 0, 0, 0, 0
			);
		} else {
			i = 20+Pl::Info[playerid][pOrigin];
			if(20 <= i <= 23) {
				SetSpawnInfo(
					playerid,
					1,
					Pl::Info[playerid][pChar],
					SpawnInfo[ i ][spX],
					SpawnInfo[ i ][spY],
					SpawnInfo[ i ][spZ],
					SpawnInfo[ i ][spA],
					0, 0, 0, 0, 0, 0
				);
			} else {
				SetSpawnInfo(
					playerid,
					1,
					Pl::Info[playerid][pChar],
					SpawnInfo[21][spX],
					SpawnInfo[21][spY],
					SpawnInfo[21][spZ],
					SpawnInfo[21][spA],
					0, 0, 0, 0, 0, 0
				);
			}
		}
	}
}

stock GetIDFormName(playername[]) {
	new id = -1;
	format(query, sizeof query, "SELECT `ID` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Name` = '%s'", playername);
	if(Db::query(query) && Db::store_result()) {
		id = Db::fetch_int();
	}
	return id;
}

stock OnPlayerPickupExit(playerid)
{
	if(PickupInfo[playerid][pDelay] != 0) PickupInfo[playerid][pDelay] --;
	else if(PickupInfo[playerid][pOld] != -1)
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, PickupInfo[playerid][pOldPos][0], PickupInfo[playerid][pOldPos][1], PickupInfo[playerid][pOldPos][2]))
			PickupInfo[playerid][pOld] = -1;
			
	return;
}

stock IsPlayerInHouse(playerid, houseid, Float:radi = 5.0)
{
	if(!IsValidHouse(houseid)) return 0;
	if(IsPlayerInRangeOfPoint(playerid, radi, HouseInfo[houseid][hExitx], HouseInfo[houseid][hExity], HouseInfo[houseid][hExitz])
	&& GetPlayerVirtualWorld(playerid) == HouseInfo[houseid][hVirtual]) return true;
	return false;
}

stock IsPlayerInBiz(playerid, bizid, Float:radi = 5.0)
{
	if(bizid < 0 || bizid > sizeof(BizzInfo)) return false;
	if(IsPlayerInRangeOfPoint(playerid, radi, BizzInfo[bizid][bExitX], BizzInfo[bizid][bExitY], BizzInfo[bizid][bExitZ])
	&& GetPlayerVirtualWorld(playerid) == BizzInfo[bizid][bVirtual]) return true;
	return false;
}

public OnQueryError(errorid, error[], resultid, extraid, callback[], querystr[], connectionHandle) {
	switch(errorid) {
		case CR_SERVER_LOST : {
			Db::reconnect(connectionHandle);
			Db::get_charset(temp, connectionHandle);
			printf("[Sql] Переподключение к mysql-серверу. Соеденение (ID: %i; C: %s)", connectionHandle, temp);
			if(strcmp(temp, Db::conf[3], true)) {
				format(src, sizeof src, "%s_general_ci", Db::conf[3]), Db::set_charset(src);
				format(src, sizeof src, "SET NAMES '%s'", Db::conf[3]), Db::query(src);
				format(src, sizeof src, "SET CHARACTER SET '%s'", Db::conf[3]), Db::query(src);
				printf("[Sql] Кодировка соеденения изменена с %s на %s", temp, Db::conf[3]);
			}
			if(strfind(querystr, "UPDATE", true) != -1) {
				Db::query(querystr, resultid, extraid);
			}
			return 1;
		}
	}
	
	format(temp, sizeof temp, "(Sql) Query error! ( eID: %i; callback: %s )", errorid, callback),
		SendToAdmin(COLOR_LIGHTBLUE, temp, 4, 5);
	format(temp, sizeof temp, "(Sql) Error: %s", error),
		SendToAdmin(COLOR_LIGHTBLUE, temp, 4, 5);
		
	SendLog("sqlerror",	querystr);
	DEBUG[ TOTAL_QUERY_ERRORS ]++;
	return 1;
}

stock AddPickup ( model, type, Float:x, Float:y, Float:z, vw = -1, text[] = " ", color = 0xFFFFFFFF, Float:offsetX = 0.0, Float:offsetY = 0.0, Float:offsetZ = 0.6 )
{
	if( text[ 0 ] != ' ' )
	{
		offsetX += x;
		offsetY += y;
		offsetZ += z;
		
		Add3DText(text, color, offsetX, offsetY, offsetZ, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw);
	}
	
	return CreateDynamicPickup(model, type, x, y, z, vw);
}

stock _AddPickup ( model, type, Float:pos[], vw = -1, text[] = " ", color = 0xFFFFFFFF, Float:offset[] = {0.0,0.0,0.6} )
{
	if( text[ 0 ] != ' ' )
	{
		offset[ 0 ] += pos[ 0 ];
		offset[ 1 ] += pos[ 1 ];
		offset[ 2 ] += pos[ 2 ];
		
		Add3DText(text, color, offset[ 0 ], offset[ 2 ], offset[ 3 ], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw);
	}
	
	return CreateDynamicPickup(model, type, pos[ 0 ], pos[ 1 ], pos[ 2 ], vw);
}

stock veh::Init() {
	comptruck[0] = CreateVeh(456,2747.96093750,-2470.80297852,13.89799976,270.00000000,-1,-1,600); // Component Truck <!-- Yankee -->
	CreateVeh(456,2747.80908203,-2461.05297852,13.89799976,270.00000000,-1,-1,600); // Component Truck <!-- Yankee -->
	CreateVeh(499,2766.23608398,-2476.12109375,13.74800014,0.0000000000,-1,-1,600); // Component Truck <!-- Benson -->
	CreateVeh(499,2765.88989258,-2465.82690430,13.57699966,0.0000000000,-1,-1,600); // Component Truck <!-- Benson -->
	CreateVeh(440,2748.37597656,-2440.50805664,13.85599995,270.00000000,-1,-1,600); // Component Truck <!-- Rumpo -->
	CreateVeh(440,2748.32617188,-2446.39843750,13.86100006,270.00000000,-1,-1,600); // Component Truck <!-- Rumpo -->
	CreateVeh(440,-1885.72399902,-193.76400757,18.60899925,270.00000000,-1,-1,600); // Component Truck <!-- Rumpo -->
	CreateVeh(440,-1885.72204590,-188.01600647,18.60899925,270.00000000,-1,-1,600); // Component Truck <!-- Rumpo -->
	CreateVeh(440,-1885.65002441,-182.01899719,18.60899925,270.00000000,-1,-1,600); // Component Truck <!-- Rumpo -->
	CreateVeh(456,-1851.85900879,-190.76899719,18.62500000,180.00000000,-1,-1,600); // Component Truck <!-- Yankee -->
	comptruck[1] = CreateVeh(414,-1882.40905762,-208.98300171,18.53599930,270.00000000,-1,-1,600); // Component Truck <!-- Mule -->
	
	//RENT
	rentcar[0] = CreateVeh(446,136.3884,-1876.5514,-0.5261,6.5833,-1,-1,600); // rent 740
	CreateVeh(446,136.7509,-1893.1879,-0.5489,359.0,-1,-1,600); // rent 741
	CreateVeh(454,136.9637,-1809.8191,0.0660,0.1662,-1,-1,600); // rent 742
	CreateVeh(453,136.0912,-1823.8280,-0.3418,359.7246,-1,-1,600); // rent 743
	CreateVeh(411,2135.3184,-1145.3363,24.4875,68.3714,-1,-1,600); // rent 744
	CreateVeh(411,526.0564,-1288.3293,16.9692,337.7194,-1,-1,600); // rent 745
	CreateVeh(415,532.7879,-1288.8862,17.0128,341.4303,-1,-1,600); // rent 746
	CreateVeh(429,538.5533,-1289.3280,16.9219,338.4478,-1,-1,600); // rent 747
	CreateVeh(451,544.5467,-1289.2100,16.9508,336.9098,-1,-1,600); // rent 748
	CreateVeh(541,549.3707,-1289.8551,16.8732,335.2836,-1,-1,600); // rent 749
	CreateVeh(409,-1986.44702148,307.38598633,35.42300034,270.00000000,5,5,600); //Stretch
	CreateVeh(409,-1986.61401367,301.41500854,35.42300034,270.00000000,0,0,600); //Stretch
	CreateVeh(400,-1955.73095703,301.67098999,35.60300064,143.99987793,-1,-1,600); //Landstalker
	CreateVeh(561,-1947.39904785,274.23999023,35.39799881,114.00000000,-1,-1,600); //Stratum
	CreateVeh(589,-1945.20495605,264.12600708,35.18600082,64.00000000,-1,-1,600); //Club
	CreateVeh(558,-1953.85998535,259.09298706,35.17300034,24.00000000,-1,-1,600); //Uranus
	rentcar[1] = CreateVeh(560,553.9877,-1290.2157,16.9525,333.8392,-1,-1,600); // rent 750
	
	CreateVeh(591,0.66930000,-377.47270000,6.08020000,1.84030000,-1,-1,600); //Trailer 3
	CreateVeh(435,-6.37590000,-377.50960000,6.03120000,1.82230000,-1,-1,600); //Trailer 1
	CreateVeh(591,-13.11540000,-377.66600000,6.09380000,358.75850000,-1,-1,600); //Trailer 3
	CreateVeh(435,-19.57920000,-377.77120000,6.07290000,359.77210000,-1,-1,600); //Trailer 1
	CreateVeh(591,-32.75900000,-377.77610000,6.06800000,2.68620000,-1,-1,600); //Trailer 3
	CreateVeh(450,-43.65100098,-1153.68395996,1.73199999,334.00000000,-1,-1,600); //Trailer 2
	CreateVeh(591,-49.62799835,-1150.57702637,1.73199999,334.00000000,-1,-1,600); //Trailer 3
	CreateVeh(435,-55.85300064,-1147.68005371,1.73199999,334.00000000,-1,-1,600); //Trailer 1
	CreateVeh(435,-63.07899857,-1144.43505859,1.73199999,334.00000000,-1,-1,600); //Trailer 1
	CreateVeh(435,-26.51590000,-377.77090000,6.10030000,2.00990000,-1,-1,600); //Trailer 1
	
	PlayerHaul[0][pCapasity] = 150;
	PlayerHaul[1][pCapasity] = 150;
	PlayerHaul[2][pCapasity] = 100;
	PlayerHaul[3][pCapasity] = 100;
	PlayerHaul[4][pCapasity] = 50;
	PlayerHaul[5][pCapasity] = 50;
	PlayerHaul[6][pCapasity] = 50;
	PlayerHaul[7][pCapasity] = 50;
	PlayerHaul[8][pCapasity] = 50;
	PlayerHaul[9][pCapasity] = 150;
	PlayerHaul[10][pCapasity] = 100;

	for(new i; i < MAX_VEHICLES; i++) {
		Benzin{i} = rndNum(20,30);
	}

	return 1;
}

stock area::Init() {
	for(new i; i < sizeof ClubInfo; i++) {
		ClubInfo[i][cArea] = CreateDynamicSphere(ClubInfo[i][cX], ClubInfo[i][cY], ClubInfo[i][cZ], ClubInfo[i][cS], ClubInfo[i][cVirtual]);
	}
	
	area::ASH = CreateDynamicSphere(-2027.1951, -114.5949, 1035.1719, 30.0, 1);
	area::Shamal = CreateDynamicSphere(1.8050, 23.2547, 1199.5938, 25.0);
	area::poppyField = CreateDynamicRectangle(-1199.7,-1065.9,-1002.0,-909.5, 0, 0, 0);
	area::jailField = CreateDynamicRectangle(264.2168+3.0, 264.2168-34.0, 77.5795+3.0, 77.5795-3.0);

	return 1;
}

stock obj::Init() {
	map::Load("maps/int_ambulance.map");		// ИНТЕРЬЕР В МАШИНЕ AMBULANCE
	map::Load("maps/resp_cnn.map");				// РЕСПА РЕПАРТЕРОВ
	map::Load("maps/bar_in_pirce.map");			// БАР НА ПИРСЕ
	map::Load("maps/alhambra.map",11);			// ALHAMBRA
	map::Load("maps/autovokzal.map");			// АВТОВОКЗАЛ
	map::Load("maps/int_shamal.map");			// ИНТЕРЬЕР ШАМАЛА
	map::Load("maps/lspd.map");					// БАЗА ПОЛИЦИИ
	map::Load("maps/aircraft_carrier.map");		// АВИАНОСЕЦ
	map::Load("maps/church.map",83);			// ЦЕРКОВЬ
	map::Load("maps/bomjatnik.map");			// БОМЖАТНИК
	map::Load("maps/db_pereezd.map");			// БД, ПЕРЕЕЗД
	map::Load("maps/fbi.map");					// ФБР
	map::Load("maps/autoshool.map");			// АВТОШКОЛА
	map::Load("maps/mapping.map");				// МАППИНГ ПО ШТАТУ
	map::Load("maps/flaming_cobra.map");		// БАЙКЕРЫ
	map::Load("maps/sfmc_map.map");				// МЕДЕКИ
	map::Load("maps/sd_object.map");			// SD объекты
	map::Load("maps/vagos_object.map");			// Вагос забор
	map::Load("maps/hitman_object.map");		// Хитманы забор
	map::Load("maps/lcn_object.map");			// La Cosa Nostra
	map::Load("maps/rm_objects.map");			// RM
	map::Load("maps/sfpd_objects.map");			// LSPD & SFPD
	map::Load("maps/fermers_objects.map");		// Колхоз забор
	map::Load("maps/gov_objects.map");			// Мэрия объекты
	map::Load("maps/cor_objects.map");			// Coronos объекты
	map::Load("maps/otel_ls.map");				// Отель ЛС
	map::Load("maps/grove_objects.map");		// Groove объекты

	// Ворота, двери, шлагбаумы и т.д
	GateInfo[E_GATE_SD]			[E_GATE_OBJECT] = AddObject(980,1017.50000000,2133.40820312,12.59399986,0.00000000,0.00000000,90.00000000); //object(airportgate) (1)
	GateInfo[E_GATE_MED]		[E_GATE_OBJECT] = AddObject(10184,-2666.6979980469,577.875,15.800000190735,0.00000000,0.00000000,90.00000000);
	GateInfo[E_GATE_CNN]		[E_GATE_OBJECT] = AddObject(10184,773.53601074,-1330.10705566,13.92199993,0.00000000,0.00000000,268.75000000); //object(sfcopdr) (1)
	GateInfo[E_GATE_LCN]		[E_GATE_OBJECT] = AddObject(980,1264.04602051,-2048.85009766,61.09500122,0.00000000,0.00000000,0.00000000); //object(airportgate) (1) //Pickup:lcntp vor
	GateInfo[E_GATE_ARMY]		[E_GATE_OBJECT] = AddObject(988,96.800,1920.376,18.183,0.0,0.0,-90.000); // вроде ворота армии в пустыне
	GateInfo[E_GATE_TAXI]		[E_GATE_OBJECT] = AddObject(980,-1771.3582763672, 985.01013183594, 25.74254989624, 0.000000, 0.000000, 91.309509277344,-1,-1,-1,200.0); //taksitam vor
	GateInfo[E_GATE_RIFA]		[E_GATE_OBJECT] = AddObject(980,-2127.4970703125, -80.352951049805, 37.093704223633, 0.000000, 0.000000, 0.000000,-1,-1,-1,200.0); //Pickup:rifa vor
	GateInfo[E_GATE_RM_1]		[E_GATE_OBJECT] = AddObject(980,-2655.23974609,-224.56163025,6.21994114,0.00000000,0.00000000,0.00000000,-1,-1,-1,200.0); //object(airportgate) (1)Русская мафия
	GateInfo[E_GATE_RM_2]		[E_GATE_OBJECT] = AddObject(980,-2801.18750000,-329.59487915,8.81994534,0.00000000,0.00000000,88.25000000,-1,-1,-1,200.0); //object(airportgate) (2) Русская мафия
	GateInfo[E_GATE_FBI_1]		[E_GATE_OBJECT] = AddObject(980,-1644.6872558594, 682.34130859375, 9.4969673156738, 0.000000, 0.000000, 90.041625976563,-1,-1,-1,200.0); //Cop vor
	GateInfo[E_GATE_FBI_2]		[E_GATE_OBJECT] = AddObject(980,-1571.8803710938, 661.48571777344, 8.9608917236328, 0.000000, 0.000000, 270.67565917969,-1,-1,-1,200.0); //Cop vor
	GateInfo[E_GATE_VAGOS]		[E_GATE_OBJECT] = AddObject(985,2797.19482422,-1599.36096191,11.63015938,0.00000000,0.00000000,1.25000000); //object(gate_autor) (1)
	GateInfo[E_GATE_YAKUZA]		[E_GATE_OBJECT] = AddObject(980,1525.08374023,2773.18920898,12.44526672,0.000000,0.000000,90.000000);
	GateInfo[E_GATE_KOLXOZ]		[E_GATE_OBJECT] = AddObject(986,-1050.39794922,-1345.34973145,131.00000000,0.00000000,0.00000000,335.00000000);// колхоз
	GateInfo[E_GATE_ZONA_1]		[E_GATE_OBJECT] = AddObject(2927,211.95550537,1875.55676270,13.93265820,0.00000000,0.00000000,0.00000000); //object(a51_blastdoorr) (1)
	GateInfo[E_GATE_ZONA_2]		[E_GATE_OBJECT] = AddObject(2927,216.06652832,1875.56518555,13.93265820,0.00000000,0.00000000,0.00000000); //object(a51_blastdoorr) (2)
	GateInfo[E_GATE_GROVE_1]	[E_GATE_OBJECT] = AddObject(986,2439.3210449219,-1664.3826904297,14.108180999756,0,0,90,-1,-1,-1,200.0);
	GateInfo[E_GATE_GROVE_2]	[E_GATE_OBJECT] = AddObject(985,2439.31640625,-1656.4501953125,14.104577064514,0,0,90,-1,-1,-1,200.0);
	GateInfo[E_GATE_FLAMING]	[E_GATE_OBJECT] = AddObject(986,707.53546143,-479.18560791,17.00000000,0.00000000,0.00000000,0.00000000); //object(gate_autol) (1) // байкеры ворота
	GateInfo[E_GATE_GOVDOOR]	[E_GATE_OBJECT] = AddObject(2949,372.75192261,166.50007629,1007.38281250,0.00000000,0.00000000,270.00000000,-1,-1,-1,200.0); // Object(kmb_lockeddoor) (1)
	GateInfo[E_GATE_SFMCDOOR]	[E_GATE_OBJECT] = AddObject(1566,363.94100952148,187.08000183105,1020.125,0,0,0,-1,-1,-1,200.0); // Object(kmb_lockeddoor) (1)
	GateInfo[E_GATE_BALLAS_1]	[E_GATE_OBJECT] = AddObject(986,952.16387939,-1098.89575195,24.20000076,0.00000000,0.00000000,270.00000000); //object(gate_autol) (6)
	GateInfo[E_GATE_BALLAS_2]	[E_GATE_OBJECT] = AddObject(985,952.30175781,-1106.84375000,24.21918869,0.00000000,0.00000000,271.99951172); //object(gate_autor) (1) баллас
	GateInfo[E_GATE_HITMAN_1]	[E_GATE_OBJECT] = AddObject(986,1032.59033203,-367.15255737,74.69999695,0.00000000,0.00000000,182.00000000); //object(gate_autol) (1) // Хитманы ворота
	GateInfo[E_GATE_HITMAN_2]	[E_GATE_OBJECT] = AddObject(985,1024.64013672,-367.33731079,74.69999695,0.00000000,0.00000000,180.50000000); //object(gate_autor) (1) // Хитманы воротa
	GateInfo[E_GATE_LSPDDOOR]	[E_GATE_OBJECT] = AddObject(985,247.005905,72.448440,1003.640625,0.000000,0.000000,1260.000000); //ворота
	GateInfo[E_GATE_LSPDGATE]	[E_GATE_OBJECT] = AddObject(980,1590.0573730469, -1637.974609375, 14.743314743042, 0.000000, 0.000000, 0.000000); //cop vorota
	GateInfo[E_GATE_CORONOS_1]	[E_GATE_OBJECT] = AddObject(986,1810.3319091797,-1885.6104736328,14.41153717041,0,0,270,-1,-1,-1,200.0);
	GateInfo[E_GATE_CORONOS_2]	[E_GATE_OBJECT] = AddObject(985,1810.3541259766,-1893.5799560547,14.405469894409,0,0,270,-1,-1,-1,200.0);
	GateInfo[E_GATE_FBIDOOR_1]	[E_GATE_OBJECT] = AddObject(2957,228.24499512,151.34700012,1003.64300537,0.00000000,0.00000000,269.50000000); //object(chinatgaragedoor) (1)
	GateInfo[E_GATE_FBIDOOR_2]	[E_GATE_OBJECT] = AddObject(2957,228.21899414,161.11799622,1003.64300537,0.00000000,0.00000000,270.24462891); //object(chinatgaragedoor) (2)
	GateInfo[E_GATE_FBIDOOR_3]	[E_GATE_OBJECT] = AddObject(2957,230.89100647,169.83099365,1003.64300537,0.00000000,0.00000000,180.00000000); //object(chinatgaragedoor) (3)
	GateInfo[E_GATE_FBIDOOR_4]	[E_GATE_OBJECT] = AddObject(2957,275.57101440,189.32000732,1007.79199219,0.00000000,0.00000000,0.00000000); //object(chinatgaragedoor) (4)
	GateInfo[E_GATE_FBIDOOR_5]	[E_GATE_OBJECT] = AddObject(2957,296.51800537,189.32499695,1007.79199219,0.00000000,0.00000000,0.00000000); //object(chinatgaragedoor) (5)
	GateInfo[E_GATE_LICBARRIER]	[E_GATE_OBJECT] = AddObject(968,-2056.89990234,-100.02700043,34.94699860,0.00000000,90.00000000,90.00000000); //object(barrierturn) (1)
	GateInfo[E_GATE_GOVBARRIER]	[E_GATE_OBJECT] = AddObject(980,1544.07495117,-1841.32495117,15.31999969,0.00000000,0.00000000,268.75000000); //object(airportgate) (1) // Мэрия
	GateInfo[E_GATE_LSPDBARRIER][E_GATE_OBJECT] = AddObject(968,1544.69995117, -1630.80004883,13.10000038,0.00000000,270.00000000,270.00000000);
	
	
	AddObject(19176, 2146.1540527344, 1603.0279541016, 1002.4520263672, 0, 0, 270); 				// Перегародка в инте СНН
	AddObject(3037,238.78999329,185.72000122,1004.22198486,90.00000000,0.00000000,270.00000000);	// Перегародка в инте ФБР
	AddObject(5302,371.95800781,155.18600464,1017.30401611,0.00000000,0.00000000,270.00000000);		// прегародка между мэрией и медиками
	AddObject(3749,1523.46533203,2773.23779297,15.53028965,0.00000000,0.00000000,270.00000000);		// YAKUZA
//	AddObject(14532,-2021.5040283,-114.8259964,1035.1550293,0.0000000,0.0000000,90.0000000);		// Телик в автошколе
	
	// Дверь в Борделе
	AddObject(19428,968.58398438,-52.86700058,1001.87500000,0.00000000,0.00000000,0.00000000);
	AddObject(19428,968.57702637,-54.03900146,1001.87500000,0.00000000,0.00000000,0.00000000);
	AddObject(1491,968.49798584,-52.43099976,1000.16699219,0.00000000,0.00000000,268.00000000);

	//Заглушки в инте баллас
	AddObject(2957,2176.69799805,1594.29797363,1000.59600830,0.00000000,0.00000000,0.00000000);
	AddObject(2957,2224.27294922,1598.30505371,1000.59600830,0.00000000,0.00000000,0.00000000);
	
	// Стена в инте хитов
	AddObject(19456,941.78802490,2113.65307617,1011.77398682,0.00000000,0.00000000,270.00000000, 8);
	AddObject(19456,941.78698730,2113.65209961,1015.17700195,0.00000000,180.00000000,90.00000000, 8);
	
	// ЗАВОД
	AddObject(2957,2522.2880859,-1301.9320068,1048.9090576,0.0000000,0.0000000,270.0000000, 2); //object(chinatgaragedoor) (1)
	AddObject(2957,2577.8959961,-1290.1700439,1044.4589844,0.0000000,0.0000000,89.7500000, 2); //object(chinatgaragedoor) (2)
	AddObject(1499,2574.9331055,-1279.9379883,1043.1250000,0.0000000,0.0000000,0.0000000, 2); //object(gen_doorint05) (1)

	return printf("Объекты загруженны! Всего объектов: %i", CountDynamicObjects());
}

stock pup::Init() {
	weapon1 = AddPickup(1239, 23,296.6332,-38.2177,1001.5156, -1); //аммо лс
	weapon2 = AddPickup(1239, 23,312.2767,-166.1406,999.6010, -1); //аммо лв
	weapon3 = AddPickup(1239, 23,291.2473,-84.0021,1001.5156, -1); //аммо лв
	weapon4 = AddPickup(1239, 23,287.5871,-106.4027,1001.5156, -1); //аммо копы

	barn[0] = AddPickup(1239, 14, -1060.2505,-1195.5034,129.5133, 0, "* Амбар *", 0x268DAEAA);
	barn[1] = AddPickup(1239, 14, 2162.8804,-1660.0884,15.0859, 0, "* Сдача наркоты *", 0x268DAEAA);
	
	AddPickup(1239, 14, 2799.0696,-2356.5588,13.6368, 0, "* Склад материалов *", 0x268DAEAA);
	AddPickup(1239, 14, -2119.6609,-178.9174,35.3203, 0, "* Продажа материалов *", 0x268DAEAA);
	AddPickup(1239, 14, 1173.2563,-1323.3102,15.3943, 0, "* Госпиталь *", 0x268DAEAA);
	AddPickup(1239, 14, 2029.5945,-1404.6426,17.2512, 0, "* Госпиталь *", 0x268DAEAA);
	AddPickup(1239, 14, 597.1277,-1248.6479,18.2734, 0, "* Пакаеты для материалов *", 0x268DAEAA);
	AddPickup(1239, 14, -2115.7246,-78.0859,35.3203, 0, "* Купить матиреалы *", 0x268DAEAA);
	AddPickup(1239, 14, 323.0781,1118.6022,1083.8828, -1, "* Накотики *", 0x268DAEAA);
	AddPickup(1239, 14, 253.9280,69.6094,1003.6406, -1, "* Оправдать преступника *", 0x268DAEAA); 
	AddPickup(1239, 14, 256.7318,188.2524,1008.1719, -1, "* Оправдать преступника *", 0x268DAEAA);

	//============================================================================
	ammozakona[0] = AddPickup(1239, 23, 313.863555, -133.838562, 999.601562, -1); // Пикап покупки оружия
	ammozakona[1] = AddPickup(1275, 23, 308.373474, -131.458786, 999.608337, 4); // Пикап маскировки
	ammozakona[2] = AddPickup(1275, 23, 308.373474, -131.458786, 999.608337, 555); // Пикап снены одежды Армия
	ammozakona[3] = AddPickup(1242, 23, 308.097839, -140.963485, 999.601562, 4); // Пикап хеала
	streamer::AppendArrayData(1, ammozakona[3], E_STREAMER_WORLD_ID, 4);
	streamer::AppendArrayData(1, ammozakona[3], E_STREAMER_WORLD_ID, 15);
	streamer::AppendArrayData(1, ammozakona[3], E_STREAMER_WORLD_ID, 555);

	//============================================================================
	//healash = AddPickup(1240,20,-2027.2445,-118.8632,1035.1719,11);
	healcnn = AddPickup(1240,20,2160.9500,1599.9874,999.9737,9);
	healfbi = AddPickup(1240,20,228.6945,154.2483,1003.0234,2);
	Parashut = AddPickup(1310,19,1544.4170,-1353.1135,329.4746,0);
	//============================================================================
	Bank[0] = AddPickup(1239, 23, 2308.8254,-13.2494,26.7422,-1);
	Bank[1] = AddPickup(1239, 23, 2309.4783,-8.4624,26.7422,-1, "Счета фракций/банд/мафий", 0xFF6347AA, 0, 0, 0.9);
	testpdd = AddPickup(1239, 23, -2022.3630,-116.5412,1035.1719, 11);
	//============================================================================
	boj = AddPickup(1239,23,756.4068,-48.0776,1000.7802,-1);
	Piza = AddPickup(1239,23,375.8968,-119.4092,1001.4995,-1);
	proba = AddPickup(1239,23,450.4001,-83.6821,999.5547,-1);
	buy = AddPickup(1239,23,-27.5047,-89.9378,1003.5469,-1);
	
	mak[0] = AddPickup(1239,23,375.7963,-67.9685,1001.5151,-1);
	mak[1] = AddPickup(1239,23,369.6309,-6.2745,1001.8589,-1);
	
	fire_ext = AddPickup(366, 1,369.8291,188.5891,1008.3893,7);
	
	prolaps[0] = AddPickup(1275, 23, 207.0993, -129.1810,1003.5078, -1, "* Одежда *", 0x268DAEAA);
	prolaps[1] = AddPickup(1275, 23, 209.6147, -8.2010,1005.2109, -1, "* Одежда *", 0x268DAEAA);
	saveTuning = AddPickup(1239, 23, -1663.8300,1208.2209,7.2546, 0, "* Регистрация тюнинга *", 0x268DAEAA);
	givepasport = AddPickup(1239, 23, 362.0381,173.6299,1008.0, 7, "* Паспортный стол *", 0x268DAEAA);
	
	hitpickup[0] = AddPickup(1275, 23, 948.5044,2104.2209,1011.0234, 8);
	hitpickup[1] = AddPickup(1210, 23, 963.1935,2101.9546,1011.0272, 8);
	
	helpp[0] = AddPickup(1239, 23, 2217.3362,-1146.7614,1025.7969, 1, "*** Помощь по игре ***", 0xFF6347AA);
	helpp[1] = AddPickup(1239, 23, 2271.1892,1647.2826,1084.2344,  1, "*** Помощь по игре ***", 0xFF6347AA);
	helpp[2] = AddPickup(1239, 23, 1474.5907,-1771.5734,18.7958, 0, "*** Помощь по игре ***", 0xFF6347AA);
		
	static const jnames[][] = {
		{"Безработным"},
		{"Детективом"},
		{"Адвокатом"},
		{"Проституткой"},
		{"Наркодилером"},
		{"Автоугонщиком"},
		{"Автомехаником"},
		{"Гандилером"},
		{"Автодилером"},
		{"Автобусником"},
		{"Дальнобойщиком"}
	};
	for(new i=1; i < sizeof(JobsInfo); i++) {
		format(temp, sizeof temp, "*** РАБОТА ***\nЗдесь можно устроится\n%s", jnames[JobsInfo[i][jID]]);
		JobsInfo[i][jP] = AddPickup(1239, 23, JobsInfo[i][jPos][0], JobsInfo[i][jPos][1], JobsInfo[i][jPos][2], JobsInfo[i][jV], temp, 0x268DAEAA);
	}
	
	CreateDynamicMapIcon(-1988.7166,1117.7463, 54.4725, 21, 0, -1, -1, -1, 200.0);
	CreateDynamicMapIcon(-2647.4233,695.6075,27.9370, 22, 0, -1, -1, -1, 200.0);

	return printf("Пикапы загружены. Всего пикапов: %d", CountDynamicPickups());
}

stock t3d::Init() {
	format(string_ah,sizeof(string_ah),">> Очередь допущенных к практической части экзамена: <<\n");
	ah_text = Add3DText(string_ah,0x42aaffFF,-2036.0808,-115.1422,1036, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 11);

	Add3DText("Правила Дорожного Движения\n/pdd", 0xFF6347AA, -2026.8050537,-113.6340027,1035.1550293+1, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 11);
    Add3DText("*** Продовольственный Склад ***",0xBFF600FF,2771.2314,-2437.2632,13.6377,40.0);
	Add3DText("*** ВНИМАНИЕ ***\n\
		Для получения водительских прав\n\
		необходимо сдать теорию у доски\n\
		и занять место в очереди к двери.",
		0xFF6347AA, -2024.8572, -118.6570, 1035.1719, 10.0,
		INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 11
	);

	for(new p; p < sizeof GangInfo; p++) {
		format(src, sizeof(src),
			"*** GANG INFO ***\n\n.::%s::.\nБизнесы: %d\nУважение: %d\n Банк: $%d\nЗахват с %d ранга",
			GetGangName(GangInfo[p][fID]),
			GangBiznes{GangInfo[p][fID]},
			GangInfo[p][gRespect],
			GetFracMoney(GangInfo[p][fID]),
			GetZRank(GangInfo[p][fID])
		);
		GangInfo[p][gText] = Add3DText(src, GetFracColor(GangInfo[p][fID]), GangInfo[p][gPosX], GangInfo[p][gPosY], GangInfo[p][gPosZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	}

	return printf("3D тексты загружены. Всего текстов: %d", CountDynamic3DTextLabels());
}

stock mnu::Init()
{
	BuyMenu = CreateMenu("24/7", 1, 10, 127, 150.0, 100.0);
	AddMenuItem(BuyMenu, 0, "Phone ($500)");
	AddMenuItem(BuyMenu, 0, "Scrath Card ($1000)");
 	AddMenuItem(BuyMenu, 0, "Phone Book ($5000)");
 	AddMenuItem(BuyMenu, 0, "Dice ($500)");
 	AddMenuItem(BuyMenu, 0, "Car's Key's ($5000)");
 	AddMenuItem(BuyMenu, 0, "Condom ($50)");
 	AddMenuItem(BuyMenu, 0, "CD-Player ($2500)");
	
	ClothesMenu = CreateMenu("~g~Clothes", 1, 15.0, 200.0, 150.0, 150.0);
	AddMenuItem(ClothesMenu, 0, "Next >>>");
	AddMenuItem(ClothesMenu, 0, "Prev <<<");
	AddMenuItem(ClothesMenu, 0, "Save");
	
	SkinMenu = CreateMenu("~b~Skins", 1, 15.0, 150.0, 100.0, 100.0);
	AddMenuItem(SkinMenu, 0, "Next >>>");
	AddMenuItem(SkinMenu, 0, "Prev <<<");
	AddMenuItem(SkinMenu, 0, "Save < >");
	
	IntMenu = CreateMenu("Interiors", 1, 15.0, 150.0, 100.0, 100.0);
	AddMenuItem(IntMenu, 0, "Next >>>");
	AddMenuItem(IntMenu, 0, "Prev <<<");
	AddMenuItem(IntMenu, 0, "Save < >");
	
	SAInteriorsMenu = CreateMenu("View", 1, 15.0, 150.0, 100.0, 100.0);
	AddMenuItem(SAInteriorsMenu, 0, "NEXT >>>");
	AddMenuItem(SAInteriorsMenu, 0, "PREV <<<");
	AddMenuItem(SAInteriorsMenu, 0, "EXIT < >");
	

	BarMenu = CreateMenu("Drinks", 1, 15.000, 150.0, 150.0);
	for(new i; i < sizeof(DrinkInfo); i++) {
		format(temp, sizeof temp, "%s [$%i]", DrinkInfo[i][dName], DrinkInfo[i][dPrice]);
		AddMenuItem(BarMenu, 0, temp);
	}

	Ammu1Menu = CreateMenu("BuyGuns", 1, 15.000, 150.0, 150.0);
	for(new i; i < sizeof(Ammu1Info); i++) {
		format(temp, sizeof temp, "> %s [$%i]", Ammu1Info[i][gName], Ammu1Info[i][gPrice]);
		AddMenuItem(Ammu1Menu, 0, temp);
	}

	Ammu2Menu = CreateMenu("BuyGuns", 1, 15.000, 150.0, 150.0);
	for(new i; i < sizeof(Ammu2Info); i++) {
		format(temp, sizeof temp, "> %s [$%i]", Ammu2Info[i][gName], Ammu2Info[i][gPrice]);
		AddMenuItem(Ammu2Menu, 0, temp);
	}

	getweapon = CreateMenu("GetGuns", 1, 15.000, 150.0, 150.0);
	for(new i; i < sizeof(Ammu1Info); i++) {
		format(temp, sizeof temp, "> %s [$%i]", Ammu1Info[i][gName], Ammu1Info[i][gPrice]);
		AddMenuItem(getweapon, 0, temp);
	}
	
	HitmanMenu = CreateMenu("Ammo", 1, 15.000, 200.0, 250.0, 200.0);
	for(new i; i < sizeof(HitmanAmmo); i++) {
		format(temp, sizeof temp, "> %s [$%i][R:%i]", HitmanAmmo[i][gName], HitmanAmmo[i][gPrice], HitmanAmmo[i][gRank]);
		AddMenuItem(HitmanMenu, 0, temp);
	}

	BurgerMenu = CreateMenu("Burger", 1, 15.000, 150.0, 150.0);
	for(new i; i < sizeof(BurgerInfo); i++) {
		format(temp, sizeof temp, "> %s [$%i]", BurgerInfo[i][bName], BurgerInfo[i][bPrice]);
		AddMenuItem(BurgerMenu, 0, temp);
	}

	PizaMenu = CreateMenu("PiZZa", 1, 15.000, 150.0, 150.0);
	for(new i; i < sizeof(PizzaInfo); i++) {
		format(temp, sizeof temp, "> %s [$%i]",  PizzaInfo[i][piName], PizzaInfo[i][pizza_price]);
		AddMenuItem(PizaMenu, 0, temp);
	}
	return 1;
}

stock ToggleVehicleEngine(vehid, value) {
	switch(GetVehicleType(GetVehicleModel(vehid))) {
		case VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AUTO : {
			if(!value) {
				isEngined{vehid}=false;
				Iter_Remove(enginedVehicles, vehid);
				GetVehicleParamsEx(vehid,engine,light,alarm,doors,bonnet,boot,objective);
			} else {
				isEngined{vehid}=true;
				Iter_Add(enginedVehicles, vehid);
				GetVehicleParamsEx(vehid,engine,light,alarm,doors,bonnet,boot,objective);
			}
			SetVehicleParamsEx(vehid,isEngined{vehid},light,alarm,doors,bonnet,boot,objective);
		}
	}
	return 1;
}

stock RespawnUnoccupiedVehicles() {
	new vehid, bool:occupied[MAX_VEHICLES char] = {false, ...};
	foreach(new i: Player) {
		if((vehid = GetPlayerVehicleID(i)) && Pl::isLogged(i)) {
			occupied{vehid} = true;
		}
	}
	
	for(new i; i < MAX_VEHICLES; i++) {
		if(!occupied{i}) {
			SetVehicleToRespawn(i);
		}
	}
}

stock ShowOnline(playerid, id) {
	new num;
	dialogtext[0]='\0';
	switch(id) {
		case 0: {
			foreach(new i : LeaderPlayers) {
				GetPlayerName(i, plname, 24);
				scf(dialogtext, src, "{FFFF00}%s: {FFFFFF}%s [id: %i]\n", FracInfo[Pl::Info[i][pLeader]][fName], plname, i);
			}
			if(!strlen(dialogtext)) strcat(dialogtext, "Нет лидеров онлайн!");
			return SPD(playerid, D_ONLINE+1, 0, "GrandWorld Leaders", dialogtext, "OK", "");
		}
		case 1: {
			Send(playerid, COLOR_LIGHTRED, "Лицензиары онлайн:");
			foreach(new i: TeamPlayers[11]) {
				GetPlayerName(i, plname, 24);
				format(temp, sizeof temp, "* Лицензиар: %s. Позвонить /call %i", plname, Pl::Info[i][pNumber]);
				Send(playerid, COLOR_YELLOW, temp);
			}
		}
		case 2: {
			new fracid = GetFracID(playerid);
			if(fracid != 0) {
				Send(playerid, COLOR_LIGHTRED, "Члены Вашей оганизации онлайн:");
				foreach(new i: TeamPlayers[fracid]) {
					num ++;
					GetPlayerName(i, plname, 24);
					if(AFKInfo[i][afk_State] != 0) {
						if(Pl::Info[i][pLeader] == fracid) {
							format(temp, sizeof temp, "* %i. %s [id:%i] - %s (%i) {AA3333}|LEADER| {33AA33}<AFK: %i sec>", num, plname, i, RankInfo[fracid][Pl::Info[i][pRank]], Pl::Info[i][pRank], AFKInfo[i][afk_Time][0]);
						} else {
							format(temp, sizeof temp, "* %i. %s [id:%i] - %s (%i) {33AA33}<AFK: %i sec>", num, plname, i, RankInfo[fracid][Pl::Info[i][pRank]], Pl::Info[i][pRank], AFKInfo[i][afk_Time][0]);
						}
					} else {
						if(Pl::Info[i][pLeader] == fracid) {
							format(temp, sizeof temp, "* %i. %s [id:%i] - %s (%i) {AA3333}|LEADER|", num, plname, i, RankInfo[fracid][Pl::Info[i][pRank]], Pl::Info[i][pRank]);
						} else {
							format(temp, sizeof temp, "* %i. %s [id:%i] - %s (%i)", num, plname, i, RankInfo[fracid][Pl::Info[i][pRank]], Pl::Info[i][pRank]);
						}
					}
					Send(playerid, COLOR_YELLOW, temp);
				}
			} else {
				Send(playerid, COLOR_GREY, "* Вы не состоите в этой организации!");
			}
		}
		
		case 3: {
			Send(playerid, COLOR_LIGHTRED, "Адвокаты онлайн:");
			foreach(new i: JobPlayers[2]) {
				GetPlayerName(i, plname, 24);
				format(temp, sizeof temp, "* Лицензиар: %s. Позвонить /call %i", plname, Pl::Info[i][pNumber]);
				Send(playerid, COLOR_YELLOW, temp);
			}
		}
		
		case 4: {
			Send(playerid, COLOR_GREY, "Админы онлайн:");
			foreach(new i : AdminPlayers) {
				num ++;
				GetPlayerName(i, plname, 24);
				format(temp, sizeof temp, "* %i. Админ: %s [id: %i]", num, plname, i);
				Send(playerid, COLOR_GREY, temp);
			}
		}
		
		case 5: {
			Send(playerid, COLOR_LIGHTRED, "Помощники онлайн:");
			foreach(new i : HelperPlayers) {
				num ++;
				GetPlayerName(i, plname, 24);
				format(temp, sizeof temp, "* %i. %s[id:%i] Hlvl: %i", num, plname, i, Pl::Info[i][pHelper]);
				Send(playerid, COLOR_YELLOW, temp);
			}
		}
		
		case 6: {
			new hid = Pl::Info[playerid][pHouseKey];
			if(!IsValidHouse(hid)) return Send(playerid, COLOR_GREY, "* У Вас нет дома!");
			Send(playerid, COLOR_LIGHTRED, "Квартиранты онлайн:");
			foreach(new i: Player) {
				if(i != playerid && Pl::isLogged(i) && hid == Pl::Info[i][pHouseKey]) {
					GetPlayerName(i, plname, 24);
					format(temp, sizeof temp, "* %s. Позвонить /call %i", plname, i, Pl::Info[i][pNumber]);
					Send(playerid, COLOR_YELLOW, temp);
				}
			}
		}
	}

	return 1;
}

static LoadVehicles() {
	new time = GetTickCount();
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableVehicles__"` ORDER BY `ID` ASC");
	if(Db::query(query) && Db::store_result()) {
		new rows = Db::num_rows();
		if(rows) {
			for(new i, veh; i < rows; i++) {
				Db::fetch_row(query);
				sscanf(query, "p<|>iiffffiiiifs[99]", VehicleInfo[i][vID], VehicleInfo[i][vModel], VehicleInfo[i][vPosX], VehicleInfo[i][vPosY], VehicleInfo[i][vPosZ],
				VehicleInfo[i][vPosA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], VehicleInfo[i][vRespTime], VehicleInfo[i][vJob], AutoInfo[0][aMileage], src);
				veh = CreateVeh(
					VehicleInfo[i][vModel],
					VehicleInfo[i][vPosX],
					VehicleInfo[i][vPosY],
					VehicleInfo[i][vPosZ],
					VehicleInfo[i][vPosA],
					VehicleInfo[i][vColor1],
					VehicleInfo[i][vColor2],
					VehicleInfo[i][vRespTime]
				);
				sscanf(src, "p<,>a<i>[14]i", AutoInfo[veh][aTuning], AutoInfo[veh][aPaintJob]);
				AddTuning(veh);
				SetVehicleNumber(veh);
				AutoInfo[veh][aMileage] = AutoInfo[0][aMileage];
				Iter_Add(JobVehicles[VehicleInfo[i][vJob]], veh);
				Benzin{veh} = rndNum(20,30);
				VehicleInfo[i][cID] = veh;
				TOTAL_VEHICLES ++;
			}
			printf(" + Vehicles successfully loaded! Count: %i (Ticks: %i)", TOTAL_VEHICLES, GetTickCount()-time);
		}
	}
	return 1;
}

static LoadATM() {
	ATMp[0] = CountDynamicPickups()+1;
	for(new i, Float:x, Float:y; i < sizeof ATMs; i++) {
		x = ATMs[i][0]; y = ATMs[i][1];
		AddObject(2942, ATMs[i][0], ATMs[i][1], ATMs[i][2], 0, 0, ATMs[i][3], 0);
		GetXYInFrontOfPoint(x, y, ATMs[i][3], -0.6);
		AddPickup(1239, 23, x, y, ATMs[i][2], 0);
	}
	ATMp[1] = CountDynamicPickups();
}

stock DestroyVeh(vehid) {
	if(isEngined{vehid}) {
		ToggleVehicleEngine(vehid, 0);
	}
	if(Iter_Count(vehiclePassengers[vehid])) {
		Iter_Clear(vehiclePassengers[vehid]);
	}
	AutoInfo[vehid][aColor1] = 0;
	AutoInfo[vehid][aColor1] = 0;
	AutoInfo[vehid][aRadio] = 0;
	AutoInfo[vehid][aUpdate] = 25;
	AutoInfo[vehid][aMats] = 0;
	AutoInfo[vehid][aDrugs] = 0;
	AutoInfo[vehid][aMaxMats] = 2000;
	AutoInfo[vehid][aMaxDrugs] = 100;
	AutoInfo[vehid][aPaintJob] = 3;
	Rac::SetVehicleHealth(vehid, 1000.0);
	return DestroyVehicle(vehid);
}

stock CreateVeh(model, Float:x, Float:y, Float:z, Float:a, color1, color2, resptime) {
	new vehid = CreateVehicle(model, x, y, z, a, color1, color2, resptime);
	AutoInfo[vehid][aColor1] = color1;
	AutoInfo[vehid][aColor1] = color2;
	AutoInfo[vehid][aX] = x;
	AutoInfo[vehid][aY] = y;
	AutoInfo[vehid][aZ] = z;
	AutoInfo[vehid][aA] = a;
	AutoInfo[vehid][aRadio] = 0;
	AutoInfo[vehid][aUpdate] = 0;
	AutoInfo[vehid][aMats] = 0;
	AutoInfo[vehid][aDrugs] = 0;
	AutoInfo[vehid][aMaxMats] = 2000;
	AutoInfo[vehid][aMaxDrugs] = 100;
	AutoInfo[vehid][aPaintJob] = 3;
	Rac::SetVehicleHealth(vehid, 1000.0);
	isEngined{vehid} = false;
	return vehid;
}

stock CreateZahvatTD(&Text:txdw) {
	txdw = Td::Create(320.000000, 100.000000, "~r~240");
	Td::Alignment(txdw, 2);
	Td::BackgroundColor(txdw, 255);
	Td::Font(txdw, 3);
	Td::LetterSize(txdw, 0.889998, 3.299998);
	Td::Color(txdw, -1);
	Td::SetOutline(txdw, 1);
	Td::SetProportional(txdw, 0);
	return 1;
}


stock get_tab(name[], l=sizeof name) {
	switch(strlen(name)) {
		case 0..5	: strcat(name, "\t\t\t\t", l);
		case 6..12	: strcat(name, "\t\t\t", l);
		case 13..20 : strcat(name, "\t\t", l);
		default		: strcat(name, "\t", l);
	}
}

#define mysql_get_row(%0,%1)	Db::fetch_row(%0), sscanf(%0, %1)
stock ShowOffline(playerid, offlineid) {
	new name[24], lastdate[28];
	dialogtext[0]='\0';
	
	switch(offlineid) {
		case 0 : {
			format(query, sizeof query, "SELECT `Name`,`Leader`,FROM_UNIXTIME(`Online`,'%%Y-%%m-%%d, %%H:%%i') FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Leader` >= '1' ORDER BY `Leader` ASC");
			if(Db::query(query) && Db::store_result()) {
				new num, rows = Db::num_rows();
				if(rows > 0) {
					new leaderid, leader;
					strcat(dialogtext, "Лидер\t\t\tПоследний везит\tФракция\n\n");
					while(rows--) {
						Db::get_row(query, "p<|>s[24]is[24]", name, leader, lastdate);
						if(1 <= leader <= 20) {
							leaderid = ReturnUser(name);
							if(!Pl::isLogged(leaderid)) {
								num ++;
								get_tab(name);
								scf(dialogtext, src, "{ffffff}• %s {AA3333}%s{ffffff} \t{%h}%s\n", name, lastdate, rgb<GetFracColor(leader)>, FracInfo[ leader ][ fName ]);
							}
						}
					}
				}
				
				if(!num) {
					SPD(playerid, D_OFFLINE+1, 0, "Лидеры оффлайн", "• Нет лидеров оффлайн •", "OK", "CANCEL");
				} else {
					format(temp, sizeof temp, "Лидеры оффлайн | Лидеров: %i", num);
					SPD(playerid, D_OFFLINE+1, 0, temp, dialogtext, "OK", "CANCEL");
				}
			}
		}
		
		case 1 : {
			format(query, sizeof query, "SELECT `Name`,`Helper`,FROM_UNIXTIME(`Online`,'%%Y-%%m-%%d, %%H:%%i') FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Helper` >= '1' ORDER BY `Helper` DESC");
			if(Db::query(query) && Db::store_result()) {
				new num, rows = Db::num_rows();
				if(rows) {
					new helperid, helper;
					strcat(dialogtext, "Хелпер\t\tПоследний везит\tРанг\n\n");
					while(rows--) {
						Db::get_row(query, "p<|>s[24]is[28]", name, helper, lastdate);
						if(1 <= helper <= 3) {
							helperid = ReturnUser(name);
							if(!Pl::isLogged(helperid)) {
								num ++;
								get_tab(name);
								scf(dialogtext, src, "{ffffff}• %s {AA3333}%s{ffffff} \t{33AA33}%s\n", name, lastdate, GetHelperRank(helper));
							}
						}
					}
				}
				
				if(!num) {
					SPD(playerid, D_OFFLINE+1, 0, "Хелперы оффлайн", "• Нет хелперов оффлайн •", "OK", "CANCEL");
				} else {
					SPD(playerid, D_OFFLINE+1, 0, "Хелперы оффлайн", dialogtext, "OK", "CANCEL");
				}
			}
		}
		
		case 2 : {
			format(query, sizeof query, "SELECT `Name`,`Admin`,FROM_UNIXTIME(`Online`,'%%Y-%%m-%%d, %%H:%%i') FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `Admin` >= '1' ORDER BY `Admin` DESC");
			if(Db::query(query) && Db::store_result()) {
				new num, rows = Db::num_rows();
				if(rows) {
					new adminid, admin;
					strcat(dialogtext, "Админ\t\t\tПоследний везит\tРанг\n\n");
					while(rows--) {
						Db::get_row(query, "p<|>s[24]is[24]", name, admin, lastdate);
						if(1 <= admin <= 5) {
							adminid = ReturnUser(name);
							if(!Pl::isLogged(adminid)) {
								num ++;
								get_tab(name);
								scf(dialogtext, src, "{FFFFFF} • %s {AA3333}%s{FFFFFF} \t{33AA33}%s\n", name, lastdate, GetAdminRank(admin));
							}
						}
					}
				}
				
				if(!num) {
					SPD(playerid, D_OFFLINE+1, 0, "Администраторы оффлайн", "• Нет админов оффлайн •", "OK", "CANCEL");
				} else {
					SPD(playerid, D_OFFLINE+1, 0, "Администраторы оффлайн", dialogtext, "OK", "CANCEL");
				}
			}
		}
	}

	return 1;
}

stock GetCarID(playerid) {
	for(new i; i < TOTAL_VEHICLES; i++) {
		if(IsPlayerInVehicle(playerid, VehicleInfo[i][cID])) {
			return i;
		}
	}
	return -1;
}

stock SafeMenu(playerid, hid, type = 0) {
	if(IsValidHouse(hid)) {
		switch(type) {
			case 0: {
				new count;
				for(new i; i < MAX_HWEAP; i++) if(HouseInfo[hid][hGuns][i] != 0) count ++;
				format(dialog, sizeof dialog, "Деньги\t\t[ {33AA33}$%i{ffffff} ]\t[ Лимит: {AA3333}$10000000 {ffffff}]\n", HouseInfo[hid][hSafe]);
				scf(dialog, src, "Наркотики\t[ {33AA33}%i{ffffff} ]\t\t[ Лимит: {AA3333}1000 грамм {ffffff}]\n", HouseInfo[hid][hDrugs]);
				scf(dialog, src, "Матиреалы\t[ {33AA33}%i{ffffff} ]\t\t[ Лимит: {AA3333}100000 матов {ffffff}]\n", HouseInfo[hid][hMats]);
				scf(dialog, src, "Оружие\t[ {33AA33}%i{ffffff} ]\t\t[ Лимит: {AA3333}6 слотов {ffffff}]", count);
				SPD(playerid, D_HMENU+14, DIALOG_STYLE_LIST, "[House Menu] > Сейф", dialog, "Выбор", "Назад");
			}
			case 1: {
				dialog[0] = '\0';
				for(new i; i < MAX_HWEAP; i++) {
					if(HouseInfo[hid][hGuns][i] != 0) {
						GetWeaponName(HouseInfo[hid][hGuns][i], temp, 24);
						scf(dialog, src, "[ {33AA33}%s{ffffff}\t\tПатрон: {AA3333}%i {ffffff}]\n", temp, HouseInfo[hid][hAmmos][i]);
					} else {
						strcat(dialog, "[ {33AA33}Пусто{ffffff}\t\tПатрон: {AA3333}0 {ffffff}]\n");
					}
				}
				SPD(playerid, D_HMENU+21, DIALOG_STYLE_LIST, "[House Menu] > Сейф > Оружие", dialog, "Выбор", "Назад");
			}
		}
		return 1;
	}
	return 0;
}

stock ClearHouse(houseid) {
	if(400 <= HouseInfo[houseid][hVeh] <= 611) {
		HouseInfo[houseid][hVeh] = 479;
		HouseInfo[houseid][hvCol1] = -1;
		HouseInfo[houseid][hvCol2] = -1;
		AutoInfo[HouseInfo[houseid][hAuto]][aMileage] = 0.0;
	}
	HouseInfo[houseid][hTv] = 0;
	HouseInfo[houseid][hHel] = 0;
	HouseInfo[houseid][hArm] = 0;
	HouseInfo[houseid][hLock] = 1;
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hMats] = 0;
	HouseInfo[houseid][hDrugs] = 0;
	HouseInfo[houseid][hSafe] = 0;
	for(new i; i < MAX_HWEAP; i++) {
		HouseInfo[houseid][hGuns][i] = 0;
		HouseInfo[houseid][hAmmos][i] = 0;
	}
	strmid(HouseInfo[houseid][hOwner], "The State", 0, strlen("The State"), 255);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
	DestroyDynamicMapIcon(HouseInfo[houseid][hMapIcon]);
	HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hEnterx],HouseInfo[houseid][hEntery],HouseInfo[houseid][hEnterz],31,0,-1,-1,-1, 200.0);
	HouseInfo[houseid][hPickup] = AddPickup(1273, 23, HouseInfo[houseid][hEnterx],HouseInfo[houseid][hEntery],HouseInfo[houseid][hEnterz]);
	return 1;
}

stock GetBizIndex(bizid) {
	for(new i; i < TOTAL_BIZZ; i++) {
		if(BizzInfo[i][bID] == bizid) return i;
	}
	return -1;
}

stock GetClosestBiz(playerid, Float:radi) {
	for(new i; i < TOTAL_BIZZ; i++) {
		if(IsPlayerInRangeOfPoint(playerid, radi, BizzInfo[i][bEnterX], BizzInfo[i][bEnterY], BizzInfo[i][bEnterZ])) {
			return i;
		}
	}
	return -1;
}


stock addContract(playerid, vectimid, headvalue) {
	GetPlayerName(vectimid, plname, 24);
	if(GetFracID(vectimid) == 8) {
		Rac::GivePlayerMoney(playerid, -headvalue);
		GiveFracMoney(8, percent(headvalue, 10));
		format(src, sizeof(src), "* Вы заказали %s, работа будет выполнена за $%i.", plname, headvalue);
		Send(playerid, COLOR_LIGHTBLUE, src);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	} else {
		if(TOTAL_CONTRACTS < sizeof ContractInfo) {
			new contratcid = TOTAL_CONTRACTS++;
			ContractInfo[contratcid][cHitman] = INVALID_PLAYER_ID;
			ContractInfo[contratcid][cVectim] = vectimid;
			ContractInfo[contratcid][cHeadValue] = headvalue;
			Rac::GivePlayerMoney(playerid, -headvalue);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(src, sizeof(src), "* Новый заказ на %s, за $%i.", plname, headvalue);
			sendToFamily(8, COLOR_YELLOW, src);
			format(src, sizeof(src), "* Вы заказали %s, работа будет выполнена за $%i.", plname, headvalue);
			Send(playerid, COLOR_LIGHTBLUE, src);
		} else {
			Send(playerid, COLOR_LIGHTBLUE, "* Сейчас заказы не принимаются. Попробуйте позже!");
		}
	}
	return 1;
}

stock setContract(playerid, contractid, hitmanid) {
	if(0 <= contractid <= TOTAL_CONTRACTS) {
		new playername[24], vectim[24], hitman[24];
		GetPlayerName(playerid, playername, 24);
		getname(ContractInfo[contractid][cVectim] -> vectim, hitmanid -> hitman);
		Pl::Info[hitmanid][pContract] = contractid;
		ContractInfo[contractid][cHitman] = hitmanid;
		format(src, sizeof(src), "* Хитман %s, выдал контракт %s на убийство %s(ID:%d), за $%d.", playername, hitman, vectim,
		ContractInfo[contractid][cVectim], ContractInfo[contractid][cHeadValue]);
		sendToFamily(8, COLOR_YELLOW, src);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlaySound(hitmanid, 1052, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock removeContract(contractid) {
	if(0 <= contractid <= TOTAL_CONTRACTS) {
		TOTAL_CONTRACTS--;
		if(ContractInfo[contractid][cHitman] != INVALID_PLAYER_ID) {
			Pl::Info[ContractInfo[contractid][cHitman]][pContract] = -1;
		}
		ContractInfo[contractid][cHitman] = ContractInfo[TOTAL_CONTRACTS][cHitman];
		ContractInfo[contractid][cVectim] = ContractInfo[TOTAL_CONTRACTS][cVectim];
		ContractInfo[contractid][cHeadValue] = ContractInfo[TOTAL_CONTRACTS][cHeadValue];
		return 1;
	}
	return 0;
}

stock showContract(playerid, dialogid) {
	new fracid, vectim, target[24], hitman[24];
	switch(dialogid) {
		case D_PORTABLE+1 : {
			for(new i; i < TOTAL_CONTRACTS; i++) {
				if(ContractInfo[i][cHitman] == INVALID_PLAYER_ID) {
					dialog[0] = '\0';
					vectim = ContractInfo[i][cVectim];
					fracid = GetFracID(vectim);
					getname(vectim -> target, ContractInfo[i][cHitman] -> hitman);
					LoadFile("dialog/portable/givehit.lst", src);
					format(dialog, sizeof dialog, src, target, vectim, Pl::Info[vectim][pLevel],
					FracInfo[fracid][fName], RankInfo[fracid][Pl::Info[vectim][pRank]], ContractInfo[i][cHeadValue]);
					SetPVarInt(playerid, "GiveHit", i);
					return SPD( playerid, dialogid, 1, "Назначить контракт", dialog, "Назначить", "Отмена");
				}
			}
			Send(playerid, COLOR_GREY, "* Нет контрактов!");
		}
		
		case D_PORTABLE+2 : {
			if(Pl::Info[playerid][pContract] != -1) {
				dialog[0] = '\0';
				vectim = ContractInfo[Pl::Info[playerid][pContract]][cVectim];
				fracid = GetFracID(vectim);
				getname(vectim -> target, ContractInfo[Pl::Info[playerid][pContract]][cHitman] -> hitman);
				LoadFile("dialog/portable/givehit.lst", src);
				format(dialog, sizeof dialog, src, target, vectim, Pl::Info[vectim][pLevel],
				FracInfo[fracid][fName], RankInfo[fracid][Pl::Info[vectim][pRank]], ContractInfo[Pl::Info[playerid][pContract]][cHeadValue]);
				SPD(playerid, dialogid, 0, "Мой контракт", dialog, "Отказатся", "Ok");
			} else {
				Send(playerid, COLOR_GREY, "* У Вас нет контрактов!");
			}
			
		}
	}
	
	return 1;
}


stock LoadFile(const patch[], dest[], len = sizeof dest) {
	if(!fexist(patch)) return printf ( "File \"%s\" is not found!", patch);
	new File: hFile, hBuf[256];
	hFile = fopen( patch, filemode: io_read );
	clear(dest);
	while(fread(hFile, hBuf)) strcat( dest, hBuf, len );
	fclose(hFile);
	return 1;
}

stock ShowDialog(playerid, dialogid, style, title[], filename[], buttom1[], buttom2[]) {
	static textbuff[3000];
	if(LoadFile(filename, textbuff)) {
		return SPD(playerid, dialogid, style, title, textbuff, buttom1, buttom2);
	}
	return SPD(playerid, D_NONE, 0, "ERROR", "* File dialog is not found!", "CLOSE", "");
}

stock Fc::GetInfo(vehicleid, format[]="", ...) {
	for(new i; i < FC_TOTAL; i++) {
		if(Fc::Info[i][Fc::Id][1] == vehicleid) {
			if(!isnull(format)) {
				new _f_pos, _p_pos = 2, _params = numargs();
				while(_p_pos < _params) {
					switch(format[_f_pos++]) {
						case 'i' : setarg(_p_pos, 0, i);
						case 'r' : setarg(_p_pos, 0, Fc::Info[i][Fc::RankId]);
						case 'f' : setarg(_p_pos, 0, Fc::Info[i][Fc::FracId]);
						case 'm' : setarg(_p_pos, 0, Fc::Info[i][Fc::Model]);
						case 'x' : setarg(_p_pos, 0, _:Fc::Info[i][Fc::RespPos][0]);
						case 'y' : setarg(_p_pos, 0, _:Fc::Info[i][Fc::RespPos][1]);
						case 'z' : setarg(_p_pos, 0, _:Fc::Info[i][Fc::RespPos][2]);
						case 'a' : setarg(_p_pos, 0, _:Fc::Info[i][Fc::RespPos][3]);
					}
					_p_pos++;
				}
			}
			return 1;
		}
	}
	return 0;
}

stock Fc::getFracId(vehicleid) {
	for(new i; i < MAX_FRAC; i++) {
		if(Iter_Contains(TeamVehicles[i], vehicleid)) {
			return i;
		}
	}
	return 0;
}

stock isTeamVehicle(fracid, vehicleid) {
	if(0 <= fracid <= MAX_FRAC) {
		if(1 <= vehicleid <= MAX_VEHICLES) {
			return Iter_Contains(TeamVehicles[fracid], vehicleid);
		}
	}
	return 0;
}

stock isJobVehicle(jobid, vehicleid) {
	if(0 <= jobid <= MAX_JOBS) {
		if(1 <= vehicleid <= MAX_VEHICLES) {
			return Iter_Contains(JobVehicles[jobid], vehicleid);
		}
	}
	return 0;
}

stock GetVehInfo(vehicleid, format[]="", ...) {
	for(new i; i < TOTAL_VEHICLES; i++) {
		if(VehicleInfo[i][cID] == vehicleid) {
			if(!isnull(format)) {
				new a, b = 2, params = numargs();
				while(b < params) {
					switch(format[a++]) {
						case 'i' : setarg(b, 0, i);
						case 'j' : setarg(b, 0, VehicleInfo[i][vJob]);
						case 'm' : setarg(b, 0, VehicleInfo[i][vModel]);
						case 'x' : setarg(b, 0, _:VehicleInfo[i][vPosX]);
						case 'y' : setarg(b, 0, _:VehicleInfo[i][vPosY]);
						case 'z' : setarg(b, 0, _:VehicleInfo[i][vPosZ]);
						case 'a' : setarg(b, 0, _:VehicleInfo[i][vPosA]);
					}
					b++;
				}
			}
			return 1;
		}
	}
	return 0;
}


stock Fc::IsEditMode(playerid) return (Pl::Info[playerid][pAdmin]>=5&&EditMode[playerid]);

stock Fc::IsForbiddenVeh(modelid) {
	return binarySearch(Fc::FORBIDDEN_VEH, modelid) != -1;
}

stock Fc::IsThereModel(fracid, modelid) {
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableFracModels__"` WHERE `frac_id` = '%i' AND `model_id` = '%i'", fracid, modelid);
	return ((Db::query(query) && Db::store_result()) && (Db::num_rows()>0));
}

stock Fc::ShowModel( playerid, fracid, dialogid) {
	format(query, sizeof query, "SELECT `model_id` FROM `"#__DbPrefix__""#__TableFracModels__"` WHERE `frac_id` = '%i'", fracid);
	if(Db::query(query) && Db::store_result()) {
		new rows = Db::num_rows();
		if(rows) {
			new model_id;
			clear(dialog);
			for( new i; i < rows; i++) {
				Db::fetch_row( query );
				sscanf( query, "i", model_id );
				scf( dialog, query, "%s\n", VehicleNames[ model_id-400 ], model_id );
			}
			if( Pl::Info[playerid][pAdmin] >= 5 && dialogid != D_ADD_FC && dialogid != D_LMENU+7 ) strcat( dialog, "------------\nДобавить");
			SPD( playerid, dialogid, DIALOG_STYLE_LIST, "Frac Models", dialog, "SELECT", "CANCEL");
		} else {
			if(Pl::Info[playerid][pAdmin] >= 5 && dialogid != D_ADD_FC && dialogid != D_LMENU+7) {
				SPD(playerid, dialogid, 2, "Frac Models", "Добавить", "Enter", "Cancle");
			} else {
				SPD(playerid, dialogid, 0, "Frac Models", "Нет моделей для выбора!", "ok", "");
			}
		}
		SetPVarInt( playerid, "SelectFrac", fracid);
		return 1;
	}
	return 0;
}

stock Fc::RecreateVehicle(idx) {
	if(0 <= idx < sizeof Fc::Info) {
		DestroyVeh(Fc::Info[idx][Fc::Id][1]);
		Fc::Info[idx][Fc::Id][1] = CreateVeh(
			Fc::Info[idx][Fc::Model],
			Fc::Info[idx][Fc::RespPos][0],
			Fc::Info[idx][Fc::RespPos][1],
			Fc::Info[idx][Fc::RespPos][2],
			Fc::Info[idx][Fc::RespPos][3],
			Fc::Info[idx][Fc::Color][0],
			Fc::Info[idx][Fc::Color][1],
			1200
		);
		return 1;
	}
	return 0;
}

stock Fc::Delete(idx) {
	if(0 <= idx < sizeof Fc::Info) {
		format(query, sizeof query, "DELETE FROM `"#__DbPrefix__""#__TableFracVehicles__"` WHERE `ID` = '%i'", Fc::Info[idx][Fc::Id][0]);
		if(Db::query(query) && Db::free_result()) {
			Fc::TOTAL --;
			DestroyVeh(Fc::Info[idx][Fc::Id][1]);
			
			for(new i; i < 2; i++) {
				Fc::Info[idx][Fc::Id][i] = Fc::Info[Fc::TOTAL][Fc::Id][i];
				Fc::Info[idx][Fc::Color][i] = Fc::Info[Fc::TOTAL][Fc::Color][i];
			}
			
			Fc::Info[idx][Fc::Model] = Fc::Info[Fc::TOTAL][Fc::Model];
			Fc::Info[idx][Fc::FracId] = Fc::Info[Fc::TOTAL][Fc::FracId];
		
			strmid(Fc::Info[idx][Fc::Number], Fc::Info[Fc::TOTAL][Fc::Number], 0, strlen(Fc::Info[Fc::TOTAL][Fc::Number]), 255);
			
			Fc::Info[idx][Fc::RespPos][0] = Fc::Info[Fc::TOTAL][Fc::RespPos][0];
			Fc::Info[idx][Fc::RespPos][1] = Fc::Info[Fc::TOTAL][Fc::RespPos][1];
			Fc::Info[idx][Fc::RespPos][2] = Fc::Info[Fc::TOTAL][Fc::RespPos][2];
			Fc::Info[idx][Fc::RespPos][3] = Fc::Info[Fc::TOTAL][Fc::RespPos][3];
			
			return 1;
		}
	}
	return 0;
}

stock name_to_id(string[], &modelid) {
	if('0' <= string[0] <= '9') {
		modelid = strval(string);
		if(400 <= modelid <= 611) return 1;
	} else {
		for(new i; i < sizeof(VehicleNames); i++) {
			if(strfind(VehicleNames[i], string, true) != -1) {
				modelid += i + 400;
				return 1;
			}
		}
	}
	return 0;
}

stock UpdateStuffTD(playerid, vehid, type) {
	if(IsPlayerConnected(playerid)) {
		new model = GetVehicleModel(vehid);
		format(src, sizeof src, "~w~VEHICLE: ~g~%s [id: %i]      %.1f (miles)", VehicleNames[model-400], model, AutoInfo[vehid][aMileage]);
		switch(type) {
			case 1 : scf(src, temp, "      MATS: ~r~%i/%i", AutoInfo[vehid][aMats], AutoInfo[vehid][aMaxMats]);
			case 2 : scf(src, temp, "      MAK: ~r~%i/%i", AutoInfo[vehicle][aDrugs], AutoInfo[vehicle][aMaxDrugs]);
			case 3 : scf(src, temp, "      PRODS: ~r~%i/%i", PlayerHaul[vehid-comptruck[0]][pLoad], PlayerHaul[vehid-comptruck[0]][pCapasity]);
		}
		Pt::SetString(playerid, Td::Name[playerid], src);
	}
	return 1;
}

static LoadSkins() {
	skin::addOfArray(100, {78, 79, 135, 200, 230, 212, 213});
	skin::addOfArray(101, {55, 152, 138, 201, 63, 54, 85});
	
	new time = GetTickCount();
	format(query, sizeof query, "SELECT `f_id`,`skin_id` FROM `"#__DbPrefix__""#__TableFracSkins__"`");
	if(Db::query(query) && Db::store_result()){
		if(Db::num_rows()) {
			while(Db::fetch_row(query)) {
				sscanf(query, "p<|>ii", query[0], query[1] );
				skin::add( query[0], query[1] );
			}
			sorting::gnome_ex(skin::data, skin::enum, skin::classid, sorting::asc, skin::total_count);
			printf(" + Skins successfully loaded! Count: %i [ Time: %i ticks ]", skin::total_count, GetTickCount()-time);
		}
	} else print(" + Table 'frac_skins' not found!");
}

static LoadRanks( ) {
	new fracid, rankid, rankname[36], time = GetTickCount();
	format( query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableFracRanks__"` ORDER BY `r_id`");
	if(Db::query(query) && Db::store_result()) {
		for(new i; i < MAX_RANK; i++) strmid(RankInfo[0][i], "-", 0, strlen("-"), 255);
		while(Db::fetch_row(query)) {
			sscanf(query, "p<|>iis[36]", fracid, rankid, rankname);
			if(RankNums[fracid] < MAX_RANK) {
				strmid(RankInfo[fracid][rankid], rankname, 0, strlen(rankname), 255);
				RankNums[fracid] ++;
			}
		}
		printf(" + Ranks successfully loaded! [ Time: %i ticks ]", GetTickCount()-time);
	} else {
		print(" + Table 'frac_ranks' not found!");
	}
}

stock ReloadRanks(fracid) {
	new rankid, rankname[36];
	format(query, sizeof query, "SELECT `r_id`,`r_name` FROM `"#__DbPrefix__""#__TableFracRanks__"` WHERE `f_id` = %i", fracid);
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows()) {
			strmid(RankInfo[0][0], "-", 0, strlen("-"), 255);
			sscanf(query, "p<|>is[36]", rankid, rankname);
			if(RankNums[fracid] < MAX_RANK) {
				strmid(RankInfo[fracid][rankid], rankname, 0, strlen(rankname), 255);
				RankNums[fracid] ++;
			}
		}
	}
}

static LoadPortals(){
	new allowed, time = GetTickCount();
	format(query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TablePickups__"` ORDER BY `id`");
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows()) {
			while(Db::fetch_row(query)) {
				sscanf(query, "P<|,>ia<i>[2]a<i>[2]a<i>[2]a<i>[2]a<f>[4]a<f>[4]i",
					Tp::Info[TOTAL_PORTAL][Tp::Id],
					Tp::Info[TOTAL_PORTAL][Tp::Model],
					Tp::Info[TOTAL_PORTAL][Tp::Type],
					Tp::Info[TOTAL_PORTAL][Tp::Inter],
					Tp::Info[TOTAL_PORTAL][Tp::World],
					Tp::Info[TOTAL_PORTAL][Tp::Portal1],
					Tp::Info[TOTAL_PORTAL][Tp::Portal2],
					allowed
				);
				Tp::Info[TOTAL_PORTAL][Tp::Pickup][0]=_AddPickup(Tp::Info[TOTAL_PORTAL][Tp::Model][0],Tp::Info[TOTAL_PORTAL][Tp::Type][0],Tp::Info[TOTAL_PORTAL][Tp::Portal1],Tp::Info[TOTAL_PORTAL][Tp::World][0]);
				Tp::Info[TOTAL_PORTAL][Tp::Pickup][1]=_AddPickup(Tp::Info[TOTAL_PORTAL][Tp::Model][1],Tp::Info[TOTAL_PORTAL][Tp::Type][1],Tp::Info[TOTAL_PORTAL][Tp::Portal2],Tp::Info[TOTAL_PORTAL][Tp::World][1]);
				binToArray(allowed, Tp::Info[TOTAL_PORTAL][Tp::Allowed], MAX_FRAC);
				
				if(++TOTAL_PORTAL >= sizeof Tp::Info) {
					break;
				}
			}
			printf(" + Portals successfully loaded! Count: %i [Time: %i ticks]", TOTAL_PORTAL, GetTickCount()-time);
		}
	}
	return 1;
}

static LoadAntiDmZones() {
	new index, time = GetTickCount();
	format( query, sizeof query, "SELECT * FROM `"#__DbPrefix__""#__TableAntidmzones__"` ORDER BY `id` ASC");
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows()) {
			while(Db::fetch_row(query)) {
				sscanf(query, "P<|,>iia<f>[4]", AntiDmInfo[index][e_AntiDmZoneId], AntiDmInfo[index][e_AntiDmWorld], AntiDmInfo[index][e_AntiDmCoord]);
				AntiDmInfo[index][e_AntiDmZone] = CreateDynamicSphere(
					AntiDmInfo[index][e_AntiDmCoord][0],
					AntiDmInfo[index][e_AntiDmCoord][1],
					AntiDmInfo[index][e_AntiDmCoord][2],
					AntiDmInfo[index][e_AntiDmCoord][3],
					AntiDmInfo[index][e_AntiDmWorld]
				);
				if(++index >= sizeof AntiDmInfo) {
					print("Array 'AntiDmInfo' overflow");
					break;
				}
			}
			TOTAL_ANTIDM_ZONES = index;
			printf(" + AntiDmZones successfully loaded! Count: %i [ Time: %i ticks ]", TOTAL_ANTIDM_ZONES, GetTickCount()-time);
		}
	}
}


/// :: ::: ::: BL ::: ::: ::
stock Bl::Add(playerid, accuser, reason[]) {
	new escstring[36];
	new currtime = gettime(), fracid = GetFracID(accuser);
	Db::real_escape_string(reason, escstring);
	format(query, sizeof query, "INSERT INTO `"#__DbPrefix__""#__TableBlacklist__"` (`f_id`,`accused`,`date`,`accuser`,`reason`,`lastvisit`) VALUES (");
	scf(query, src, "'%i','%i','%i',", fracid, Pl::Info[playerid][pID], currtime);
	scf(query, src, "'%i','%s','%i')", Pl::Info[accuser][pID], escstring, currtime+DAY*15);
	if(Db::query(query) && Db::affected_rows()) {
		Bl::Info[playerid][Bl::onFrac][fracid] = 1;
		Bl::Info[playerid][Bl::Kills][fracid] = 0;
		return 1;
	}
	return 0;
}

stock Bl::Remove(playerid, fracid) {
	new name[24]; GetPlayerName( playerid, name, 24 );
	format(query, sizeof query, "DELETE FROM `"#__DbPrefix__""#__TableBlacklist__"` WHERE `f_id`='%i' AND `accused`='%i'", fracid, Pl::Info[playerid][pID]);
	if(Db::query(query) && Db::affected_rows()) {
		Bl::Info[playerid][Bl::onFrac][fracid] = 0;
		Bl::Info[playerid][Bl::Kills][fracid] = 0;
		return 1;
	}
	return 0;
}

stock Bl::Update(playerid, fracid) {
	format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableBlacklist__"` SET `mink`='%i' WHERE `accused`='%i' AND `f_id`='%i'",
	Bl::Info[playerid][Bl::Kills][fracid], Pl::Info[playerid][pID], fracid);
	return Db::query(query,fracid);
}

stock Bl::Check(playerid) {
	new name[24], fracid, kills, count;
	GetPlayerName(playerid, name, 24);
	
	format(query, sizeof query, "SELECT `f_id`,`mink` FROM `"#__DbPrefix__""#__TableBlacklist__"` WHERE `accused`='%i'", Pl::Info[playerid][pID]);
	if(Db::query(query) && Db::store_result()) {
		if(Db::num_rows()) {
			format(temp, sizeof temp, "[BLACK LIST] Вы находитесь в черном списке ");
			while(Db::fetch_row(query) && ++count) {
				sscanf(query, "p<|>ii", fracid, kills);
				Bl::Info[playerid][Bl::onFrac][fracid] = 1;
				Bl::Info[playerid][Bl::Kills][fracid] = kills;
				format(query, sizeof query, "[BLACK LIST] Запахло дичью, в штате был(а) замечен(а) %s", name);
				sendToFamily(fracid, COLOR_AZTECAS, query);
				scf(temp, src, "%s, ", FracInfo[fracid][fName]);
			}
			Db::free_result();
			
			temp[strlen(temp)-2] = '\0';
			Send(playerid, COLOR_AZTECAS, temp);
			if(count) {
				format(query, sizeof query, "UPDATE `"#__DbPrefix__""#__TableBlacklist__"` SET `lastvisit` = '%i' WHERE `accused` = '%s'", (gettime()+DAY*15), name);
				Db::query(query);
			}
		}
	}
	return count;
}


stock Bl::Clear( ) {
	format(query, sizeof query, "DELETE FROM `"#__DbPrefix__""#__TableBlacklist__"` WHERE `lastvisit` <= '%i'", gettime());
	return (Db::query(query) && Db::affected_rows());
}

stock Bl::Show(playerid, fracid) {
	new accuser[24], _date[24], reason[36];
	format(query, sizeof query, "SELECT (SELECT `Name` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `ID`=`accused`),`mink`,FROM_UNIXTIME(`date`),\
	(SELECT `Name` FROM `"#__DbPrefix__""#__TableUsers__"` WHERE `ID`=`accuser`),`reason` FROM `"#__DbPrefix__""#__TableBlacklist__"` WHERE `f_id`='%i'", fracid);
	
	if(Db::query(query) && Db::store_result()) {
		Send(playerid, COLOR_WHITE, "__________________________ Черный Список __________________________");
		if(Db::num_rows()) {
			while(Db::fetch_row(query)) {
				sscanf(query, "p<|>uis[24]s[24]s[64]", query[0], query[1], _date, accuser, reason);
				if(Pl::isLogged(query[0])) {
					GetPlayerName(query[0], plname, 24);
					format(temp, sizeof temp, "* %s[ID: %i] | Статус: %i/%i | Дата: %s | Занес: %s | Причина: %s",
					plname, query[0], query[1], FracInfo[fracid][fBConf][bKILLS], _date, accuser, reason);
					Send(playerid, COLOR_AZTECAS, temp);
				}
			}
		}
	}
	return 1;
}

stock Bl::ValidState(playerid) {
	switch(GetPlayerState(playerid)) {
		case 1..3, 7, 8 : return 1;
	}
	return 0;
}

stock GetGunInfo(wname[], &weaponid, &ammo, &mats) {
	for(new i; i < sizeof(GunInfo); i++) {
		if(!strcmp( wname, GunInfo[i][g_name], true)) {
			weaponid = GunInfo[i][g_id];
			ammo = GunInfo[i][g_ammo];
			mats = GunInfo[i][g_mats];
			return 1;
		}
	}
	
	return 0;
}

stock IsATeam(playerid, mode = 0) {
	if(!mode) {
		mode = GetFracID(playerid);
		for(new i; i < sizeof(Teams); i++) {
			if(Teams[i] == mode) {
				return true;
			}
		}
	} else {
		for(new i; i < sizeof(Teams); i++) {
			if(Teams[i] == mode) {
				return true;
			}
		}
	}

	return false;
}

stock IsAFamily(playerid) {
	switch(GetFracID(playerid)) {
		case 5, 6	: return 1;
		case 8..20	: return 1;
	}
	return 0;
}

stock IsALawyer(playerid) {
	return (Pl::Info[playerid][pJob] == 2 && GetFracID(playerid) == 7 && Pl::Info[playerid][pRank] == 10);
}

stock GetPayCheck(lvl) {
	new p;
	switch(lvl) {
		case 1..3	: p = 1000;
		case 4..10	: p = 1300;
		case 11..20	: p = 1500;
		case 21..30 : p = 1800;
		case 31..40 : p = 2000;
	}
	return (lvl*p);
}

stock checkvar(varname[], string[]) {
	new value[36];
	GetServerVarAsString(varname, value, sizeof value);
	if(!strcmp(value, string)) return true;
	return false;
}

stock BlockPickup(playerid, pickupid, delay=2) {
	PickupInfo[playerid][pOld] = pickupid;
	PickupInfo[playerid][pDelay] = delay;
	streamer::GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_X, PickupInfo[playerid][pOldPos][0]);
	streamer::GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_Y, PickupInfo[playerid][pOldPos][1]);
	streamer::GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_Z, PickupInfo[playerid][pOldPos][2]);
	return 1;
}

stock Add_To_Iterator(playerid) {
	Iter_Add(TeamPlayers[GetFracID(playerid)], playerid);
	if(Pl::Info[playerid][pAdmin ]) Iter_Add(AdminPlayers, playerid);
	if(Pl::Info[playerid][pHelper]) Iter_Add(HelperPlayers, playerid);
	if(Pl::Info[playerid][pLeader]) Iter_Add(LeaderPlayers, playerid);
	if(Pl::Info[playerid][pJob	 ]) Iter_Add(JobPlayers[Pl::Info[playerid][pJob]], playerid);
	
	return 1;
}

stock Del_Of_Iterator(playerid) {
	Iter_Clear(inStreamVehicles[playerid]);
	
	Iter_Remove(AdminPlayers, playerid);
	Iter_Remove(ToglogPlayers, playerid);
	Iter_Remove(WantedPlayers, playerid);
	Iter_Remove(HelperPlayers, playerid);
	Iter_Remove(LeaderPlayers, playerid);
	Iter_Remove(PaintballPlayers, playerid);
	
	Iter_Remove(TeamPlayers[GetFracID(playerid)], playerid);
	Iter_Remove(JobPlayers[Pl::Info[playerid][pJob]], playerid);

	if(Iter_Count(inStreamPlayers[playerid])) {
		foreach(new i : inStreamPlayers[playerid]) {
			Iter_Remove(inStreamPlayers[i], playerid);
		}
	}
	Iter_Clear(inStreamPlayers[playerid]);
	
	if(Iter_Contains(MechanicCalls, playerid)) {
		Iter_Remove(MechanicCalls, playerid);
		GetPlayerName(playerid, plname, 24);
		format(temp, sizeof(temp), "* Клиент %s, вышел из игры!", plname);
		SendJobMessage(6, COLOR_AZTECAS, temp);
	}
	if(Iter_Contains(MedicCalls, playerid)) {
		Iter_Remove(MedicCalls, playerid);
		GetPlayerName(playerid, plname, 24);
		format(temp, sizeof(temp), "* Клиент %s, вышел из игры!", plname);
		sendToFamily(4, COLOR_AZTECAS, temp);
	}
	return 1;
}

stock HideNameTag(playerid, bool:hide) {
	if(Pl::isLogged(playerid)) {
		Pl::Info[playerid][pMaskOn] = hide;
		foreach(new i : inStreamPlayers[playerid]) {
			ShowPlayerNameTagForPlayer(i, playerid, !hide);
		}
	}
	return 1;
}

stock ClosestVeh(playerid, Float:radi = 200.0, exc = INVALID_VEHICLE_ID) {
	new Float: dist, vehicleid = INVALID_VEHICLE_ID;
	foreach(new i: inStreamVehicles[playerid]) {
		GetVehiclePos( i, vehx, vehy, vehz );
		dist = GetPlayerDistanceFromPoint(playerid, vehx, vehy, vehz);
		if(dist <= radi && i != exc) {
			radi = dist;
			vehicleid = i;
		}
	}
	return vehicleid;
}

stock GetPlayerBootVehicle(playerid, vehicleid) {
	if(0 <= playerid <= MAX_PLAYERS) {
		if(1 <= vehicleid <= MAX_VEHICLES) {
			new Float:x, Float:y, Float:z;
			GetCoordBootVehicle(vehicleid, x, y, z);
			foreach(new i: inStreamVehicles[playerid]) {
				if(i != vehicleid && IsVehicleInRangeOfPoint(i, 5.0, x, y, z)) {
					return i;
				}
			}
		}
	}
	return INVALID_VEHICLE_ID;
}

stock IsVehicleClosestForPlayer(playerid, vehicleid, Float:radi = 200.0, exc = INVALID_VEHICLE_ID) {
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);
	return (radi >= GetPlayerDistanceFromPoint(playerid, x, y, z) && exc == INVALID_VEHICLE_ID);
}

stock GetVehicleDriver(vehicleid) {
	if(1 <= vehicleid <= MAX_VEHICLES) {
		foreach(new p : vehiclePassengers[vehicleid]) {
			if(GetPlayerState(p) == 2) {
				return p;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock GetVehiclePassengers(vehicleid) {
	return ((1 <= vehicleid <= MAX_VEHICLES) && Iter_Count(vehiclePassengers[vehicleid]));
}

stock GetVehicleFreeSeat(vehicleid) {
	new seatid;
	for(new i = 1; i < 3; i++) {
		if(Pl::isLogged(GetVehiclePlayerSeat(vehicleid, i))) {
			return seatid;
		}
	}
	return seatid;
}

stock GetVehiclePlayerSeat(vehicleid, seatid) {
	if(vehicleid != INVALID_VEHICLE_ID && vehicleid != 0) {
		foreach(new p : vehiclePassengers[vehicleid]) {
			if(GetPlayerVehicleSeat(p) == seatid) {
				return p;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock Pl::setCamPos(playerid, i, vw=0xFFFF) {
	Rac::SetPlayerInterior(playerid,EnterPos[i][iteriorid]);
	Rac::SetPlayerVirtualWorld(playerid, (vw != 0xFFFF) ? vw : (playerid+EnterPos[i][virtworld]));
	SetPlayerCameraPos(playerid, EnterPos[i][c_pos][0],EnterPos[i][c_pos][1], EnterPos[i][c_pos][2]);
	SetPlayerCameraLookAt(playerid, EnterPos[i][c_lookAt][0],EnterPos[i][c_lookAt][1], EnterPos[i][c_lookAt][2]);
	Rac::SetPlayerPos(playerid, EnterPos[i][p_pos][0], EnterPos[i][p_pos][1], EnterPos[i][p_pos][2]);
	SetPlayerFacingAngle(playerid, EnterPos[i][p_pos][3]);
	PlayerPlaySound(playerid, EnterPos[i][musicid], 0.0, 0.0, 0.0);
}

stock SlapPlayer(playerid, Float:height) {
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	return Rac::SetPlayerPos(playerid, x, y, z+height);
}

stock SetZahvatMapIcon(bizz, attack, defend) {
	foreach(new playerid : TeamPlayers[attack]) {
		SetPlayerCheckpointEx(playerid, ZAHVAT_ICON, BizzInfo[bizz][bEnterX], BizzInfo[bizz][bEnterY], BizzInfo[bizz][bEnterZ], 19, 0, -1, -1, true);
	}
	foreach(new playerid : TeamPlayers[defend]) {
		SetPlayerCheckpointEx(playerid, ZAHVAT_ICON, BizzInfo[bizz][bEnterX], BizzInfo[bizz][bEnterY], BizzInfo[bizz][bEnterZ], 19, 0, -1, -1, true);
	}
	return 1;
}

stock DisableZahvatMapIcon(attack, defend) {
	foreach(new playerid : TeamPlayers[attack]) {
		DisablePlayerCheckpointEx(playerid, ZAHVAT_ICON);
	}
	foreach(new playerid : TeamPlayers[defend]) {
		DisablePlayerCheckpointEx(playerid, ZAHVAT_ICON);
	}
	return 1;
}
	
stock SetPlayerCheckpointEx(playerid, slot, Float:x, Float:y, Float:z, icon, color, world, interior, global) {
	if(Rac::isValidPlayer(playerid)) {
		if(0 <= slot <= 5) {
			if(PlayerCheckpoints[playerid][slot] != -1) {
				DestroyDynamicMapIcon(PlayerCheckpoints[playerid][slot]);
			}
			PlayerCheckpoints[playerid][slot] = CreateDynamicMapIcon(x, y, z, icon, color, world, interior, playerid, (global)?(99999.9):(200.0));
			streamer::SetIntData(4, PlayerCheckpoints[playerid][slot], E_STREAMER_STYLE, (global)?(MAPICON_GLOBAL_CHECKPOINT):(MAPICON_LOCAL_CHECKPOINT));
		}
	}
	return 1;
}

stock SetPlayerCheckpointPos(playerid, slot, Float:x, Float:y, Float:z) {
	if(Rac::isValidPlayer(playerid)) {
		if(0 <= slot <= 5) {
			if(PlayerCheckpoints[playerid][slot] != -1) {
				streamer::SetFloatData(4, PlayerCheckpoints[playerid][slot], E_STREAMER_X, x);
				streamer::SetFloatData(4, PlayerCheckpoints[playerid][slot], E_STREAMER_Y, y);
				streamer::SetFloatData(4, PlayerCheckpoints[playerid][slot], E_STREAMER_Z, z);
				return 1;
			}
		}
	}
	return 0;
}
stock DisablePlayerCheckpointEx(playerid, slot) {
	if(Rac::isValidPlayer(playerid)) {
		if(0 <= slot <= 5) {
			if(PlayerCheckpoints[playerid][slot] != -1) {
				DestroyDynamicMapIcon(PlayerCheckpoints[playerid][slot]);
			}
		}
	}
	return 1;
}

stock CreateRndString(dest[], len, maxlen = sizeof dest) {
	if(len > maxlen) {
		len = maxlen;
	}
	while(--len != -1) {
		dest[len] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
	}
}

public: onSobeitCheck(playerid, Float:oldz) {
	new Float:x, Float:y, Float:z;
	GetPlayerCameraPos(playerid, x, y, z);
	Rac::TogglePlayerControllable(playerid, true);
	format(temp, sizeof temp, "[AdmWarn] * %s[%i] прошел тест на собейт, результат - собейт %s", GetName(playerid), playerid, (z-oldz > 1.800)?("{AA3333}установлен"):("{33AA33}не установлен"));
	SendToAdmin(COLOR_YELLOW, temp, 1, 3);
}

public: onPTMCheck(playerid, targetid, Float:x, Float:y, Float:z) {
	if(Pl::isLogged(targetid)) {
		Rac::SetPlayerPos(targetid, x, y, z);
		format(temp, sizeof temp, "[AdmWarn] * %s[%i] прошел тест на PTM, результат - %s PTM", GetName(playerid), playerid, (GetPlayerTargetPlayer(playerid)==targetid)?("{AA3333}использует"):("{33AA33}не использует"));
		SendToAdmin(COLOR_YELLOW, temp, 1, 3);
	}
}

public: onGMTest(playerid) {
	format(temp, sizeof temp, "[AdmWarn] * %s[%i] прошел тест на GM, результат - GM %s", GetName(playerid), playerid, (GMTest{playerid})?("{AA3333}обнаружен"):("{33AA33}не обнаружен"));
	SendToAdmin(COLOR_YELLOW, temp, 1, 3);
}

stock IsPlayerInVehiclePlayer(playerid, targetid) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != 0) {
		if(IsPlayerInVehicle(targetid, vehicleid)) {
			return 1;
		}
	}
	return 0;
}

stock PreloadAnimlib(playerid) {
	static const animlib[][] = {
		"BOMBER"		,
		"RAPPING"		,
		"SHOP"			,
		"BEACH"			,
		"SMOKING"		,
		"FOOD"			,
		"ON_LOOKERS"	,
		"DEALER"		,
		"CRACK"			,
		"CARRY"			,
		"COP_AMBIENT"	,
		"PARK"			,
		"INT_HOUSE"		,
		"FOOD"			,
		"CRIB"			,
		"ROB_BANK"		,
		"JST_BUISNESS"	,
		"PED"			,
		"OTB"			,
		"FAT"			,
		"FIGHT_E"
	};
	for(new i; i < sizeof animlib; i++) {
		ApplyAnimation(playerid, animlib[i], "null", 0.0, 0, 0, 0, 0, 0);
	}
}

stock ShowLMenu(playerid, dialogid=D_LMENU-1) {
	dialog[0] = '\0';
	new fracid = GetFracID(playerid);
	switch(dialogid) {
		case D_LMENU-1 : {
			if(isTeamVehicle(fracid, GetPlayerVehicleID(playerid))) {
				strcat(dialog, "Транспорт\n");
			}
			strcat(dialog, "Ранги\n");
			switch(GetFracID(playerid)) {
				case 1..4, 7, 10 : {
					scf(dialog, temp, "Ранг новостей {AA3333}[%i]\n", GetGRank(fracid));
				}
				case 5, 6, 13 : {
					strcat(dialog, "Черный список\n");
				}
				
				case 11 : {
					scf(dialog, temp, "Ранг новостей {AA3333}[%i]\n", GetGRank(fracid));
					strcat(dialog, "Управление автошколой\n");
				}
				case 12, 14..19 : {
					strcat(dialog, "Черный список\n");
					scf(dialog, temp, "Ранг захвата {AA3333}[%i]\n", GetZRank(fracid));
				}
			}
			SPD(playerid, dialogid, DIALOG_STYLE_LIST, "[RP]GrandWorld: LEADER MENU", dialog, "SELECT", "CANCEL");
		}
		
		case D_LMENU+9 : {
			format(dialog, sizeof dialog, "Ранг для добавления в ЧС {AA3333}[%i]\n\
			{FFFFFF}Сумма выхода из ЧС {AA3333}[$%i]\n{FFFFFF}Убийств для выхода из ЧС {AA3333}[%i]",
			GetBRank(fracid), FracInfo[fracid][fBConf][bPRICE], FracInfo[fracid][fBConf][bKILLS]);
			SPD(playerid, D_LMENU+9, DIALOG_STYLE_LIST, "L-Menu. Черный список", dialog, "SELECT", "CANCEL");
		}
	}
	return 1;
}

stock updateBenzinTD(playerid, vehicleid) {
	if(0 <= playerid <= MAX_PLAYERS) {
		if(1 <= vehicleid <= MAX_VEHICLES) {
			format(temp, sizeof temp, (Benzin{vehicleid}<16)?("~w~Benzin: ~r~%i%"):("~w~Benzin: ~b~%i%"), Benzin{vehicleid});
			Pt::SetString(playerid, Td::Fuel[playerid], temp);
		}
	}
	return 1;
}

stock ShowCantina(playerid) {
	dialog[0] = '\0';
	if(GetFracID(playerid) == 3) {
		for(new i; i < sizeof(EatInfo); i++) {
			scf(dialog, temp, "• %s\n", EatInfo[i][eat_name], EatInfo[i][eat_price]);
		}
	} else {
		for(new i; i < sizeof(EatInfo); i++) {
			scf(dialog, temp, "• %s ({33AA33}%i${FFFFFF})\n", EatInfo[i][eat_name], EatInfo[i][eat_price]);
		}
	}
	return SPD(playerid, 149, 2, "• Столовая •", dialog, "Взять", "Отмена");
}

public: OnPlayerBankTransfer(playerid) {
	if(Pl::isLogged(playerid)) {
		if(GetPVarInt(playerid, "TransferPlayer")) {
			SetPVarInt(playerid, "TransferPlayer", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "TransferAmount", 0);
		}
	}
}

stock ShowDonateMenu(playerid) {
	format(dialog, sizeof dialog, "{FFFFFF}Донат счет {33AA33}[%i dp]\n", Pl::Info[playerid][pDonateMoney]);
	scf(dialog, temp, "{FFFFFF}Купить скин {AA3333}[%i dp]\n", DonateInfo[dSkinPrice]);
	scf(dialog, temp, "{FFFFFF}Купить валюту {AA3333}[$100000/%i dp]\n", DonateInfo[dCashPrice]);
	scf(dialog, temp, "{FFFFFF}Инвайт в хитманы {AA3333}[%i dp]\n", DonateInfo[dInvitePrice]);
	scf(dialog, temp, "{FFFFFF}Снять варны {AA3333}[1 warn/%i dp]\n", DonateInfo[dWarnPrice]);
	scf(dialog, temp, "{FFFFFF}Вип статус {AA3333}[%i dp]", DonateInfo[dVIPPrice]);
	return SPD(playerid, D_DONATE, DIALOG_STYLE_LIST, "[RP]GrandWorld: Donate", dialog, "SELECT", "CANCEL");
}